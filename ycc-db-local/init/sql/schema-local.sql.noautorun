-- Schema @ 2023-12 without VIEWs
-- .noautorun: The container should importing this file as SYS too upon start
SET ECHO ON ;
WHENEVER SQLERROR EXIT FAILURE ;

--------------------------------------------------------
--------------------------------------------------------
-- DDL for Sequences
--------------------------------------------------------
--------------------------------------------------------

--------------------------------------------------------
--  DDL for Sequence BOATS_ID
--------------------------------------------------------

   CREATE SEQUENCE  "BOATS_ID"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence COMMITTEE_ID
--------------------------------------------------------

   CREATE SEQUENCE  "COMMITTEE_ID"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence EMAIL_TEMPLATE_ID
--------------------------------------------------------

   CREATE SEQUENCE  "EMAIL_TEMPLATE_ID"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence FEESRECORDS_ID
--------------------------------------------------------

   CREATE SEQUENCE  "FEESRECORDS_ID"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence HOLIDAYS_ID
--------------------------------------------------------

   CREATE SEQUENCE  "HOLIDAYS_ID"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence IMPORTANT_VALUES_ID
--------------------------------------------------------

   CREATE SEQUENCE  "IMPORTANT_VALUES_ID"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence LOTTERY_ID
--------------------------------------------------------

   CREATE SEQUENCE  "LOTTERY_ID"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 2 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence MEMBERS_ID
--------------------------------------------------------

   CREATE SEQUENCE  "MEMBERS_ID"  MINVALUE 1000 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1000 CACHE 2 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence REGATTAS_EXT_ID
--------------------------------------------------------

   CREATE SEQUENCE  "REGATTAS_EXT_ID"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence REGATTAS_IN_SERIES_ID
--------------------------------------------------------

   CREATE SEQUENCE  "REGATTAS_IN_SERIES_ID"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence REGATTA_PARTICIPATION_ID
--------------------------------------------------------

   CREATE SEQUENCE  "REGATTA_PARTICIPATION_ID"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence REGATTA_PROFILES_ID
--------------------------------------------------------

   CREATE SEQUENCE  "REGATTA_PROFILES_ID"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence REGATTA_SERIES_EXT_ID
--------------------------------------------------------

   CREATE SEQUENCE  "REGATTA_SERIES_EXT_ID"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence S_EMAIL_QUEUE
--------------------------------------------------------

   CREATE SEQUENCE  "S_EMAIL_QUEUE"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 10 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence S_IMPORTANT_DATES
--------------------------------------------------------

   CREATE SEQUENCE  "S_IMPORTANT_DATES"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence S_LOTTERY_RESULTS
--------------------------------------------------------

   CREATE SEQUENCE  "S_LOTTERY_RESULTS"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TEACHERS_ID
--------------------------------------------------------

   CREATE SEQUENCE  "TEACHERS_ID"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence THURSDAY_KEY_ID
--------------------------------------------------------

   CREATE SEQUENCE  "THURSDAY_KEY_ID"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 NOCACHE  NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

--------------------------------------------------------
--------------------------------------------------------
-- DDL for Tables
--------------------------------------------------------
--------------------------------------------------------

--------------------------------------------------------
--  DDL for Table ADMIN
--------------------------------------------------------

  CREATE TABLE "ADMIN"
   (	"MEMBER_ID" NUMBER(*,0),
	"RIGHTS" NUMBER,
	"MODIFIED" DATE,
	"COMMENTS" VARCHAR2(100 BYTE)
   ) SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table ADMIN_VALUES
--------------------------------------------------------

  CREATE TABLE "ADMIN_VALUES"
   (	"RIGHT" VARCHAR2(20 BYTE),
	"VALUE" NUMBER(2,0)
   ) SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table AGENDA_EMPTY
--------------------------------------------------------

  CREATE TABLE "AGENDA_EMPTY"
   (	"DAY" DATE,
	"START_TIME" DATE,
	"END_TIME" DATE,
	"SUBMITTER" NUMBER,
	"TYPE" VARCHAR2(20 BYTE),
	"TITLE" VARCHAR2(100 BYTE),
	"PLACE" VARCHAR2(100 BYTE),
	"TEXT" VARCHAR2(500 BYTE),
	"URL" VARCHAR2(100 BYTE),
	"IMAGE_URL" VARCHAR2(100 BYTE)
   ) SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table BA5ASSIGN_OBSOLETE
--------------------------------------------------------

  CREATE TABLE "BA5ASSIGN_OBSOLETE"
   (	"KEYID" NUMBER(2,0),
	"MEMBER_ID" NUMBER(6,0),
	"ASSIGNED_DATE" DATE,
	"RETURN_DATE" DATE,
	"COMMENTS" VARCHAR2(50 BYTE),
	"LAST_VERIF" DATE
   ) SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table BA5_OBSOLETE
--------------------------------------------------------

  CREATE TABLE "BA5_OBSOLETE"
   (	"ID" NUMBER(2,0),
	"PREFIX" VARCHAR2(20 BYTE),
	"NAME" VARCHAR2(6 BYTE),
	"COMMENTS" VARCHAR2(22 BYTE)
   ) SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table BOATS
--------------------------------------------------------

  CREATE TABLE "BOATS"
   (	"BOAT_ID" NUMBER(3,0),
	"NAME" VARCHAR2(20 BYTE),
	"TYPE" VARCHAR2(20 BYTE),
	"YCC_NUM" NUMBER(3,0),
	"LICENSE" VARCHAR2(5 BYTE),
	"CLASS" VARCHAR2(5 BYTE),
	"TABLE_POS" NUMBER(5,0),
	"MAINTAINER_ID" NUMBER,
	"EXT_REG_CAT" VARCHAR2(2 BYTE),
	"MAINTAINER_ID2" NUMBER,
	"REGISTRATION_PDF" BLOB
   ) SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255
 NOCOMPRESS LOGGING
  TABLESPACE "USERS"
 LOB ("REGISTRATION_PDF") STORE AS BASICFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION
  NOCACHE LOGGING) ;
--------------------------------------------------------
--  DDL for Table BOAT_KEYS
--------------------------------------------------------

  CREATE TABLE "BOAT_KEYS"
   (	"BOAT_ID" NUMBER(3,0),
	"KEY_NR" NUMBER(3,0),
	"LOCKED" NUMBER(1,0),
	"VIRTUAL" NUMBER(1,0)
   ) SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table BUVETTE
--------------------------------------------------------

  CREATE TABLE "BUVETTE"
   (	"RES_ID" NUMBER,
	"MEMBER_ID" NUMBER,
	"DAY" DATE,
	"QUANTITY" NUMBER(2,0),
	"MODIFIED" DATE,
	"MENU" NUMBER(1,0)
   ) SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table CLASSES_OBSOLETE2001
--------------------------------------------------------

  CREATE TABLE "CLASSES_OBSOLETE2001"
   (	"CLASS_ID" NUMBER,
	"COURSE_ID" NUMBER(2,0),
	"TEACHER_ID" NUMBER,
	"HELPER_ID" NUMBER,
	"COURSE_YEAR" NUMBER(4,0),
	"DAY_CLASS" VARCHAR2(3 BYTE),
	"LANG" VARCHAR2(2 BYTE),
	"NOTES" VARCHAR2(50 BYTE)
   ) SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table COMMITTEE
--------------------------------------------------------

  CREATE TABLE "COMMITTEE"
   (	"MEMBER_ID" NUMBER,
	"CYEAR" NUMBER(4,0),
	"LCOMMENTS" VARCHAR2(100 BYTE),
	"PHOTO" VARCHAR2(50 BYTE),
	"POSITION" NUMBER,
	"ROLES" VARCHAR2(500 BYTE),
	"COMMID" NUMBER(10,0)
   ) SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table COUNTRIES
--------------------------------------------------------

  CREATE TABLE "COUNTRIES"
   (	"COUNTRY_NAME" VARCHAR2(50 BYTE),
	"COUNTRY_CODE" VARCHAR2(2 BYTE)
   ) SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table COURSES_OBS
--------------------------------------------------------

  CREATE TABLE "COURSES_OBS"
   (	"MEMBER_ID" NUMBER,
	"CLASS_ID" NUMBER,
	"PREF_DAYS" VARCHAR2(20 BYTE),
	"PREF_LANG" VARCHAR2(10 BYTE),
	"NOTES" VARCHAR2(50 BYTE)
   ) SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table DB_EDITS
--------------------------------------------------------

  CREATE TABLE "DB_EDITS"
   (	"ID" NUMBER GENERATED ALWAYS AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE ,
	"TABLE_NAME" VARCHAR2(50 BYTE),
	"ROW_ID" NUMBER,
	"TIME_STAMP" DATE
   ) SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table DELETED_MEMBER_APPS
--------------------------------------------------------

  CREATE TABLE "DELETED_MEMBER_APPS"
   (	"ID" NUMBER,
	"NAME" VARCHAR2(25 BYTE),
	"FIRSTNAME" VARCHAR2(25 BYTE)
   ) SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table DEPARTMENTS
--------------------------------------------------------

  CREATE TABLE "DEPARTMENTS"
   (	"DEP_ID" NUMBER(10,0),
	"DEP_NAME" VARCHAR2(50 BYTE)
   ) SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table EMAIL_QUEUE_TABLE
--------------------------------------------------------

  CREATE TABLE "EMAIL_QUEUE_TABLE"
   (	"ID" NUMBER(6,0),
	"FROM_FIELD" VARCHAR2(100 BYTE),
	"TO_FIELD" VARCHAR2(4000 BYTE),
	"SUBJECT" VARCHAR2(200 BYTE),
	"BODY" VARCHAR2(4000 BYTE),
	"STATUS" VARCHAR2(20 BYTE),
	"TIME_STAMP" TIMESTAMP (6) DEFAULT systimestamp,
	"CC_FIELD" VARCHAR2(4000 BYTE)
   ) SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table EMAIL_TEMPLATES
--------------------------------------------------------

  CREATE TABLE "EMAIL_TEMPLATES"
   (	"ID" NUMBER(4,0),
	"BODY" VARCHAR2(4000 BYTE),
	"DESCRIPTION" VARCHAR2(60 BYTE)
   ) SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table EMPLOYEES
--------------------------------------------------------

  CREATE TABLE "EMPLOYEES"
   (	"EMP_ID" NUMBER(10,0),
	"EMP_NAME" VARCHAR2(50 BYTE),
	"DEP_ID" NUMBER(10,0)
   ) SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table ENTRANCE_FEESRECORDS
--------------------------------------------------------

  CREATE TABLE "ENTRANCE_FEESRECORDS"
   (	"MEMBER_ID" NUMBER,
	"YEAR_F" NUMBER
   ) SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table FEES
--------------------------------------------------------

  CREATE TABLE "FEES"
   (	"CAT_ID" VARCHAR2(2 BYTE),
	"DESCRIPTION" VARCHAR2(25 BYTE),
	"ENTRANCE_FEE" NUMBER,
	"ANNUAL_FEE" NUMBER,
	"LASTCHANGE" VARCHAR2(15 BYTE)
   ) SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table FEESCOURSES_LASTENTRY2005_OBS
--------------------------------------------------------

  CREATE TABLE "FEESCOURSES_LASTENTRY2005_OBS"
   (	"MEMBER_ID" NUMBER,
	"YEAR_C" NUMBER(4,0),
	"COURSE" VARCHAR2(2 BYTE),
	"PAID_DATE" DATE,
	"PAID_MODE" VARCHAR2(4 BYTE),
	"FEECOURSE" NUMBER(3,0)
   ) SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table FEESRECORDS
--------------------------------------------------------

  CREATE TABLE "FEESRECORDS"
   (	"MEMBER_ID" NUMBER,
	"YEAR_F" NUMBER(4,0),
	"PAID_DATE" DATE,
	"PAID_MODE" VARCHAR2(4 BYTE),
	"FEE" NUMBER(3,0),
	"ENTERED_DATE" DATE DEFAULT sysdate,
	"PAYMENTID" NUMBER
   ) SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table HOLIDAYS
--------------------------------------------------------

  CREATE TABLE "HOLIDAYS"
   (	"DAY" DATE,
	"LABEL" VARCHAR2(20 BYTE),
	"ID" NUMBER
   ) SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table HT_WEB_LOGON
--------------------------------------------------------

-- Conditional creation for GLOBAL TEMPORARY TABLE

BEGIN
  BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE "HT_WEB_LOGON"';
  EXCEPTION
    WHEN OTHERS THEN
      IF SQLCODE = -942 THEN
	   -- Table does not exist, so no need to drop it
        NULL;
      ELSE
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
      END IF;
  END;

  EXECUTE IMMEDIATE 'CREATE GLOBAL TEMPORARY TABLE "HT_WEB_LOGON" (
    "MEMBER_ID" NUMBER(19,0)
  ) ON COMMIT DELETE ROWS';
END;
/
--------------------------------------------------------
--  DDL for Table IMPORTANT_DATES
--------------------------------------------------------

  CREATE TABLE "IMPORTANT_DATES"
   (	"ID" NUMBER,
	"DATETIME" DATE,
	"WHAT" VARCHAR2(50 BYTE)
   ) SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table IMPORTANT_VALUES
--------------------------------------------------------

  CREATE TABLE "IMPORTANT_VALUES"
   (	"ID" NUMBER(10,0),
	"WHAT" VARCHAR2(50 BYTE),
	"VAL" VARCHAR2(50 BYTE),
	"LAST_MODIFIED" DATE
   ) SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table INFOLICENCES
--------------------------------------------------------

  CREATE TABLE "INFOLICENCES"
   (	"INFOID" NUMBER,
	"NCOURSE" VARCHAR2(2 BYTE),
	"NLICENCE" VARCHAR2(2 BYTE),
	"NKEY" VARCHAR2(2 BYTE),
	"DESCRIPTION" VARCHAR2(50 BYTE),
	"COURSEFEE" NUMBER(4,0),
	"COURSE_NAME" VARCHAR2(30 BYTE),
	"COURSE_ACTIVE" CHAR(1 BYTE),
	"COURSE_LEVEL" NUMBER(1,0)
   ) SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table INTEREST_LEVELS
--------------------------------------------------------

  CREATE TABLE "INTEREST_LEVELS"
   (	"INTEREST_LEVEL" NUMBER(1,0),
	"DESCRIPTION" VARCHAR2(100 BYTE)
   ) SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table KEYS
--------------------------------------------------------

  CREATE TABLE "KEYS"
   (	"MEMBER_ID" NUMBER,
	"KEY_ID" NUMBER,
	"KYEAR" NUMBER
   ) SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table KEYSLOG
--------------------------------------------------------

  CREATE TABLE "KEYSLOG"
   (	"KEYSLOG_ID" NUMBER,
	"BOAT_ID" NUMBER(3,0),
	"TAKEN_BY" NUMBER,
	"RETURNED_BY" NUMBER,
	"TAKEN" DATE,
	"RETURNED" DATE,
	"LOG_ID" NUMBER
   ) SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table LICENCES
--------------------------------------------------------

  CREATE TABLE "LICENCES"
   (	"MEMBER_ID" NUMBER,
	"LICENCE_ID" NUMBER(2,0),
	"LYEAR" NUMBER(4,0),
	"LCOMMENTS" VARCHAR2(100 BYTE),
	"TEST_ID" NUMBER,
	"STATUS" NUMBER(4,0)
   ) SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255
 NOCOMPRESS LOGGING
  TABLESPACE "USERS"  ENABLE ROW MOVEMENT ;
--------------------------------------------------------
--  DDL for Table LOTTERY
--------------------------------------------------------

  CREATE TABLE "LOTTERY"
   (	"ID" NUMBER,
	"YEAR" NUMBER(4,0),
	"MEMBER_ID" NUMBER,
	"COURSE1" VARCHAR2(2 BYTE),
	"COURSE2" VARCHAR2(2 BYTE),
	"WEEKDAYS" VARCHAR2(21 BYTE),
	"LEVEL0" VARCHAR2(1 BYTE)
   ) SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table LOTTERY_PLACES
--------------------------------------------------------

  CREATE TABLE "LOTTERY_PLACES"
   (	"KEY" VARCHAR2(2 BYTE),
	"PLACES" NUMBER
   ) SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table LOTTERY_RESULTS
--------------------------------------------------------

  CREATE TABLE "LOTTERY_RESULTS"
   (	"ID" NUMBER,
	"MEMBER_ID" NUMBER,
	"YEAR" NUMBER(4,0) DEFAULT extract(year from sysdate),
	"DRAWN_SEQ" NUMBER,
	"WITHDRAWN" VARCHAR2(1 BYTE),
	"WD_COMMENT" VARCHAR2(1000 BYTE),
	"COURSE_DAY" VARCHAR2(25 BYTE)
   ) SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table LOTTERY_RESULTS_ARCHIVE
--------------------------------------------------------

  CREATE TABLE "LOTTERY_RESULTS_ARCHIVE"
   (	"ID" NUMBER,
	"MEMBER_ID" NUMBER,
	"YEAR" NUMBER(4,0),
	"DRAWN_SEQ" NUMBER,
	"WITHDRAWN" VARCHAR2(1 BYTE),
	"WD_COMMENT" VARCHAR2(1000 BYTE),
	"COURSE_DAY" VARCHAR2(25 BYTE)
   ) SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table MD_APPLICATIONFILES
--------------------------------------------------------

  CREATE TABLE "MD_APPLICATIONFILES"
   (	"ID" NUMBER,
	"APPLICATIONS_ID_FK" NUMBER,
	"NAME" VARCHAR2(200 BYTE),
	"URI" VARCHAR2(4000 BYTE),
	"TYPE" VARCHAR2(100 BYTE),
	"STATE" VARCHAR2(100 BYTE),
	"LANGUAGE" VARCHAR2(100 BYTE),
	"LOC" NUMBER,
	"SECURITY_GROUP_ID" NUMBER DEFAULT 0,
	"CREATED_ON" DATE DEFAULT sysdate,
	"CREATED_BY" VARCHAR2(4000 BYTE),
	"UPDATED_ON" DATE,
	"UPDATED_BY" VARCHAR2(4000 BYTE)
   ) SEGMENT CREATION DEFERRED
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;

   COMMENT ON COLUMN "MD_APPLICATIONFILES"."NAME" IS 'file name  //OBJECTNAME';
   COMMENT ON COLUMN "MD_APPLICATIONFILES"."URI" IS 'The uri is the part of the file url after the base dir has been removed.  See MD_APPLICATION for base dir';
   COMMENT ON COLUMN "MD_APPLICATIONFILES"."TYPE" IS 'This will denote the type of file we have, including DIR, FILE (text), BINARY, IGNORE (where we choose to ignore files)';
   COMMENT ON COLUMN "MD_APPLICATIONFILES"."STATE" IS 'State will be how this file is operated on.  For example. it will be OPEN, NEW, FIXED, IGNORED, REVIEWED, COMPLETE';
   COMMENT ON COLUMN "MD_APPLICATIONFILES"."LANGUAGE" IS 'Language of the file that has been processed.';
   COMMENT ON COLUMN "MD_APPLICATIONFILES"."SECURITY_GROUP_ID" IS 'APEX';
   COMMENT ON COLUMN "MD_APPLICATIONFILES"."CREATED_ON" IS 'APEX';
   COMMENT ON COLUMN "MD_APPLICATIONFILES"."CREATED_BY" IS 'APEX';
   COMMENT ON COLUMN "MD_APPLICATIONFILES"."UPDATED_ON" IS 'APEX';
   COMMENT ON COLUMN "MD_APPLICATIONFILES"."UPDATED_BY" IS 'APEX';
   COMMENT ON TABLE "MD_APPLICATIONFILES"  IS 'Holds a tuple for each file that is being processed whether it is changed or not.';
--------------------------------------------------------
--  DDL for Table MD_APPLICATIONS
--------------------------------------------------------

  CREATE TABLE "MD_APPLICATIONS"
   (	"ID" NUMBER,
	"NAME" VARCHAR2(4000 BYTE),
	"DESCRIPTION" VARCHAR2(4000 BYTE),
	"BASE_DIR" VARCHAR2(4000 BYTE),
	"OUTPUT_DIR" VARCHAR2(4000 BYTE),
	"BACKUP_DIR" VARCHAR2(4000 BYTE),
	"INPLACE" NUMBER,
	"PROJECT_ID_FK" NUMBER,
	"SECURITY_GROUP_ID" NUMBER DEFAULT 0,
	"CREATED_ON" DATE DEFAULT sysdate,
	"CREATED_BY" VARCHAR2(255 BYTE),
	"LAST_UPDATED_ON" DATE,
	"LAST_UPDATED_BY" VARCHAR2(255 BYTE)
   ) SEGMENT CREATION DEFERRED
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;

   COMMENT ON COLUMN "MD_APPLICATIONS"."ID" IS 'Primary Key';
   COMMENT ON COLUMN "MD_APPLICATIONS"."NAME" IS 'Name of the application suite  //OBJECTNAME';
   COMMENT ON COLUMN "MD_APPLICATIONS"."DESCRIPTION" IS 'Overview of what the application does.';
   COMMENT ON COLUMN "MD_APPLICATIONS"."BASE_DIR" IS 'This is the base src directory for the application.  It could be an svn checkout, a clearcase view or something similar';
   COMMENT ON COLUMN "MD_APPLICATIONS"."OUTPUT_DIR" IS 'This is the output directory where the scanner will present the converted files, if there are converted or modified.';
   COMMENT ON COLUMN "MD_APPLICATIONS"."BACKUP_DIR" IS 'This is the directory in which the application files are backed up if a backp is chosen';
   COMMENT ON COLUMN "MD_APPLICATIONS"."INPLACE" IS 'Designates whether the changes have been made inplace, in the source directory or not';
   COMMENT ON COLUMN "MD_APPLICATIONS"."PROJECT_ID_FK" IS 'project of the database(s) this application relates to';
   COMMENT ON TABLE "MD_APPLICATIONS"  IS 'This is the base table for application projects.  It holds the base information for applications associated with a database';
--------------------------------------------------------
--  DDL for Table MD_FILE_ARTIFACTS
--------------------------------------------------------

  CREATE TABLE "MD_FILE_ARTIFACTS"
   (	"ID" NUMBER,
	"APPLICATIONFILES_ID" NUMBER,
	"PATTERN" VARCHAR2(4000 BYTE),
	"STRING_FOUND" VARCHAR2(4000 BYTE),
	"STRING_REPLACED" VARCHAR2(4000 BYTE),
	"TYPE" VARCHAR2(200 BYTE),
	"STATUS" VARCHAR2(4000 BYTE),
	"LINE" NUMBER,
	"PATTERN_START" NUMBER,
	"PATTERN_END" NUMBER,
	"DUE_DATE" DATE,
	"DB_TYPE" VARCHAR2(100 BYTE),
	"CODE_TYPE" VARCHAR2(1000 BYTE),
	"DESCRIPTION" VARCHAR2(4000 BYTE),
	"PRIORITY" NUMBER(*,0),
	"SECURITY_GROUP_ID" VARCHAR2(20 BYTE) DEFAULT '0',
	"CREATED_ON" DATE DEFAULT sysdate,
	"CREATED_BY" VARCHAR2(4000 BYTE),
	"LAST_UPDATED" DATE,
	"LAST_UPDATED_BY" VARCHAR2(4000 BYTE)
   ) SEGMENT CREATION DEFERRED
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;

   COMMENT ON COLUMN "MD_FILE_ARTIFACTS"."PATTERN" IS 'Pattern used to search source file for interesting artifiacts';
   COMMENT ON COLUMN "MD_FILE_ARTIFACTS"."STRING_FOUND" IS 'String found in source from the pattern supplied';
   COMMENT ON COLUMN "MD_FILE_ARTIFACTS"."STRING_REPLACED" IS 'This is the string which replace the string found if it was replaced.';
   COMMENT ON COLUMN "MD_FILE_ARTIFACTS"."TYPE" IS 'This is the type of the replacement.  It could be a straight replace from a replacement pattern, or we could have passed the string to a translator which would change the string depending on the database.';
   COMMENT ON COLUMN "MD_FILE_ARTIFACTS"."STATUS" IS 'Pattern used to search source file for interesting artifiacts';
   COMMENT ON COLUMN "MD_FILE_ARTIFACTS"."DUE_DATE" IS 'Due date is used by the TODO mechanism to manage the validation and work to complete this change';
   COMMENT ON COLUMN "MD_FILE_ARTIFACTS"."DB_TYPE" IS 'Source database calls type';
   COMMENT ON COLUMN "MD_FILE_ARTIFACTS"."CODE_TYPE" IS 'Source code db api, like dblib, jdbc';
   COMMENT ON COLUMN "MD_FILE_ARTIFACTS"."DESCRIPTION" IS 'This is a description of the artifact which will have a default generated by the scanner and then can be modified by the user to be more appropriate for their use';
   COMMENT ON COLUMN "MD_FILE_ARTIFACTS"."PRIORITY" IS 'The priority is set for the TODOs so they can be managed by the user';
   COMMENT ON TABLE "MD_FILE_ARTIFACTS"  IS 'Holds a tuple for each interesting thing the scanner finds in a file';
--------------------------------------------------------
--  DDL for Table MD_TABLESPACES
--------------------------------------------------------

  CREATE TABLE "MD_TABLESPACES"
   (	"ID" NUMBER,
	"SCHEMA_ID_FK" NUMBER,
	"TABLESPACE_NAME" VARCHAR2(4000 BYTE),
	"NATIVE_SQL" CLOB,
	"NATIVE_KEY" VARCHAR2(4000 BYTE),
	"COMMENTS" VARCHAR2(4000 BYTE),
	"SECURITY_GROUP_ID" NUMBER DEFAULT 0,
	"CREATED_ON" DATE DEFAULT sysdate,
	"CREATED_BY" VARCHAR2(255 BYTE),
	"LAST_UPDATED_ON" DATE,
	"LAST_UPDATED_BY" VARCHAR2(255 BYTE)
   ) SEGMENT CREATION DEFERRED
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255
 NOCOMPRESS LOGGING
  TABLESPACE "USERS"
 LOB ("NATIVE_SQL") STORE AS BASICFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION
  CACHE ) ;

   COMMENT ON COLUMN "MD_TABLESPACES"."ID" IS 'Primary Key';
   COMMENT ON TABLE "MD_TABLESPACES"  IS 'For storing information about tablespaces.';
--------------------------------------------------------
--  DDL for Table MEMBERS
--------------------------------------------------------

  CREATE TABLE "MEMBERS"
   (	"ID" NUMBER,
	"NAME" VARCHAR2(25 BYTE),
	"FIRSTNAME" VARCHAR2(25 BYTE),
	"BIRTHDAY" DATE,
	"NATIONALITY" VARCHAR2(3 BYTE),
	"MEMBERSHIP" VARCHAR2(2 BYTE),
	"TEMP_MEMB" NUMBER(1,0),
	"LANG1" VARCHAR2(3 BYTE),
	"LANG2" VARCHAR2(3 BYTE),
	"CATEGORY" VARCHAR2(1 BYTE),
	"WORK_ADDRESS1" VARCHAR2(50 BYTE),
	"WORK_ADDRESS2" VARCHAR2(50 BYTE),
	"WORK_TOWNCODE" VARCHAR2(7 BYTE),
	"WORK_TOWN" VARCHAR2(25 BYTE),
	"WORK_STATE" VARCHAR2(5 BYTE),
	"WORK_PHONE" VARCHAR2(25 BYTE),
	"E_MAIL" VARCHAR2(50 BYTE),
	"HOME_ADDR" VARCHAR2(50 BYTE),
	"HOME_TOWNCODE" VARCHAR2(7 BYTE),
	"HOME_TOWN" VARCHAR2(25 BYTE),
	"HOME_STATE" VARCHAR2(5 BYTE),
	"HOME_PHONE" VARCHAR2(25 BYTE),
	"MAIL_PREFERENCE" VARCHAR2(1 BYTE),
	"FAVOURITE_MAILING_POST" VARCHAR2(1 BYTE),
	"MEMBER_ENTRANCE" VARCHAR2(4 BYTE),
	"CELL_PHONE" VARCHAR2(25 BYTE),
	"GENDER" VARCHAR2(2 BYTE),
	"VALID_UNTIL_DATE" DATE,
	"LAST_UPDATED_DATE" DATE,
	"VALID_FROM_DATE" DATE,
	"INTEREST_IN_FIBREGLASS" NUMBER(1,0),
	"INTEREST_IN_WOODWORK" NUMBER(1,0),
	"INTEREST_IN_ROPEWORK" NUMBER(1,0),
	"INTEREST_IN_PAINTWORK" NUMBER(1,0),
	"INTEREST_IN_MOTORS" NUMBER(1,0),
	"INTEREST_IN_ORGANISING_SOCIAL" NUMBER(1,0),
	"INTEREST_IN_ORGANISING_REGATTAS" NUMBER(1,0),
	"INTEREST_IN_TEACHING_DINGHIES" NUMBER(1,0),
	"INTEREST_IN_TEACHING_CATS" NUMBER(1,0),
	"INTEREST_IN_TEACHING_KEELBOATS" NUMBER(1,0),
	"INTEREST_IN_TEACHING_MOTORBOATS" NUMBER(1,0),
	"INTEREST_IN_SURVEILLANCE" NUMBER(1,0),
	"INTEREST_IN_TOWING_ON_LAND" NUMBER(1,0),
	"SPECIAL_TALENTS" VARCHAR2(1000 BYTE)
   ) SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table MEMBERSHIP
--------------------------------------------------------

  CREATE TABLE "MEMBERSHIP"
   (	"MB_ID" NUMBER(2,0),
	"MB_NAME" VARCHAR2(2 BYTE),
	"E_DESC" VARCHAR2(20 BYTE),
	"F_DESC" VARCHAR2(20 BYTE),
	"COMMENTS" VARCHAR2(200 BYTE)
   ) SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table MEMBERSHIP_APPLICATIONS
--------------------------------------------------------

  CREATE TABLE "MEMBERSHIP_APPLICATIONS"
   (	"ID" NUMBER,
	"NAME" VARCHAR2(25 BYTE),
	"FIRSTNAME" VARCHAR2(25 BYTE),
	"BIRTHDAY" DATE,
	"NATIONALITY" VARCHAR2(3 BYTE),
	"MEMBERSHIP" VARCHAR2(2 BYTE),
	"TEMP_MEMB" NUMBER(1,0),
	"LANG1" VARCHAR2(3 BYTE),
	"LANG2" VARCHAR2(3 BYTE),
	"CATEGORY" VARCHAR2(1 BYTE),
	"WORK_ADDRESS1" VARCHAR2(50 BYTE),
	"WORK_ADDRESS2" VARCHAR2(50 BYTE),
	"WORK_TOWNCODE" VARCHAR2(7 BYTE),
	"WORK_TOWN" VARCHAR2(25 BYTE),
	"WORK_STATE" VARCHAR2(5 BYTE),
	"WORK_PHONE" VARCHAR2(25 BYTE),
	"E_MAIL" VARCHAR2(50 BYTE),
	"HOME_ADDR" VARCHAR2(50 BYTE),
	"HOME_TOWNCODE" VARCHAR2(7 BYTE),
	"HOME_TOWN" VARCHAR2(25 BYTE),
	"HOME_STATE" VARCHAR2(5 BYTE),
	"HOME_PHONE" VARCHAR2(25 BYTE),
	"MAIL_PREFERENCE" VARCHAR2(1 BYTE),
	"FAVOURITE_MAILING_POST" VARCHAR2(1 BYTE),
	"MEMBER_ENTRANCE" VARCHAR2(4 BYTE),
	"CELL_PHONE" VARCHAR2(25 BYTE),
	"LOGON_ID" VARCHAR2(25 BYTE),
	"LOGON_PASSWD" VARCHAR2(25 BYTE),
	"COURSE1" VARCHAR2(2 BYTE),
	"COURSE2" VARCHAR2(2 BYTE),
	"PRINT_RECEIVED" CHAR(1 BYTE) DEFAULT 'N',
	"SUBMITTED_DATE" DATE DEFAULT sysdate,
	"LAST_UPDATED_DATE" DATE,
	"GENDER" VARCHAR2(2 BYTE),
	"LOGON_PASS2" VARCHAR2(128 BYTE),
	"PASS_RESET_KEY" VARCHAR2(64 BYTE),
	"PASS_RESET_EXP" DATE,
	"LAST_CHANGED" DATE,
	"VALID_UNTIL_DATE" DATE,
	"VALID_FROM_DATE" DATE,
	"INTEREST_IN_FIBREGLASS" NUMBER(1,0),
	"INTEREST_IN_WOODWORK" NUMBER(1,0),
	"INTEREST_IN_ROPEWORK" NUMBER(1,0),
	"INTEREST_IN_PAINTWORK" NUMBER(1,0),
	"INTEREST_IN_ORGANISING_SOCIAL" NUMBER(1,0),
	"INTEREST_IN_ORGANISING_REGATTAS" NUMBER(1,0),
	"INTEREST_IN_TEACHING_DINGHIES" NUMBER(1,0),
	"INTEREST_IN_TEACHING_CATS" NUMBER(1,0),
	"INTEREST_IN_TEACHING_KEELBOATS" NUMBER(1,0),
	"INTEREST_IN_TEACHING_MOTORBOATS" NUMBER(1,0),
	"INTEREST_IN_SURVEILLANCE" NUMBER(1,0),
	"INTEREST_IN_TOWING_ON_LAND" NUMBER(1,0),
	"SPECIAL_TALENTS" VARCHAR2(1000 BYTE),
	"INTEREST_IN_MOTORS" NUMBER(1,0)
   ) SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table MEMBERSHIP_APPLICATIONS_TO_DEL
--------------------------------------------------------

  CREATE TABLE "MEMBERSHIP_APPLICATIONS_TO_DEL"
   (	"ID" NUMBER,
	"NAME" VARCHAR2(25 BYTE),
	"FIRSTNAME" VARCHAR2(25 BYTE),
	"BIRTHDAY" DATE,
	"NATIONALITY" VARCHAR2(3 BYTE),
	"MEMBERSHIP" VARCHAR2(2 BYTE),
	"TEMP_MEMB" NUMBER(1,0),
	"LANG1" VARCHAR2(3 BYTE),
	"LANG2" VARCHAR2(3 BYTE),
	"CATEGORY" VARCHAR2(1 BYTE),
	"WORK_ADDRESS1" VARCHAR2(50 BYTE),
	"WORK_ADDRESS2" VARCHAR2(50 BYTE),
	"WORK_TOWNCODE" VARCHAR2(7 BYTE),
	"WORK_TOWN" VARCHAR2(25 BYTE),
	"WORK_STATE" VARCHAR2(5 BYTE),
	"WORK_PHONE" VARCHAR2(25 BYTE),
	"E_MAIL" VARCHAR2(50 BYTE),
	"HOME_ADDR" VARCHAR2(50 BYTE),
	"HOME_TOWNCODE" VARCHAR2(7 BYTE),
	"HOME_TOWN" VARCHAR2(25 BYTE),
	"HOME_STATE" VARCHAR2(5 BYTE),
	"HOME_PHONE" VARCHAR2(25 BYTE),
	"MAIL_PREFERENCE" VARCHAR2(1 BYTE),
	"FAVOURITE_MAILING_POST" VARCHAR2(1 BYTE),
	"MEMBER_ENTRANCE" VARCHAR2(4 BYTE),
	"CELL_PHONE" VARCHAR2(25 BYTE),
	"LOGON_ID" VARCHAR2(25 BYTE),
	"LOGON_PASSWD" VARCHAR2(25 BYTE),
	"COURSE1" VARCHAR2(2 BYTE),
	"COURSE2" VARCHAR2(2 BYTE),
	"PRINT_RECEIVED" CHAR(1 BYTE),
	"SUBMITTED_DATE" DATE,
	"LAST_UPDATED_DATE" DATE,
	"GENDER" VARCHAR2(2 BYTE),
	"LOGON_PASS2" VARCHAR2(128 BYTE),
	"PASS_RESET_KEY" VARCHAR2(64 BYTE),
	"PASS_RESET_EXP" DATE,
	"LAST_CHANGED" DATE,
	"VALID_UNTIL_DATE" DATE,
	"VALID_FROM_DATE" DATE,
	"INTEREST_IN_FIBREGLASS" NUMBER(1,0),
	"INTEREST_IN_WOODWORK" NUMBER(1,0),
	"INTEREST_IN_ROPEWORK" NUMBER(1,0),
	"INTEREST_IN_PAINTWORK" NUMBER(1,0),
	"INTEREST_IN_ORGANISING_SOCIAL" NUMBER(1,0),
	"INTEREST_IN_ORGANISING_REGATTAS" NUMBER(1,0),
	"INTEREST_IN_TEACHING_DINGHIES" NUMBER(1,0),
	"INTEREST_IN_TEACHING_CATS" NUMBER(1,0),
	"INTEREST_IN_TEACHING_KEELBOATS" NUMBER(1,0),
	"INTEREST_IN_TEACHING_MOTORBOATS" NUMBER(1,0),
	"INTEREST_IN_SURVEILLANCE" NUMBER(1,0),
	"INTEREST_IN_TOWING_ON_LAND" NUMBER(1,0),
	"SPECIAL_TALENTS" VARCHAR2(1000 BYTE),
	"INTEREST_IN_MOTORS" NUMBER(1,0)
   ) SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table MEMBERS_DATA_HISTORY
--------------------------------------------------------

  CREATE TABLE "MEMBERS_DATA_HISTORY"
   (	"ID" NUMBER,
	"NAME" VARCHAR2(25 BYTE),
	"FIRSTNAME" VARCHAR2(25 BYTE),
	"BIRTHDAY" DATE,
	"NATIONALITY" VARCHAR2(3 BYTE),
	"MEMBERSHIP" VARCHAR2(2 BYTE),
	"TEMP_MEMB" NUMBER(1,0),
	"LANG1" VARCHAR2(3 BYTE),
	"LANG2" VARCHAR2(3 BYTE),
	"CATEGORY" VARCHAR2(1 BYTE),
	"WORK_ADDRESS1" VARCHAR2(50 BYTE),
	"WORK_ADDRESS2" VARCHAR2(50 BYTE),
	"WORK_TOWNCODE" VARCHAR2(7 BYTE),
	"WORK_TOWN" VARCHAR2(25 BYTE),
	"WORK_STATE" VARCHAR2(5 BYTE),
	"WORK_PHONE" VARCHAR2(25 BYTE),
	"E_MAIL" VARCHAR2(50 BYTE),
	"HOME_ADDR" VARCHAR2(50 BYTE),
	"HOME_TOWNCODE" VARCHAR2(7 BYTE),
	"HOME_TOWN" VARCHAR2(25 BYTE),
	"HOME_STATE" VARCHAR2(5 BYTE),
	"HOME_PHONE" VARCHAR2(25 BYTE),
	"MAIL_PREFERENCE" VARCHAR2(1 BYTE),
	"FAVOURITE_MAILING_POST" VARCHAR2(1 BYTE),
	"MEMBER_ENTRANCE" VARCHAR2(4 BYTE),
	"CELL_PHONE" VARCHAR2(25 BYTE),
	"GENDER" VARCHAR2(2 BYTE),
	"VALID_UNTIL_DATE" DATE,
	"VALID_FROM_DATE" DATE
   ) SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table MEMBERS_XX_EMPTY
--------------------------------------------------------

  CREATE TABLE "MEMBERS_XX_EMPTY"
   (	"ID" NUMBER,
	"NAME" VARCHAR2(25 BYTE),
	"FIRSTNAME" VARCHAR2(25 BYTE),
	"BIRTHDAY" DATE,
	"NATIONALITY" VARCHAR2(3 BYTE),
	"MEMBERSHIP" VARCHAR2(2 BYTE),
	"PREF_LANG" VARCHAR2(1 BYTE),
	"LANG2" VARCHAR2(1 BYTE),
	"CATEGORY" VARCHAR2(1 BYTE),
	"RESID" VARCHAR2(2 BYTE),
	"ADDRESS1" VARCHAR2(50 BYTE),
	"ADDRESS2" VARCHAR2(50 BYTE),
	"TOWNCODE" VARCHAR2(7 BYTE),
	"TOWN" VARCHAR2(25 BYTE),
	"STATE" VARCHAR2(2 BYTE),
	"WORK_PHONE" VARCHAR2(20 BYTE),
	"HOME_PHONE" VARCHAR2(20 BYTE),
	"CELL_PHONE" VARCHAR2(20 BYTE),
	"E_MAIL" VARCHAR2(50 BYTE),
	"MAIL_PREFERENCE" VARCHAR2(1 BYTE),
	"MEMBER_ENTRANCE" VARCHAR2(2 BYTE)
   ) SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table MULTIPLERESERVATION
--------------------------------------------------------

  CREATE TABLE "MULTIPLERESERVATION"
   (	"RES_ID" NUMBER,
	"MEMBER_ID" NUMBER,
	"RESDATE" DATE,
	"CREATED" DATE,
	"MODIFIED" DATE,
	"QUANTITY1" NUMBER(2,0),
	"QUANTITY2" NUMBER(2,0),
	"QUANTITY3" NUMBER(2,0),
	"QUANTITY4" NUMBER(2,0),
	"QUANTITY5" NUMBER(2,0) DEFAULT 0
   ) SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table NATIONALITIES_TO_DROP
--------------------------------------------------------

  CREATE TABLE "NATIONALITIES_TO_DROP"
   (	"NATID" VARCHAR2(2 BYTE),
	"ENAME" VARCHAR2(15 BYTE),
	"FNAME" VARCHAR2(15 BYTE)
   ) SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table NEWMEMBERS_EMPTY
--------------------------------------------------------

  CREATE TABLE "NEWMEMBERS_EMPTY"
   (	"ID" NUMBER,
	"NAME" VARCHAR2(25 BYTE),
	"FIRSTNAME" VARCHAR2(25 BYTE),
	"BIRTHDAY" DATE,
	"NATIONALITY" VARCHAR2(2 BYTE),
	"MEMBERSHIP" VARCHAR2(2 BYTE),
	"LANG" VARCHAR2(1 BYTE),
	"CATEGORY" VARCHAR2(1 BYTE),
	"ADDRESS1" VARCHAR2(50 BYTE),
	"ADDRESS2" VARCHAR2(50 BYTE),
	"TOWNCODE" NUMBER(7,0),
	"TOWN" VARCHAR2(25 BYTE),
	"STATE" VARCHAR2(2 BYTE),
	"PHONE1" VARCHAR2(15 BYTE),
	"PHONE2" VARCHAR2(15 BYTE),
	"CELLPHONE" VARCHAR2(15 BYTE),
	"E_MAIL" VARCHAR2(50 BYTE),
	"MAIL_PREFERENCE" VARCHAR2(1 BYTE),
	"MEMBER_ENTRANCE" NUMBER(4,0)
   ) SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table REGATTAS_EXT
--------------------------------------------------------

  CREATE TABLE "REGATTAS_EXT"
   (	"ID" NUMBER,
	"DATE_FROM" DATE,
	"DATE_TO" DATE,
	"NAME" VARCHAR2(50 BYTE),
	"DATE_YCC_DEADLINE" DATE,
	"DATE_REG_DEADLINE" DATE,
	"YCC_BOAT_CATEGORY" VARCHAR2(20 BYTE),
	"URL_NOR" VARCHAR2(200 BYTE),
	"URL_WEB" VARCHAR2(200 BYTE),
	"URL_RESULTS" VARCHAR2(200 BYTE),
	"NOTE" VARCHAR2(200 BYTE),
	"BOATS_ASSIGNED" DATE,
	"URL_SI" VARCHAR2(200 BYTE)
   ) SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table REGATTAS_IN_SERIES
--------------------------------------------------------

  CREATE TABLE "REGATTAS_IN_SERIES"
   (	"REGATTA_IN_SERIES_ID" NUMBER,
	"REGATTA_ID" NUMBER,
	"SERIES_ID" NUMBER
   ) SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table REGATTA_PARTICIPATION
--------------------------------------------------------

  CREATE TABLE "REGATTA_PARTICIPATION"
   (	"ID" NUMBER,
	"MEMBER_ID" NUMBER,
	"REGATTA_ID" NUMBER,
	"BOAT_ID" NUMBER,
	"PREFERENCE" VARCHAR2(15 BYTE),
	"COMMENTS" VARCHAR2(200 BYTE),
	"STATUS" VARCHAR2(15 BYTE) DEFAULT 'Submitted',
	"REPORT" VARCHAR2(4000 BYTE),
	"REPORT_PHOTO_LINK" VARCHAR2(200 BYTE),
	"REPORT_DATE" DATE,
	"ASSIGNED_BOAT_ID" NUMBER
   ) SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table REGATTA_PROFILES
--------------------------------------------------------

  CREATE TABLE "REGATTA_PROFILES"
   (	"ID" NUMBER,
	"MEMBER_ID" NUMBER,
	"PROFILE_YEAR" NUMBER(4,0),
	"LICENCE" VARCHAR2(10 BYTE),
	"CLUB" VARCHAR2(25 BYTE),
	"EXPERIENCE" VARCHAR2(1000 BYTE)
   ) SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table REGATTA_SERIES_EXT
--------------------------------------------------------

  CREATE TABLE "REGATTA_SERIES_EXT"
   (	"ID" NUMBER,
	"NAME" VARCHAR2(50 BYTE),
	"URL_RULES" VARCHAR2(200 BYTE),
	"URL_WEB" VARCHAR2(200 BYTE),
	"URL_RESULTS" VARCHAR2(200 BYTE),
	"YEAR" NUMBER(4,0)
   ) SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table RESERVATIONS
--------------------------------------------------------

  CREATE TABLE "RESERVATIONS"
   (	"RES_ID" NUMBER,
	"BOAT_ID" NUMBER(3,0),
	"OWNER_ID" NUMBER,
	"LABEL" VARCHAR2(25 BYTE),
	"DAY" DATE,
	"PERIOD" NUMBER(1,0),
	"LOCKED" NUMBER(1,0),
	"DELETED" DATE,
	"MODIFIED" DATE
   ) SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table R_MEMBERS
--------------------------------------------------------

  CREATE TABLE "R_MEMBERS"
   (	"ID" NUMBER,
	"R_ID" NUMBER
   ) SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table STATUS
--------------------------------------------------------

  CREATE TABLE "STATUS"
   (	"STAT_ID" NUMBER,
	"BOAT_ID" NUMBER(3,0),
	"OWNER_ID" NUMBER,
	"LABEL" VARCHAR2(20 BYTE),
	"S_BEGIN" DATE,
	"S_END" DATE,
	"STATUS" NUMBER(1,0),
	"MODIFIED" DATE
   ) SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table SUTEST_LASTENTRE2004_OBS
--------------------------------------------------------

  CREATE TABLE "SUTEST_LASTENTRE2004_OBS"
   (	"MEMBER_ID" NUMBER,
	"THEORY" DATE,
	"TCOMMENTS" VARCHAR2(50 BYTE),
	"PRACTICAL" DATE,
	"PCOMMENTS" VARCHAR2(50 BYTE)
   ) SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table SU_PREOUTING_LASTENTRY2003_OBS
--------------------------------------------------------

  CREATE TABLE "SU_PREOUTING_LASTENTRY2003_OBS"
   (	"MEMBER_ID" NUMBER,
	"YEAR" NUMBER(4,0),
	"COMMENTS" VARCHAR2(50 BYTE)
   ) SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table SWSRECORDS_OBSOLETE
--------------------------------------------------------

  CREATE TABLE "SWSRECORDS_OBSOLETE"
   (	"MEMBER_ID" NUMBER,
	"SWS_YEAR" NUMBER(4,0),
	"SENT_TO_SWS_DATE" DATE,
	"COMMENTS" VARCHAR2(20 BYTE)
   ) SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table SYS_TEMP_FBT
--------------------------------------------------------

  CREATE GLOBAL TEMPORARY TABLE "SYS_TEMP_FBT"
   (	"SCHEMA" VARCHAR2(32 BYTE),
	"OBJECT_NAME" VARCHAR2(32 BYTE),
	"OBJECT#" NUMBER,
	"RID" UROWID (4000),
	"ACTION" CHAR(1 BYTE)
   ) ON COMMIT PRESERVE ROWS ;
--------------------------------------------------------
--  DDL for Table TEACHERS
--------------------------------------------------------

  CREATE TABLE "TEACHERS"
   (	"MEMBER_ID" NUMBER,
	"LICENSE" VARCHAR2(5 BYTE),
	"ACTIVE" NUMBER(1,0),
	"SINCE" NUMBER(4,0),
	"TEACHER_ID" NUMBER
   ) SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TEMPMEMBERS_LASTEMTRY2005_OBS
--------------------------------------------------------

  CREATE TABLE "TEMPMEMBERS_LASTEMTRY2005_OBS"
   (	"MEMBER_ID" NUMBER,
	"PERIOD_YEAR" NUMBER(4,0),
	"PERIOD_FROM" VARCHAR2(3 BYTE),
	"PERIOD_TO" VARCHAR2(3 BYTE),
	"MONTHS" NUMBER(1,0),
	"COMMENTS" VARCHAR2(50 BYTE)
   ) SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TEMP_MEMBERS_LASTENTRY2001_OBS
--------------------------------------------------------

  CREATE TABLE "TEMP_MEMBERS_LASTENTRY2001_OBS"
   (	"ID" NUMBER,
	"DATA" DATE,
	"NAME" VARCHAR2(50 BYTE),
	"MEMBERSHIP" VARCHAR2(10 BYTE),
	"PAID_IN" VARCHAR2(4 BYTE),
	"FEE" NUMBER,
	"COURSE" VARCHAR2(2 BYTE),
	"COURSE_COST" NUMBER,
	"TOTAL" NUMBER
   ) SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TESTS
--------------------------------------------------------

  CREATE TABLE "TESTS"
   (	"TEST_ID" NUMBER,
	"TEST_TYPE" VARCHAR2(5 BYTE),
	"MEMBER_ID" NUMBER,
	"TESTER_ID" NUMBER,
	"TEST_DATE" DATE,
	"RESULT" VARCHAR2(5 BYTE),
	"COMMENTS" CLOB
   ) SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255
 NOCOMPRESS LOGGING
  TABLESPACE "USERS"
 LOB ("COMMENTS") STORE AS BASICFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192 PCTVERSION 10
  NOCACHE LOGGING) ;
--------------------------------------------------------
--  DDL for Table TO_DEL_LOTTERY_BCK20190207
--------------------------------------------------------

  CREATE TABLE "TO_DEL_LOTTERY_BCK20190207"
   (	"ID" NUMBER,
	"YEAR" NUMBER(4,0),
	"MEMBER_ID" NUMBER,
	"COURSE1" VARCHAR2(2 BYTE),
	"COURSE2" VARCHAR2(2 BYTE),
	"WEEKDAYS" VARCHAR2(21 BYTE)
   ) SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table T_MEMBERS_OBSOLETE
--------------------------------------------------------

  CREATE TABLE "T_MEMBERS_OBSOLETE"
   (	"T_ID" NUMBER,
	"T_YEAR" NUMBER(4,0),
	"T_FROM" DATE,
	"T_TO" DATE
   ) SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table USERLIST
--------------------------------------------------------

  CREATE TABLE "USERLIST"
   (	"USERNAME" VARCHAR2(8 BYTE),
	"PASSWORD" VARCHAR2(10 BYTE)
   ) SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table WEBNEWS_EMPTY
--------------------------------------------------------

  CREATE TABLE "WEBNEWS_EMPTY"
   (	"SUBMITTER" NUMBER,
	"SUBMITTER_EMAIL" VARCHAR2(50 BYTE),
	"SUBMISSION" DATE,
	"EXPIRY_DATE" DATE,
	"MESSAGE_TYPE" VARCHAR2(10 BYTE),
	"MESSAGE" VARCHAR2(500 BYTE),
	"MESSAGE_URL" VARCHAR2(100 BYTE),
	"IMAGE_URL" VARCHAR2(100 BYTE)
   ) SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table WEB_LOGON
--------------------------------------------------------

  CREATE TABLE "WEB_LOGON"
   (	"MEMBER_ID" NUMBER,
	"LOGON_ID" VARCHAR2(25 BYTE),
	"SESSION_ID" NUMBER,
	"SESSION_DATE" DATE,
	"LOGON_PASS2" VARCHAR2(128 BYTE),
	"PASS_RESET_KEY" VARCHAR2(128 BYTE),
	"PASS_RESET_EXP" DATE,
	"LAST_CHANGED" DATE,
	"RF_UID" VARCHAR2(10 BYTE)
   ) SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table WEB_LOGON_AUDIT
--------------------------------------------------------

  CREATE TABLE "WEB_LOGON_AUDIT"
   (	"LOGON_ID" VARCHAR2(50 BYTE),
	"SESSION_ID" VARCHAR2(50 BYTE),
	"CLIENT_IP" VARCHAR2(50 BYTE),
	"EVENT_DATETIME" DATE,
	"EVENT_TYPE" VARCHAR2(30 BYTE)
   ) SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table YCCLOG
--------------------------------------------------------

  CREATE TABLE "YCCLOG"
   (	"BOAT_ID" NUMBER(3,0),
	"OWNER_ID" NUMBER,
	"STATUS" VARCHAR2(10 BYTE),
	"MODIFIED" DATE,
	"KEYSLOG_ID" NUMBER,
	"LOG_ID" NUMBER,
	"LOG_COMMENT" CLOB,
	"SKIPPER" VARCHAR2(50 BYTE),
	"CREW" VARCHAR2(200 BYTE),
	"WIND" VARCHAR2(50 BYTE)
   ) SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255
 NOCOMPRESS LOGGING
  TABLESPACE "USERS"
 LOB ("LOG_COMMENT") STORE AS BASICFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION
  NOCACHE LOGGING) ;

--------------------------------------------------------
--------------------------------------------------------
-- DDL for Indices
--------------------------------------------------------
--------------------------------------------------------

--------------------------------------------------------
--  DDL for Index APPLICATIONS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APPLICATIONS_PK" ON "MEMBERSHIP_APPLICATIONS" ("ID")
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index BOAT_KEYS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "BOAT_KEYS_PK" ON "BOAT_KEYS" ("BOAT_ID")
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index CAT_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "CAT_PK" ON "FEES" ("CAT_ID")
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index CLASSES_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "CLASSES_PK" ON "CLASSES_OBSOLETE2001" ("CLASS_ID", "TEACHER_ID", "COURSE_YEAR")
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index COMMITTEE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COMMITTEE_PK" ON "COMMITTEE" ("MEMBER_ID", "CYEAR")
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index COURSES_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "COURSES_PK" ON "COURSES_OBS" ("MEMBER_ID", "CLASS_ID")
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index DB_EDITS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "DB_EDITS_PK" ON "DB_EDITS" ("ID")
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index ENTRANCE_FEESRECORDS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "ENTRANCE_FEESRECORDS_PK" ON "ENTRANCE_FEESRECORDS" ("MEMBER_ID")
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index ENTRANCE_FEE_UQ
--------------------------------------------------------

  CREATE UNIQUE INDEX "ENTRANCE_FEE_UQ" ON "ENTRANCE_FEESRECORDS" ("MEMBER_ID", "YEAR_F")
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index REGATTAS_IN_SERIES_UQ
--------------------------------------------------------

  CREATE UNIQUE INDEX "REGATTAS_IN_SERIES_UQ" ON "REGATTAS_IN_SERIES" ("REGATTA_ID", "SERIES_ID")
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index REGATTA_PARTICIP_UQ
--------------------------------------------------------

  CREATE UNIQUE INDEX "REGATTA_PARTICIP_UQ" ON "REGATTA_PARTICIPATION" ("MEMBER_ID", "REGATTA_ID")
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index IMPORTANT_DATES_UQ
--------------------------------------------------------

  CREATE UNIQUE INDEX "IMPORTANT_DATES_UQ" ON "IMPORTANT_DATES" ("WHAT")
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index KEYS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "KEYS_PK" ON "KEYS" ("KEY_ID", "MEMBER_ID", "KYEAR")
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index LICENCE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "LICENCE_PK" ON "LICENCES" ("LICENCE_ID", "MEMBER_ID")
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index LICINFO_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "LICINFO_PK" ON "INFOLICENCES" ("INFOID")
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index LOTTERY_RESULTS_UQ1
--------------------------------------------------------

  CREATE UNIQUE INDEX "LOTTERY_RESULTS_UQ1" ON "LOTTERY_RESULTS" ("MEMBER_ID", "YEAR")
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index LOTTERY_RESULTS_UQ2
--------------------------------------------------------

  CREATE UNIQUE INDEX "LOTTERY_RESULTS_UQ2" ON "LOTTERY_RESULTS" ("DRAWN_SEQ", "YEAR")
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index LOTTERY_UQ
--------------------------------------------------------

  CREATE UNIQUE INDEX "LOTTERY_UQ" ON "LOTTERY" ("YEAR", "MEMBER_ID")
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index MD_APPLICATIONFILES_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "MD_APPLICATIONFILES_PK" ON "MD_APPLICATIONFILES" ("ID")
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index MD_APPLICATIONS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "MD_APPLICATIONS_PK" ON "MD_APPLICATIONS" ("ID")
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index MD_FILE_ARTIFACTS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "MD_FILE_ARTIFACTS_PK" ON "MD_FILE_ARTIFACTS" ("ID")
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index MEMBERS_DC_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "MEMBERS_DC_PK" ON "MEMBERS_DATA_HISTORY" ("ID", "VALID_UNTIL_DATE")
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index MEMBERS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "MEMBERS_PK" ON "MEMBERS" ("ID")
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index MEMBERS_XX_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "MEMBERS_XX_PK" ON "MEMBERS_XX_EMPTY" ("ID")
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index NEW_MEMBER_LOGON_ID_UNIQUE
--------------------------------------------------------

  CREATE UNIQUE INDEX "NEW_MEMBER_LOGON_ID_UNIQUE" ON "MEMBERSHIP_APPLICATIONS" ("LOGON_ID")
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index REF_PROF_MEM_ID
--------------------------------------------------------

  CREATE INDEX "REF_PROF_MEM_ID" ON "REGATTA_PROFILES" ("MEMBER_ID")
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index REG_PART_REG_ID
--------------------------------------------------------

  CREATE INDEX "REG_PART_REG_ID" ON "REGATTA_PARTICIPATION" ("REGATTA_ID")
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index MD_APP_FILE_TYPE_IDX
--------------------------------------------------------

  CREATE INDEX "MD_APP_FILE_TYPE_IDX" ON "MD_APPLICATIONFILES" ("TYPE", "ID")
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index I_EMAIL_QUEUE_TABLE_STATUS
--------------------------------------------------------

  CREATE INDEX "I_EMAIL_QUEUE_TABLE_STATUS" ON "EMAIL_QUEUE_TABLE" ("STATUS")
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index REGATTAS_EXT_DATE_FROM
--------------------------------------------------------

  CREATE INDEX "REGATTAS_EXT_DATE_FROM" ON "REGATTAS_EXT" ("DATE_FROM")
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index REG_PART_MEM_ID
--------------------------------------------------------

  CREATE INDEX "REG_PART_MEM_ID" ON "REGATTA_PARTICIPATION" ("MEMBER_ID")
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index MD_STATE_TYPE__ID
--------------------------------------------------------

  CREATE INDEX "MD_STATE_TYPE__ID" ON "MD_APPLICATIONFILES" ("STATE", "TYPE", "ID")
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index ADMININDEX1
--------------------------------------------------------

  CREATE UNIQUE INDEX "ADMININDEX1" ON "ADMIN" ("MEMBER_ID")
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS
  TABLESPACE "USERS" ;

--------------------------------------------------------
--------------------------------------------------------
-- DDL for Triggers
--------------------------------------------------------
--------------------------------------------------------

--------------------------------------------------------
--  DDL for Trigger FEESRECORDS_EDITED
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "FEESRECORDS_EDITED"
AFTER DELETE OR INSERT OR UPDATE ON FEESRECORDS
FOR EACH ROW
DECLARE
    D DATE;
    R_ID NUMBER;
BEGIN
    D := SYSDATE;

    IF INSERTING OR UPDATING THEN
        R_ID := :NEW.PAYMENTID;
    ELSE
        R_ID := :OLD.PAYMENTID;
    END IF;

    INSERT INTO DB_EDITS (TABLE_NAME, ROW_ID, TIME_STAMP) VALUES('FEESRECORDS', R_ID, D);

END;
/
ALTER TRIGGER "FEESRECORDS_EDITED" ENABLE;
--------------------------------------------------------
--  DDL for Trigger FEESRECORDS_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "FEESRECORDS_TRG" before insert on feesrecords
for each row
begin
  if :new.paymentid is null then
     select feesrecords_id.nextval into :new.paymentid from dual;
  end if;
  if :new.entered_date is null then
     select sysdate into :new.entered_date from dual;
  end if;
end;

/
ALTER TRIGGER "FEESRECORDS_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger HOLIDAYS_EDITED
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "HOLIDAYS_EDITED"
AFTER DELETE OR INSERT OR UPDATE ON HOLIDAYS
FOR EACH ROW
DECLARE
    D DATE;
    R_ID NUMBER;
BEGIN
    D := SYSDATE;

    IF INSERTING OR UPDATING THEN
        R_ID := :NEW.ID;
    ELSE
        R_ID := :OLD.ID;
    END IF;

    INSERT INTO DB_EDITS (TABLE_NAME, ROW_ID, TIME_STAMP) VALUES('HOLIDAYS', R_ID, D);

END;
/
ALTER TRIGGER "HOLIDAYS_EDITED" ENABLE;
--------------------------------------------------------
--  DDL for Trigger HOLIDAYS_ID_TRIGGER
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "HOLIDAYS_ID_TRIGGER"
BEFORE INSERT ON HOLIDAYS
for each row
begin
  if :new.ID is null then
     select HOLIDAYS_ID.nextval into :new.id from dual;
  end if;
end;
/
ALTER TRIGGER "HOLIDAYS_ID_TRIGGER" ENABLE;
--------------------------------------------------------
--  DDL for Trigger LICENCES_EDITED
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "LICENCES_EDITED"
AFTER DELETE OR INSERT OR UPDATE ON LICENCES
FOR EACH ROW
DECLARE
    D DATE;
    R_ID NUMBER;
BEGIN
    D := SYSDATE;

    IF INSERTING OR UPDATING THEN
        R_ID := :NEW.MEMBER_ID;
    ELSE
        R_ID := :OLD.MEMBER_ID;
    END IF;

    INSERT INTO DB_EDITS (TABLE_NAME, ROW_ID, TIME_STAMP) VALUES('LICENCES', R_ID, D);

END;
/
ALTER TRIGGER "LICENCES_EDITED" ENABLE;
--------------------------------------------------------
--  DDL for Trigger RESERVATIONS_EDITED
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "RESERVATIONS_EDITED"
AFTER DELETE OR INSERT OR UPDATE ON RESERVATIONS
FOR EACH ROW
DECLARE
    D DATE;
    R_ID NUMBER;
BEGIN
    D := SYSDATE;

    IF INSERTING OR UPDATING THEN
        R_ID := :NEW.RES_ID;
    ELSE
        R_ID := :OLD.RES_ID;
    END IF;

    INSERT INTO DB_EDITS (TABLE_NAME, ROW_ID, TIME_STAMP) VALUES('RESERVATIONS', R_ID, D);

END;
/
ALTER TRIGGER "RESERVATIONS_EDITED" ENABLE;
--------------------------------------------------------
--  DDL for Trigger STATUS_EDITED
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "STATUS_EDITED"
AFTER DELETE OR INSERT OR UPDATE ON STATUS
FOR EACH ROW
DECLARE
    D DATE;
    R_ID NUMBER;
BEGIN
    D := SYSDATE;

    IF INSERTING OR UPDATING THEN
        R_ID := :NEW.STAT_ID;
    ELSE
        R_ID := :OLD.STAT_ID;
    END IF;

    INSERT INTO DB_EDITS (TABLE_NAME, ROW_ID, TIME_STAMP) VALUES('STATUS', R_ID, D);

END;
/
ALTER TRIGGER "STATUS_EDITED" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_IMPORTANT_VALUES
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "TRG_IMPORTANT_VALUES"
  before INSERT OR UPDATE ON important_values
  FOR EACH ROW
BEGIN
		select sysdate() into :new.last_modified  from dual;
END;

/
ALTER TRIGGER "TRG_IMPORTANT_VALUES" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_MEMBERSHIP_APPS_LU
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "TRG_MEMBERSHIP_APPS_LU" BEFORE INSERT OR UPDATE ON membership_applications for each row BEGIN
  IF INSERTING THEN
    :NEW.last_updated_date:=sysdate;
  ELSIF UPDATING THEN
    :NEW.last_updated_date:=sysdate;
  END IF;
  if (:OLD.LOGON_PASS2 is null and :NEW.LOGON_PASS2 is not null) or (:NEW.LOGON_PASS2 <> :OLD.LOGON_PASS2) then
     :NEW.LAST_CHANGED:=sysdate;
  end if;
END;

/
ALTER TRIGGER "TRG_MEMBERSHIP_APPS_LU" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_MEMBERS_LAST_UPDATED
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "TRG_MEMBERS_LAST_UPDATED"
BEFORE INSERT OR UPDATE ON members
for each row
DECLARE
  D DATE;
BEGIN
  D := SYSDATE;
  IF INSERTING THEN
    :NEW.last_updated_date:=D;
  ELSIF UPDATING THEN
    :NEW.last_updated_date:=D;
    insert into members_data_history (
      "ID",
      "NAME",
      "FIRSTNAME",
      "BIRTHDAY",
      "NATIONALITY",
      "MEMBERSHIP",
      "TEMP_MEMB",
      "LANG1",
      "LANG2",
      "CATEGORY",
      "WORK_ADDRESS1",
      "WORK_ADDRESS2",
      "WORK_TOWNCODE",
      "WORK_TOWN",
      "WORK_STATE",
      "WORK_PHONE",
      "E_MAIL",
      "HOME_ADDR",
      "HOME_TOWNCODE",
      "HOME_TOWN",
      "HOME_STATE",
      "HOME_PHONE",
      "MAIL_PREFERENCE",
      "FAVOURITE_MAILING_POST",
      "MEMBER_ENTRANCE",
      "CELL_PHONE",
      "GENDER",
      "VALID_UNTIL_DATE",
      "VALID_FROM_DATE"
    ) values (
      :OLD."ID",
      :OLD."NAME" ,
      :OLD."FIRSTNAME",
      :OLD."BIRTHDAY",
      :OLD."NATIONALITY",
      :OLD."MEMBERSHIP",
      :OLD."TEMP_MEMB",
      :OLD."LANG1",
      :OLD."LANG2",
      :OLD."CATEGORY",
      :OLD."WORK_ADDRESS1",
      :OLD."WORK_ADDRESS2",
      :OLD."WORK_TOWNCODE",
      :OLD."WORK_TOWN",
      :OLD."WORK_STATE",
      :OLD."WORK_PHONE",
      :OLD."E_MAIL",
      :OLD."HOME_ADDR",
      :OLD."HOME_TOWNCODE",
      :OLD."HOME_TOWN",
      :OLD."HOME_STATE",
      :OLD."HOME_PHONE",
      :OLD."MAIL_PREFERENCE",
      :OLD."FAVOURITE_MAILING_POST",
      :OLD."MEMBER_ENTRANCE",
      :OLD."CELL_PHONE",
      :OLD."GENDER",
      D,
      :OLD."LAST_UPDATED_DATE"
    );
  END IF;
END;

/
ALTER TRIGGER "TRG_MEMBERS_LAST_UPDATED" ENABLE;

--------------------------------------------------------
--------------------------------------------------------
-- DDL for Procedures
--------------------------------------------------------
--------------------------------------------------------

--------------------------------------------------------
--  DDL for Trigger WEB_LOGON_EDITED
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "WEB_LOGON_EDITED"
AFTER INSERT OR UPDATE OF LOGON_ID,LOGON_PASS2 ON WEB_LOGON
FOR EACH ROW
DECLARE
    D DATE;
    R_ID NUMBER;
BEGIN
    D := SYSDATE;

    R_ID := :NEW.MEMBER_ID;

    INSERT INTO DB_EDITS (TABLE_NAME, ROW_ID, TIME_STAMP) VALUES('WEB_LOGON', R_ID, D);

END;
/
ALTER TRIGGER "WEB_LOGON_EDITED" ENABLE;
--------------------------------------------------------
--  DDL for Procedure CREATE_MEMBER
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CREATE_MEMBER"
( new_member_id IN NUMBER
) AS

y number;
BEGIN

  select extract(year from sysdate) into y from dual;

  begin
    insert into members (
      ID,
      NAME,
      FIRSTNAME,
      BIRTHDAY,
      NATIONALITY,
      MEMBERSHIP,
      TEMP_MEMB,
      LANG1,
      LANG2,
      CATEGORY,
      WORK_ADDRESS1,
      WORK_ADDRESS2,
      WORK_TOWNCODE,
      WORK_TOWN,
      WORK_STATE,
      WORK_PHONE,
      E_MAIL,
      HOME_ADDR,
      HOME_TOWNCODE,
      HOME_TOWN,
      HOME_STATE,
      HOME_PHONE,
      MAIL_PREFERENCE,
      FAVOURITE_MAILING_POST,
      MEMBER_ENTRANCE,
      CELL_PHONE,
      last_updated_date,
      gender,
      valid_from_date,
      valid_until_date,
      interest_in_fibreglass,
      interest_in_woodwork,
      interest_in_ropework,
      interest_in_paintwork,
      interest_in_motors,
      interest_in_organising_social,
      interest_in_organising_regattas,
      interest_in_teaching_dinghies,
      interest_in_teaching_cats,
      interest_in_teaching_keelboats,
      interest_in_teaching_motorboats,
      interest_in_surveillance,
      interest_in_towing_on_land,
      special_talents
    ) select
      ID,
      upper(NAME),
      FIRSTNAME,
      BIRTHDAY,
      NATIONALITY,
      MEMBERSHIP,
      TEMP_MEMB,
      LANG1,
      LANG2,
      CATEGORY,
      WORK_ADDRESS1,
      WORK_ADDRESS2,
      WORK_TOWNCODE,
      WORK_TOWN,
      WORK_STATE,
      WORK_PHONE,
      E_MAIL,
      HOME_ADDR,
      HOME_TOWNCODE,
      HOME_TOWN,
      HOME_STATE,
      HOME_PHONE,
      MAIL_PREFERENCE,
      FAVOURITE_MAILING_POST,
      to_char(y),
      CELL_PHONE,
      last_updated_date,
      gender,
      valid_from_date,
      valid_until_date,
      interest_in_fibreglass,
      interest_in_woodwork,
      interest_in_ropework,
      interest_in_paintwork,
      interest_in_motors,
      interest_in_organising_social,
      interest_in_organising_regattas,
      interest_in_teaching_dinghies,
      interest_in_teaching_cats,
      interest_in_teaching_keelboats,
      interest_in_teaching_motorboats,
      interest_in_surveillance,
      interest_in_towing_on_land,
      special_talents
    from membership_applications where id = new_member_id;

    insert into entrance_feesrecords (member_id, year_f) select new_member_id, y from membership_applications where id = new_member_id and upper(membership_applications.membership)in ('AJ','AS');

    insert into web_logon
    (
    MEMBER_ID,
    LOGON_ID,
    LOGON_PASS2
    ) select
    id,
    LOGON_ID,
    LOGON_PASS2
    from membership_applications where id = new_member_id;

    delete
    from membership_applications where id = new_member_id;

    commit;
  exception
  when others then
    rollback;
    raise;
  end;

END CREATE_MEMBER;

/
--------------------------------------------------------
--  DDL for Procedure FREEZE_LICENCES
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "FREEZE_LICENCES"
as
begin
  update licences l set l.status=0
  where member_id not in
        (select member_id from feesrecords where year_f between extract(year from sysdate)-4 and extract(year from sysdate)-1)
        and l.status=1;
   commit;
end;

/

--------------------------------------------------------
--------------------------------------------------------
-- DDL for Packages
--------------------------------------------------------
--------------------------------------------------------

--------------------------------------------------------
--  DDL for Package BA5KEY
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "BA5KEY" IS

  PROCEDURE startup;
  PROCEDURE BA5distribution;
	FUNCTION authorize RETURN BOOLEAN;

END;

/
--------------------------------------------------------
--  DDL for Package LISTS
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "LISTS" IS


  PROCEDURE startup;
  FUNCTION authorize RETURN boolean;
  PROCEDURE ShowLicences;
/*  PROCEDURE ShowMembers(thisyear NUMBER); */
/*  PROCEDURE ShowMembersID(thisyear NUMBER); */
  PROCEDURE ShowLicenceMembers (QueredLicence IN varchar2);
/*  PROCEDURE SUTestStatus;*/
/*  PROCEDURE MembershipList (query_year IN VARCHAR2);*/
/*  PROCEDURE MembershipListForMailinglist(query_year IN VARCHAR2);*/
/*  PROCEDURE ShowLicenceThisYears (thisyear NUMBER);*/
/*  PROCEDURE CourseFeesRegistration (thisyear NUMBER);*/
/*	PROCEDURE NewMembers(thisyear NUMBER);*/
END;

/
--------------------------------------------------------
--  DDL for Package LOGINFORM
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "LOGINFORM" IS

	PROCEDURE CheckLogin (loginid IN admin.admin_login%TYPE, pwd IN admin.admin_password%TYPE, submit IN VARCHAR2);

	PROCEDURE FrontPage;

END;

/
--------------------------------------------------------
--  DDL for Package REGISTERLICENCES
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "REGISTERLICENCES" IS

	PROCEDURE CheckLicence (id_member IN members.id%TYPE,T_licence IN VARCHAR2,T_DD IN VARCHAR2,T_Mon IN VARCHAR2,T_Year IN licences.lyear%TYPE,examinator IN VARCHAR2);
	PROCEDURE MemberSearch (sname IN members.name%TYPE, sfirstname IN members.firstname%TYPE);
	PROCEDURE SelectedMemberFile (id_member IN NUMBER);
  PROCEDURE LicenceRegistrationForm;

END;

/
--------------------------------------------------------
--  DDL for Package REGISTERPAYMENT
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "REGISTERPAYMENT" IS

/* last update 24.Jan.2008 */

  PROCEDURE startup ;

  FUNCTION authorize RETURN BOOLEAN;

  PROCEDURE RegPayFees;

  PROCEDURE AnnualFeesForm;

  PROCEDURE ListALLPayement;

  PROCEDURE RegisterFeesForm ( queryform IN VARCHAR2);

  PROCEDURE MemberSearch
  	(sname IN members.name%TYPE, sfirstname IN members.firstname%TYPE);

  PROCEDURE FeePayementSearch
  	(sname IN members.name%TYPE, sfirstname IN members.firstname%TYPE);

  PROCEDURE CoursePayementSearch
  	(sname IN members.name%TYPE, sfirstname IN members.firstname%TYPE);

  PROCEDURE AllRegisterdPayementSearch
  	(sname IN members.name%TYPE, sfirstname IN members.firstname%TYPE);

  PROCEDURE SelectedMemberFile
		(id_member IN NUMBER);

	PROCEDURE CourseSelectedMemberFile
		(id_member IN NUMBER);

	PROCEDURE CheckPayementRecord
		( P_TYPE IN VARCHAR2,
			m_membership IN fees.description%TYPE,
			TMP_FROM VARCHAR2,
			TMP_TO VARCHAR2,
			P_YEAR IN NUMBER,
			P_FEE IN NUMBER,
			P_COURSE IN VARCHAR2,
			P_FEECOURSE IN NUMBER,
			P_DD IN VARCHAR2,
		  P_MM IN VARCHAR2,
		  P_MODE IN VARCHAR2,
		  id_member IN members.id%TYPE);

	PROCEDURE NewEntry;
	PROCEDURE ShowPayements(id_member IN NUMBER, P_year IN NUMBER, P_fee IN NUMBER, P_course IN VARCHAR2, P_feecourse IN NUMBER);

	PROCEDURE ListNewMembers;


END;

/
--------------------------------------------------------
--  DDL for Package RENEWALFORMS
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "RENEWALFORMS" IS

  FUNCTION authorize RETURN BOOLEAN;

  PROCEDURE startup;

  PROCEDURE Renewal(mid NUMBER);

  PROCEDURE RenewAllMembers;

  PROCEDURE NewMemberFile(mid NUMBER);

  PROCEDURE RenewScript;

END;

/
--------------------------------------------------------
--  DDL for Package STATISTICS
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "STATISTICS" IS
  FUNCTION authorize RETURN BOOLEAN;

  PROCEDURE startup;
  FUNCTION LicenceCounter (myid NUMBER) RETURN NUMBER;
  PROCEDURE MembershipList (query_year IN VARCHAR2);
  PROCEDURE NewMembersList (query_year IN VARCHAR2);
  PROCEDURE MembershipNameList (infomembership IN VARCHAR2, query_year IN VARCHAR2, infoyear IN VARCHAR2);
  PROCEDURE NLicence (lic IN NUMBER, query_year IN VARCHAR2);
  PROCEDURE XXLicence (lic IN NUMBER, query_year IN VARCHAR2);
  PROCEDURE NatNameList (natid IN VARCHAR2, query_year IN VARCHAR2);
  PROCEDURE CategoryNameList (infocategory IN VARCHAR2, query_year IN VARCHAR2, infoyear IN VARCHAR2);
  PROCEDURE statistics_members (query_year IN VARCHAR2);
  PROCEDURE ShowLicenceThisYears (thisyear NUMBER);
END;

/
--------------------------------------------------------
--  DDL for Package Body BA5KEY
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "BA5KEY" IS

/*-------------------------------------------------
---------------------------------------------------*/

  FUNCTION myfonts (ff VARCHAR2)
  RETURN VARCHAR2
  IS
  BEGIN
  	IF ff LIKE 'ComicSansMS' THEN RETURN '<span style="font-family:&quot;Comic Sans MS&quot;">'; END IF;
  	IF ff LIKE 'FF0000' THEN RETURN '<FONT COLOR="#FF0000">'; END IF;
  	IF ff LIKE 'size-1' THEN RETURN '<FONT SIZE=-1>'; END IF;
  END;

/*-------------------------------------------------
---------------------------------------------------*/

  PROCEDURE header (v_title in VARCHAR2)
	AS
	BEGIN
 		htp.HtmlOpen;
 		htp.HeadOpen;
 		htp.Title(v_title);
 		htp.meta(null,'Author','Elena Gianolio');
 		htp.meta(null,'Description','YCC');
 		htp.HeadClose;
 		htp.BodyOpen(null,'TEXT="#000000" bgcolor="silver" link="#0000FF" vlink="#000090" alink="#00BB00" ');
 		htp.tableOpen('BORDER=0',null,null,null,'COLS=2 WIDTH="100%" NOSAVE');
 		htp.TableRowOpen;
 		htp.print('<TD WIDTH="10" NOSAVE><img SRC="http://cern.ch/club-yachting/ycclogo.gif" height=200 width=191</TD>');
 		htp.TableData(htf.header(1,htf.center(myfonts('ComicSansMS')||myfonts('FF0000')||v_title||'</FONT>')));
 		htp.TableRowClose;
 		htp.tableClose;
 		htp.br;
 		htp.print('&nbsp');
 		htp.br;
 		htp.print('&nbsp');
 		htp.br;
 		htp.print('&nbsp');
 		htp.br;
 		htp.print('&nbsp');
	END header;

/*-------------------------------------------------
---------------------------------------------------*/

	PROCEDURE footer
	IS
	BEGIN
 		htp.hr;
 		htp.br;
 		htp.print(myfonts('ComicSansMS')||myfonts('000000')||myfonts('size-1'));
 		htp.Address('Comments ? Contact '||
 		htf.mailto('Elena.Gianolio@cern.ch','YCC master'));
 		htp.print('</FONT>');
		htp.BodyClose;
 		htp.HtmlClose;
	END footer;

/*-------------------------------------------------
---------------------------------------------------*/

	FUNCTION authorize RETURN BOOLEAN IS
		p_user VARCHAR2(10);
		p_pwd  VARCHAR2(10);
	BEGIN
	 -- Set a login realm
	 owa_sec.set_protection_realm('YCC BA5 Login');
	 p_user := UPPER(owa_sec.get_user_id);
	 p_pwd  := owa_sec.get_password;
 	 -- Set the valid username and password, and return
 	 -- TRUE if the user enters the correct values in his login dialog
 		IF p_user = 'BA5' AND p_pwd = 'ycc' THEN
  		RETURN TRUE;
 		ELSE
  		RETURN FALSE;
 		END IF;
	END;

	PROCEDURE startup IS p_status BOOLEAN;
	BEGIN
	 -- Call the authorize function
		 p_status := authorize;
	 -- Test if autenticatin has been successfull and print out a message.
	 	 IF p_status = TRUE THEN
  		BA5distribution;
  	ELSE
  		NULL;
 		END IF;
	END;

/*-------------------------------------------------
---------------------------------------------------*/


  PROCEDURE BA5distribution
  IS
  	CURSOR curs IS
  		SELECT * FROM BA5;

  	CURSOR kcurs IS
  		SELECT * FROM BA5assign
      ORDER BY keyid;

  	CURSOR mcurs IS
  		SELECT id, name, firstname
  		FROM members;

  	n BA5.id%TYPE;
  	mname members.name%TYPE;
  	mfirstname members.firstname%TYPE;
  	memail members.e_mail%TYPE;
  	BA5mailing_list VARCHAR2(600);
    kname VARCHAR2(20);
    kprefix VARCHAR2(20);

 	 BEGIN

  	header('BA5 Key distribution');

  	htp.TableOpen('WIDTH="100%" NOSAVE');
  	htp.TableHeader( );
  	htp.TableHeader('Key ID','left');
  	htp.TableHeader('assigned to','left');
  	htp.TableHeader('assigned when','left');
  	htp.TableHeader('last verification','left');
  	htp.TableHeader('comments','left');
  	BA5mailing_list := NULL;

 /* 	FOR rec IN curs LOOP
  		htp.TableRowOpen;
  		htp.TableData(rec.id);
  		htp.TableData(rec.prefix ||' '||rec.name);
  		FOR krec IN kcurs LOOP
  			IF krec.keyid = rec.id AND krec.return_date IS NULL THEN
  				SELECT name,firstname,e_mail
  				INTO mname,mfirstname,memail
  				FROM members
  				WHERE id = krec.member_id;
  				htp.TableData(htf.mailto (memail,mfirstname ||' '||mname));
  				htp.TableData(krec.assigned_date);
  				htp.TableData(krec.last_verif);
  				htp.TableData(krec.comments);
  				BA5mailing_list := CONCAT(BA5mailing_list, '<BR> '||memail);
  			END IF;
  		END LOOP;
  		htp.TableRowClose;
  	END LOOP;
    */

    FOR krec IN kcurs LOOP
      IF krec.return_date IS NULL THEN
        SELECT name,firstname,e_mail
  				INTO mname,mfirstname,memail
  				FROM members
  				WHERE id = krec.member_id;
        SELECT prefix, name
          INTO kprefix, kname
          FROM BA5
          WHERE id=krec.keyid;
        htp.TableRowOpen;
        htp.TableData(krec.keyid);
        htp.TableData(kprefix ||' '||kname);
        htp.TableData(htf.mailto (memail,mfirstname ||' '||mname));
        htp.TableData(krec.assigned_date);
        htp.TableData(krec.last_verif);
        htp.TableData(krec.comments);
        BA5mailing_list := CONCAT(BA5mailing_list, '<BR> '||memail);
      END IF;
    END LOOP;
  		htp.TableRowClose;

  	htp.TableClose;

  	htp.header(2, 'Mailing list BA5-key holders');
  	htp.print(BA5mailing_list);



  END BA5distribution;

END;

/
--------------------------------------------------------
--  DDL for Package Body LISTS
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "LISTS" IS

/***********************
 local header procedure
***********************/
   PROCEDURE header (v_title in VARCHAR2)
   AS
   BEGIN
		 htp.HtmlOpen;
		 htp.HeadOpen;
		 htp.Title(v_title);
		 htp.meta(null,'Author','Elena Gianolio');
		 htp.meta(null,'Description','YCC');
		 htp.HeadClose;
		 htp.BodyOpen(null,'TEXT="#000000" bgcolor="silver" link="#0000FF" vlink="#000090" alink="#00BB00" ');
		 htp.tableOpen('BORDER=0',null,null,null,'COLS=2 WIDTH="100%" NOSAVE');
		 htp.TableRowOpen;
	   htp.print('<TD WIDTH="10" NOSAVE><img SRC="http://wwwth.cern.ch/ycc/ycclogo.gif" height=200 width=191</TD>');
	   htp.TableData('<H1><B><span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#FF0000"><center>'||v_title||'</center></FONT></B></H1>');
	   htp.TableRowClose;
	   htp.tableClose;
	   htp.br;
	   htp.print('&nbsp');
	   htp.br;
	   htp.print('&nbsp');
	   htp.br;
	   htp.print('&nbsp');
	   htp.br;
	   htp.print('&nbsp');
		 htp.BodyOpen;
   END header;


/***********************
 local footer procedure
***********************/
   PROCEDURE footer
   AS
   BEGIN
	 htp.hr;
	 htp.hr;
	 htp.print('<span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#000000"><FONT SIZE=-1>');
	 htp.Address('Comments ? Contact '||
	 htf.Anchor('mailto:Elena.Gianolio@cern.ch','YCC master'));
	 htp.print('</FONT>');
	 htp.BodyClose;
	 htp.HtmlClose;
   END footer;



/************************************************************************
  Translation of membership in English/French based on table membership
************************************************************************/

   FUNCTION Membership (membership_id IN VARCHAR2, lang IN VARCHAR2)
   RETURN varchar2
   IS
	ans varchar2(10) :=null;
   BEGIN
	IF lang = 'E' THEN
		SELECT E_desc
		INTO ans
		FROM membership
		WHERE membership.mb_name = membership_id;
	ELSE
		SELECT F_desc
		INTO ans
		FROM membership
		WHERE membership.mb_name = membership_id;
	END IF;
	RETURN ans;
   END Membership;


/************************************************************************
  Translation of Licence_ID
************************************************************************/

  FUNCTION Lic_id (m_lic IN infolicences.nlicence%TYPE ) RETURN number
	IS
  	v_lic number;
	BEGIN
  	SELECT infoid
  	INTO v_lic
  	FROM infolicences
 	 	WHERE nlicence=m_lic;
 	 	RETURN (v_lic);
	END Lic_id;




/*************************************************************************
 Procedure for web pages of all members protected by password ycc/micmac
*************************************************************************/


   PROCEDURE ShowMembers (thisyear NUMBER)
   AS
		v varchar2(23);
	 	a varchar2(2);
		counter number :=0;
	 	CURSOR m_curs IS
	     		SELECT DISTINCT id, name, firstname, work_phone, home_phone, e_mail, member_entrance
	     		FROM members, feesrecords
	     		WHERE id=member_id and year_f = thisyear
	     		UNION
	     		SELECT DISTINCT id, name, firstname, work_phone, home_phone, e_mail, member_entrance
	     		FROM members
	     		WHERE membership ='H'
	     		ORDER BY name;
	 	CURSOR l_curs IS
	     		SELECT licence_id, member_id
	     		FROM members, licences
	     		WHERE id=member_id;

   BEGIN
     	header('YCC Member List <BR> year '||thisyear);
     	htp.TableOpen('border');
     	htp.centerOpen;
     	htp.header(1,'sorted by Family Name');
     	/*htp.print('Last update '|| TO_CHAR(sysdate, 'DD Mon YY'));*/
     	/*htp.print('Update to 01 Jan 2002');*/
     	htp.centerClose;
     	htp.TableRowOpen;
			htp.TableHeader('Name');
 			htp.TableHeader('FirstName');
     	htp.TableHeader('Work Phone');
     	htp.TableHeader('Home Phone');
     	htp.TableHeader('E_mail');
     	htp.TableHeader('Licences');
     	htp.TableHeader('Member Entrance');
     	htp.TableRowClose;
     	FOR m_rec IN m_curs LOOP
					counter := counter +1;
        	htp.TableRowOpen;
        	htp.TableData(m_rec.name);
        	htp.TableData(m_rec.firstname);
        	htp.TableData(m_rec.work_phone);
        	htp.TableData(m_rec.home_phone);
        	htp.TableData(htf.anchor('mailto:'||m_rec.e_mail, m_rec.e_mail));
        	v := NULL;
        	FOR l_rec in l_curs LOOP
               		IF l_rec.member_id = m_rec.id THEN
               	  		SELECT nlicence
               	  		INTO a
               	  		FROM infolicences
               	  		WHERE infoid =l_rec.licence_id;
                  		v := v || a || ' ';
               		END IF;
        	END LOOP;
        	htp.TableData(v);
/*        IF m_rec.member_entrance = TO_CHAR(sysdate, 'YYYY') THEN
        		htp.TableData('New MEMBER');
        	ELSE*/
        	htp.TableData(m_rec.member_entrance);
/*        END IF;*/
        	htp.TableRowClose;
     	END LOOP;
     	htp.TableClose;
	htp.header(3,'Total Number of Members : '||TO_CHAR(counter));
     	footer;

   END ShowMembers;



/**************************************************
   Procedure for administrative use of all members
   with ID
   procedure is protected by password ycc/micmac
**************************************************/


   PROCEDURE ShowMembersID (thisyear NUMBER)
   AS
	v varchar2(23);
 	a varchar2(2);
	counter number :=0;
 	CURSOR m_curs IS
     		SELECT DISTINCT id, name, firstname, work_phone, home_phone, e_mail
     		FROM members, feesrecords
     		WHERE id=member_id and year_f = thisyear
     		UNION
     		SELECT DISTINCT id, name, firstname, work_phone, home_phone, e_mail
     		FROM members
     		WHERE membership ='H'
     		ORDER BY name;
 	CURSOR l_curs IS
     		SELECT licence_id, member_id
     		FROM members, licences
     		WHERE id=member_id;

   BEGIN
     	header('YCC Member List with ID <BR> year '||thisyear);
     	htp.TableOpen('border');
     	htp.centerOpen;
     	htp.header(1,'sorted by Family Name');
     	/*htp.print('Last update '|| TO_CHAR(sysdate, 'DD Mon YY'));*/
     	/*htp.print('Update to 01 Jan 2002');*/
     	htp.centerClose;
     	htp.TableRowOpen;
     	htp.TableHeader('ID');
			htp.TableHeader('Name');
 			htp.TableHeader('FirstName');
     	htp.TableHeader('Work Phone');
     	htp.TableHeader('Home Phone');
     	htp.TableHeader('E_mail');
     	htp.TableHeader('Licences');
     	htp.TableRowClose;
     	FOR m_rec IN m_curs LOOP
					counter := counter +1;
        	htp.TableRowOpen;
        	htp.TableData(m_rec.id);
        	htp.TableData(m_rec.name);
        	htp.TableData(m_rec.firstname);
        	htp.TableData(m_rec.work_phone);
        	htp.TableData(m_rec.home_phone);
        	htp.TableData(htf.anchor('mailto:'||m_rec.e_mail, m_rec.e_mail));
        	v := NULL;
        	FOR l_rec in l_curs LOOP
               		IF l_rec.member_id = m_rec.id THEN
               	  		SELECT nlicence
               	  		INTO a
               	  		FROM infolicences
               	  		WHERE infoid =l_rec.licence_id;
                  		v := v || a || ' ';
               		END IF;
        	END LOOP;
        	htp.TableData(v);
        	htp.TableRowClose;
     	END LOOP;
     	htp.TableClose;
			htp.header(3,'Total Number of Members : '||TO_CHAR(counter));
     	footer;

   END ShowMembersID;


/*************************************************************************
 List of owners of a specific licence
 (show members of previous year until april, then members of current year)
**************************************************************************/

  PROCEDURE ShowLicenceMembers (QueredLicence IN varchar2)
  IS
		counter number := 0;
		countemail number := 0;
		countnoemail number := 0;
	  lic number := Lic_id(QueredLicence);
	  query_year number(4);

		CURSOR curs IS
	  	SELECT name, firstname, members.membership, e_mail, lyear
	  	FROM members, licences, feesrecords
	  	WHERE id=licences.member_id and licence_id = lic and id=feesrecords.member_id and year_f = query_year
	  	UNION
	  	SELECT name, firstname, members.membership, e_mail, lyear
	  	FROM members, licences
	  	WHERE id=licences.member_id and licence_id = lic and membership ='H'
/*	  	and	id IN (
	  			SELECT feesrecords.member_id
	  			FROM feesrecords
	  			WHERE	year_f=TO_NUMBER(TO_CHAR(sysdate,'YYYY'))
	  			)*/
	  	ORDER BY name;

  BEGIN

  	IF TO_NUMBER(TO_CHAR(sysdate,'MM')) < '4' THEN
  		query_year := TO_NUMBER(TO_CHAR(sysdate,'YYYY')) -1;
  	ELSE
  		query_year := TO_NUMBER(TO_CHAR(sysdate,'YYYY'));
  	END IF;

		header ('YCC - member owner licence '|| QueredLicence );
		htp.header(1, QueredLicence || ' Licence owners list');
		htp.header(3, '(Member of previous year until April, then current year)');
		htp.Tableopen('border');
		htp.TableRowOpen;
		htp.TableHeader('Name');
		htp.TableHeader('Firstname');
		htp.TableHeader('MemberShip');
		htp.TableHeader('E_mail');
		htp.TableHeader('Licence Year');
		htp.TableRowClose;
		FOR rec IN curs LOOP
			counter := counter +1;
		 	htp.TableRowOpen;
		  htp.tableData(rec.name);
		 	htp.TableData(rec.firstname);
		 	htp.TableData(rec.membership);
		 	htp.TableData(rec.e_mail);
		 	htp.TableData(rec.lyear);
		 	htp.TableRowClose;
		END LOOP;
		htp.TableClose;
		htp.header(3,'Total licence '||QueredLicence||' owned: '||TO_CHAR(counter));
		htp.header(3,'Mailing list (to be cut&paste) :');
		FOR rec IN curs LOOP
			IF rec.e_mail LIKE '%@%' THEN
			 countemail := countemail +1;
			 htp.print(rec.name || ' ' || rec.firstname || ' &lt;' || rec.e_mail || '&gt; ; ');
			 htp.br;
			END IF;
		END LOOP;
		htp.header(4,'Number Email addresses '||TO_CHAR(countemail));
		htp.header(3,'Members with no email  (to be contacted by phone or letter) :');
		FOR rec IN curs LOOP
			IF rec.e_mail LIKE '%@%'  THEN
				htp.print();
			ELSE
			 countnoemail := countnoemail +1;
			 htp.print(rec.name || ' ' || rec.firstname ||'; ' );
			END IF;
		END LOOP;
		htp.header(4,'Number of NO Email addresses '||TO_CHAR(countnoemail));

		footer;
  END ShowLicenceMembers;



/***************************************
 List of Text Status for the SU licence
****************************************/

   PROCEDURE SUTestStatus
   IS
	CURSOR curs IS
	   SELECT id,name,firstname,lang1,members.membership,e_mail,home_state,member_id,theory,tcomments,practical,pcomments
	   FROM members,sutest
	   WHERE id=sutest.member_id
	   ORDER BY name;

	CURSOR su_curs IS
  	  SELECT member_id, licence_id, lyear
  	  FROM licences
  	  WHERE licence_id = 6;

   BEGIN
		header ('YCC - SU test status ');
		htp.header(1, 'SU test status');
		htp.Tableopen('border');
		htp.TableRowOpen;
		htp.TableHeader('ID');
		htp.TableHeader('Name');
		htp.TableHeader('Firstname');
		htp.TableHeader('MemberShip');
		htp.TableHeader('Country Residence');
		htp.TableHeader('E_mail');
		htp.TableHeader('Theory test');
		htp.TableHeader('Comments <br>on<br>Theory test');
		htp.TableHeader('Practical test');
		htp.TableHeader('Comments <br>on<br>Practical test');
		htp.TableHeader('YCC licence year');
		htp.TableRowClose;
		FOR rec IN curs LOOP
			htp.TableRowOpen;
			htp.tableData(rec.id);
			htp.tableData(rec.name);
			htp.TableData(rec.firstname);
			htp.TableData(Membership(rec.membership,rec.lang1));
			htp.TableData(rec.home_state);
			htp.TableData(rec.e_mail);
			htp.TableData(rec.theory);
			htp.TableData(rec.tcomments);
			htp.TableData(rec.practical);
			htp.TableData(rec.pcomments);

			FOR su_rec IN su_curs LOOP
				IF su_rec.member_id = rec.id THEN
					htp.TableData(su_rec.lyear);
				END IF;
			END LOOP;
			htp.TableRowClose;
		END LOOP;
		htp.TableClose;
		footer;
	END SUTestStatus;


/*********************************
  Procedure for membership card
/*********************************/
  PROCEDURE MembershipList (query_year IN VARCHAR2)
  IS
    	CURSOR m_curs IS
  		SELECT id,name, firstname, membership, lang1
  		FROM members, feesrecords
  		WHERE id=member_id AND year_f = query_year
  		UNION
  		SELECT id,name, firstname, membership, lang1
  		FROM members
  		WHERE membership = 'H'
  		ORDER BY name;

  		CURSOR l_curs IS
     	SELECT licence_id, member_id
     	FROM members, licences
     	WHERE id=member_id;

  		counter number := 0;
  		v varchar2(20);
  		a varchar2(2);

  BEGIN
  	header('YCC Statistics year: '||query_year);
  	htp.print('<H1>YCC Members year: '||query_year||'</H1>');
  	htp.TableOpen;
  	htp.TableRowOpen;
  	htp.TableHeader('Member Name');
  	htp.TableHeader('Membership');
  	htp.TableHeader('Licences');
  	htp.TableRowClose;
  	FOR m_rec IN m_curs LOOP
  		counter := counter + 1;
  		htp.TableRowOpen;
  		htp.TableData(m_rec.name || ' ' || m_rec.firstname);
  		htp.TableData(Membership(m_rec.membership,m_rec.lang1));
  		v := NULL;
      FOR l_rec in l_curs LOOP
      	IF l_rec.member_id = m_rec.id THEN
        	SELECT nlicence
        	INTO a
        	FROM infolicences
        	WHERE infoid =l_rec.licence_id;
        	v := v || a || ' ';
      	END IF;
      END LOOP;
      htp.TableData(v);
      htp.TableRowClose;
  	END LOOP;

  	htp.TableClose;
  	htp.header(3,'Total members ; '||TO_CHAR(counter));
  	footer;
   END MembershipList;

/***************************************
  Procedure for membership mailing list
/***************************************/
  PROCEDURE MembershipListForMailinglist (query_year IN VARCHAR2)
  IS
    	CURSOR m_curs IS
  		SELECT name, firstname, e_mail
  		FROM members, feesrecords
  		WHERE id=member_id AND year_f = query_year
  		UNION
     	SELECT name, firstname, e_mail
     	FROM members
     	WHERE membership ='H'
  		ORDER BY name;

  		counter number := 0;
  BEGIN
  	header('YCC Mailing list year: '||query_year);
  	htp.print('<H1>YCC Mailing list, year: '||query_year||'</H1>');
  	htp.br;
  	htp.br;
  	FOR m_rec IN m_curs LOOP
  		IF m_rec.e_mail IS NOT NULL THEN
  			counter := counter + 1;
  			htp.print(m_rec.firstname ||' '||m_rec.name||' &lt;'||m_rec.e_mail||'>');
  			htp.br;
  		END IF;
  	END LOOP;

  	htp.header(3,'Total members : '||TO_CHAR(counter));
  	footer;
   END MembershipListForMailinglist;


/****************************************
 List of who passwed a licence this year
*****************************************/

  PROCEDURE ShowLicenceThisYears (thisyear NUMBER)
  IS
		counter number := 0;
		newmembercounter number :=0;
		SU_lic_info sutest%ROWTYPE;

		CURSOR curs IS
	  	SELECT id,name,firstname,membership,lyear,licence_id,lang1, member_entrance,lcomments
	  	FROM members, licences
	  	WHERE id=licences.member_id and
	  		lyear = thisyear and
	  		id IN (
	  			SELECT feesrecords.member_id
	  			FROM feesrecords
	  			WHERE	year_f=TO_NUMBER(TO_CHAR(sysdate,'YYYY')) OR membership='H'
	  			)
	  	ORDER BY name;

	  CURSOR idlicencecurs IS
	  	SELECT *
	  	FROM infolicences
	  	WHERE infoid <> 10 /* entry for Baracs key */ and
	  				infoid <> 11 /* entry for BA5 key */ and
	  				infoid <> 7  /* entry for Soling */ and
	  				infoid <> 13 /* entry for First Aid */
	  	ORDER BY infoid;


  BEGIN
	header ('YCC - Statistic about '|| thisyear ||' year licences ');
	htp.header(1,'YCC Statistic on Licences : year '|| thisyear);

	FOR idlicencerec IN idlicencecurs LOOP
		FOR rec IN curs LOOP
			IF rec.licence_id = idlicencerec.infoid THEN
				counter := counter +1;
				IF rec.member_entrance = thisyear THEN
					newmembercounter := newmembercounter +1;
					END IF;
				END IF;
		END LOOP;
		htp.header(2,counter ||' '||idlicencerec.nlicence ||' licence ( '||newmembercounter||' of which new members )');
		htp.print (idlicencerec.nlicence);
		IF counter <> 0 THEN
			htp.TableOpen;
  		htp.TableRowOpen;
  		htp.TableHeader('ID');
  		htp.TableHeader('Member');
  		htp.TableHeader('Membership');
  		htp.TableHeader('Member<br>entrance');
  		htp.TableHeader('Licence Comments');
  		htp.TableRowClose;
  		FOR rec IN curs LOOP
				IF rec.licence_id = idlicencerec.infoid THEN
					htp.TableRowOpen;
					htp.TableData(rec.id);
					htp.TableData(rec.name || ' ' || rec.firstname);
					htp.TableData(Membership(rec.membership,rec.lang1));
					htp.TableData(rec.member_entrance);
				/*	IF rec.licence_id = 6 THEN /* test on Su licence
						SELECT *
						INTO SU_lic_info
						FROM sutest
						WHERE sutest.member_id = rec.id;
						htp.TableData(rec.lcomments||'<br>TH date: '||TO_CHAR(SU_lic_info.theory)||'  '||SU_lic_info.tcomments||'<BR>Practical test:'||TO_CHAR(SU_lic_info.practical)||'  '||SU_lic_info.pcomments);
					ELSE
						htp.TableData(rec.lcomments);
					END IF; */
					htp.TableData(rec.lcomments);
					htp.TableRowClose;
				END IF;
  		END LOOP;
  		htp.TableClose;
  	END IF;
		htp.br;
		counter := 0;
		newmembercounter := 0;
	END LOOP;

	footer;
  END ShowLicenceThisYears;

/********************************************************************************************
 List course fees divided by courses
 *******************************************************************************************/


 PROCEDURE CourseFeesRegistration (thisyear NUMBER)
 IS
 	ccount NUMBER(2);

 	CURSOR lcurs IS
 		SELECT ncourse, description
 		FROM infolicences
 		WHERE ncourse IS NOT NULL;

 	CURSOR ccurs IS
		SELECT id,name, firstname, course, paid_date, paid_mode, feecourse
	  FROM feescourses, members
	 	WHERE year_c = thisyear AND member_id = id
	  ORDER BY name;

	CURSOR mcurs IS
		SELECT DISTINCT id
    FROM members, feesrecords
    WHERE id=member_id and year_f = thisyear
    UNION
    SELECT id
    FROM members
    WHERE membership ='H';

 BEGIN
 	header('Courses Fees Registration');

 	FOR lrec IN lcurs LOOP
 		htp.header(2, '<span style="font-family:&quot;Comic Sans MS&quot;">Course '||lrec.description||' Payments Records');
 		ccount := 0;
 		htp.TableOpen('border');
 		htp.TableRowOpen;
 		htp.TableHeader('<span style="font-family:&quot;Comic Sans MS&quot;">Name');
 		htp.TableHeader('<span style="font-family:&quot;Comic Sans MS&quot;">Firstname');
 		htp.TableHeader('<span style="font-family:&quot;Comic Sans MS&quot;">Course Fee');
 		htp.TableHeader('<span style="font-family:&quot;Comic Sans MS&quot;">Date');
 		htp.TableHeader('<span style="font-family:&quot;Comic Sans MS&quot;">Mode');
 		htp.TableHeader('<span style="font-family:&quot;Comic Sans MS&quot;">Membership Fee');
 		htp.TableRowClose;
 		FOR crec IN ccurs LOOP
 			IF crec.course = lrec.ncourse THEN
 				ccount := ccount +1;
 				htp.TableRowOpen;
 				htp.TableData('<span style="font-family:&quot;Comic Sans MS&quot;">'||crec.name);
 				htp.TableData('<span style="font-family:&quot;Comic Sans MS&quot;">'||crec.firstname);
 				htp.TableData('<span style="font-family:&quot;Comic Sans MS&quot;">'||crec.feecourse);
 				htp.TableData('<span style="font-family:&quot;Comic Sans MS&quot;">'||crec.paid_date);
 				htp.TableData('<span style="font-family:&quot;Comic Sans MS&quot;">'||crec.paid_mode);
 				FOR mrec IN mcurs LOOP
 					IF mrec.id = crec.id THEN
 						htp.TableData('<span style="font-family:&quot;Comic Sans MS&quot;">'||'YES');
 					END IF;
 				END LOOP;

 				htp.TableRowClose;
 			END IF;
 		END LOOP;
 		htp.TableClose;
 		htp.br;
 		htp.br;
 		htp.br;
 		htp.print('<span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#FF0000">'||lrec.ncourse ||' Course fees: '|| ccount||'</font>');
 		htp.br;
 		htp.br;
 		htp.hr;
 		htp.br;
 		htp.br;
 	END LOOP;
 	footer;

 END CourseFeesRegistration;


   PROCEDURE NewMembers (thisyear NUMBER)
   AS
		counter number :=0;
		countemail number := 0;
		countnoemail number := 0;
 		CURSOR curs IS
     		SELECT DISTINCT id, name, firstname, work_phone, home_phone, e_mail
     		FROM members, feesrecords
     		WHERE id=member_id and year_f = thisyear and member_entrance = thisyear;


   BEGIN
     	header('YCC New Member '||thisyear);
     	htp.TableOpen('border');
     	htp.centerOpen;
     	htp.header(1,'sorted by Family Name');
     	/*htp.print('Last update '|| TO_CHAR(sysdate, 'DD Mon YY'));*/
     	/*htp.print('Update to 01 Jan 2002');*/
     	htp.centerClose;
     	htp.TableRowOpen;
			htp.TableHeader('Name');
 			htp.TableHeader('FirstName');
     	htp.TableHeader('Work Phone');
     	htp.TableHeader('Home Phone');
     	htp.TableHeader('E_mail');
     	htp.TableRowClose;
     	FOR rec IN curs LOOP
					counter := counter +1;
        	htp.TableRowOpen;
        	htp.TableData(rec.name);
        	htp.TableData(rec.firstname);
        	htp.TableData(rec.work_phone);
        	htp.TableData(rec.home_phone);
        	htp.TableData(htf.anchor('mailto:'||rec.e_mail, rec.e_mail));
        	htp.TableRowClose;
     	END LOOP;
     	htp.TableClose;
			htp.header(3,'Total Number of New Members : '||TO_CHAR(counter));

			htp.header(3,'Mailing list (to be cut&paste) :');
			FOR rec IN curs LOOP
				IF rec.e_mail LIKE '%@%' THEN
			 	countemail := countemail +1;
			 	htp.print(rec.name || ' ' || rec.firstname || ' &lt;' || rec.e_mail || '&gt; ; ');
			 	htp.br;
				END IF;
			END LOOP;
			htp.header(4,'Number Email addresses '||TO_CHAR(countemail));
			htp.header(3,'Members with no email  (to be contacted by phone or letter) :');
			FOR rec IN curs LOOP
				IF rec.e_mail LIKE '%@%'  THEN
					htp.print();
				ELSE
			 	countnoemail := countnoemail +1;
			 	htp.print(rec.name || ' ' || rec.firstname ||'; ' );
				END IF;
			END LOOP;
			htp.header(4,'Number of NO Email addresses '||TO_CHAR(countnoemail));

     	footer;

   END NewMembers;

  PROCEDURE ShowLicences IS
  BEGIN
  	 header('Licences List');
  	 htp.print('Please choose a licences to show the owner of that licences');
  	 htp.br;
  	 htp.print('Owner of licence ');
  	 htp.Anchor('http://oraweb03.cern.ch/ycc/owa/Lists.ShowLicenceMembers?QueredLicence=M','M');

  	footer;
  END ShowLicences;

	FUNCTION authorize
	RETURN BOOLEAN IS
			p_user VARCHAR2(10);
			p_pwd  VARCHAR2(10);
	BEGIN
 		-- Set a login realm
 		owa_sec.set_protection_realm('Register Payment Login');
 		p_user := UPPER(owa_sec.get_user_id);
 		p_pwd  := owa_sec.get_password;
 		-- Set the valid username and password, and return
 		-- TRUE if the user enters the correct values in his login dialog
 		IF p_user = 'LICENCES' AND p_pwd = 'ycc' THEN
  		RETURN TRUE;
 		ELSE
  		RETURN FALSE;
 		END IF;
	END authorize;


	PROCEDURE startup IS
		p_status BOOLEAN;
	BEGIN
	 -- Call the authorize function
	 p_status := authorize;
	 -- Test if autenticatin has been successfull and print out a message.
	 	IF p_status = TRUE THEN
  		ShowLicences;
   	ELSE
  		NULL;
 		END IF;
 	END;



END;

/
--------------------------------------------------------
--  DDL for Package Body LOGIN
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "LOGIN" IS
/* -----------------------------------------------------------------------
Login Frontpage
-------------------------------------------------------------------------*/

	PROCEDURE Registration(request_id IN admin.admin_id%TYPE, auth IN NUMBER)
	IS
	BEGIN
		IF auth = 1 THEN
			IF request_id = 1 THEN RegisterPayement.RegisterPayement.RegisterPayement(auth);
				ELSIF request_id = 2 THEN RegisterLicences.LicenceRegistrationForm(auth);
			END IF;
		ELSE
			htp.print('you are not authorized');
		END IF;
	END Registration;




	PROCEDURE CheckLogin (loginid IN admin.admin_login%TYPE, pwd IN admin.admin_password%TYPE, submit IN VARCHAR2)
	IS
		xuser admin%ROWTYPE;
	BEGIN
			SELECT *
			INTO xuser
			FROM admin
			WHERE admin_login = loginid;

			IF xuser.admin_password = pwd THEN Registration(xuser.admin_id,1);
			ELSE
				htp.print('Wrong password');
			END IF;
	END CheckLogin;



	PROCEDURE FrontPage
	IS
	BEGIN
		header('Register payement');
		htp.print('Login FrontPage');
		htp.formOpen('http://oraweb01.cern.ch/ycc/owa/RegisterPayement.CheckLogin');
		htp.formText('loginid',8,8);
		htp.formPassword('pwd',8,8);
		htp.formSubmit('submit','Login');
		htp.formClose;
	END;



END;

/
--------------------------------------------------------
--  DDL for Package Body LOGINFORM
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "LOGINFORM" IS
/* -----------------------------------------------------------------------
Login Frontpage
-------------------------------------------------------------------------*/

	PROCEDURE CheckLogin (loginid IN admin.admin_login%TYPE, pwd IN admin.admin_password%TYPE, submit IN VARCHAR2)
	IS
		xuser admin%ROWTYPE;
	BEGIN

			SELECT *
			INTO xuser
			FROM admin
			WHERE admin_login = loginid;

			IF xuser.admin_password = pwd THEN
				UPDATE admin
				SET session_authorization = 'ok', session_time = sysdate
				WHERE admin_id = xuser.admin_id;
				IF xuser.admin_login = 'fees' THEN RegisterPayement.RegisterPayement;
				/*ELSIF xuser.admin_login = 'tests' THEN RegisterLicences.LicenceRegistrationForm;*/
				END IF;
			ELSE
				htp.print('Wrong password');
			END IF;

			/* add the logout */
	END CheckLogin;



	PROCEDURE FrontPage
	IS
	BEGIN
		header('Register payement');
		htp.print('Login FrontPage');
		htp.formOpen('http://oraweb01.cern.ch/ycc/owa/LoginForm.CheckLogin');
		htp.formText('loginid',8,8);
		htp.formPassword('pwd',8,8);
		htp.formSubmit('submit','Login');
		htp.formClose;
	END FrontPage;



END;

/
--------------------------------------------------------
--  DDL for Package Body OWA_CUSTOM
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "OWA_CUSTOM" IS



 FUNCTION authorize RETURN BOOLEAN IS

 l_username VARCHAR2(10);

 l_password VARCHAR2(10);

 p_username VARCHAR2(10);

 p_password VARCHAR2(10);

 BEGIN

  owa_sec.set_protection_realm('Custom OWA Test');

  l_username := owa_sec.get_user_id;

  l_password := owa_sec.get_password;

  SELECT UPPER(password)

  INTO p_password

  FROM userlist

  WHERE UPPER(username) = UPPER(l_username);

  IF p_password = UPPER(l_password) THEN

   RETURN TRUE;

  ELSE

   RETURN FALSE;

  END IF;

  EXCEPTION

   WHEN NO_DATA_FOUND THEN

    RETURN FALSE;

 END;

 BEGIN

  owa_sec.set_authorization(OWA_SEC.CUSTOM);

 END;

/
--------------------------------------------------------
--  DDL for Package Body REGISTERLICENCES
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "REGISTERLICENCES" IS


/*-------------------------------------------------
last update 24.Jan.2004 Created by E. Gianolio
---------------------------------------------------*/

  PROCEDURE header
		(v_title in VARCHAR2)
	AS
	BEGIN
 		htp.HtmlOpen;
 		htp.HeadOpen;
 		htp.Title(v_title);
 		htp.meta(null,'Author','Elena Gianolio');
 		htp.meta(null,'Description','YCC');
 		htp.HeadClose;
 		htp.BodyOpen(null,'TEXT="#000000" bgcolor="silver" link="#0000FF" vlink="#000090" alink="#00BB00" ');
 		htp.tableOpen('BORDER=0',null,null,null,'COLS=2 WIDTH="100%" NOSAVE');
 		htp.TableRowOpen;
 		htp.print('<TD WIDTH="10" NOSAVE><img SRC="http://wwwth.cern.ch/ycc/ycclogo.gif" height=200 width=191</TD>');
 		htp.TableData('<H1><B><span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#FF0000"><center>'||v_title||'</center></FONT></B></H1>');
 		htp.TableRowClose;
 		htp.tableClose;
 		htp.br;
 		htp.print('&nbsp');
 		htp.br;
 		htp.print('&nbsp');
 		htp.br;
 		htp.print('&nbsp');
 		htp.br;
 		htp.print('&nbsp');
	END header;

/*-------------------------------------------------
---------------------------------------------------*/

	PROCEDURE footer
	IS
	BEGIN
 		htp.hr;
 		htp.br;
 		htp.print('<span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#000000"><FONT SIZE=-1>');
 		htp.Address('Comments ? Contact '||
 		htf.mailto('Elena.Gianolio@cern.ch','YCC master'));
 		htp.print('</FONT>');
		htp.BodyClose;
 		htp.HtmlClose;
	END footer;

/*----------------------------------------------------
------------------------------------------------------*/
	FUNCTION licenceref (lic_name infolicences.nlicence%TYPE)
	RETURN infolicences.infoid%TYPE
	IS
		lic_id infolicences.infoid%TYPE;
	BEGIN
		SELECT infoid
		INTO lic_id
		FROM infolicences
		WHERE nlicence = lic_name;
		RETURN lic_id;
	END;


/*-----------------------------------------------------------
Licence Registration means:
a mail to member , to examinier and to test responsible
enter data in DB
-------------------------------------------------------------*/

	PROCEDURE LicenceRegistration
		(id_member IN members.id%TYPE,
		 T_licence IN licences.licence_id%TYPE,
		 T_Year IN licences.lyear%TYPE,
		 Lcomments IN licences.lcomments%TYPE)
	IS
	BEGIN
		/*mail */
	/*	INSERT INTO Licences VALUES(id_member,T_licence,T_Year,Lcomments);*/
		htp.formOpen('http://yachting.home.cern.ch/yachting/cgi-bin/admin/mail.pl?member_id='||id_member);
		header('YCC member file : Licence registration');
		htp.print('<span style="font-family:&quot;Comic Sans MS&quot;">INSERTED Data Record: '||id_member||', '||T_licence||', '||T_Year||', '||Lcomments);
		htp.br;
		htp.print('<span style="font-family:&quot;Comic Sans MS&quot;">Click here in order to send the confirmation mail to: </br>');
		htp.print('<span style="font-family:&quot;Comic Sans MS&quot;"> - the member <br> - the examinator <br> - the responsible of the courses');
		htp.br;
		htp.centerOpen;
		htp.formHidden('member_id',id_member);
		htp.formsubmit('send','send mail');
		htp.centerClose;
		htp.formClose;
	END LicenceRegistration;




/*-------------------------------------------------
Licence Check:
W, D, Y, C -> no requirements
ED -> need D
SU, CK -> need 2 licences or D or Y + test + theory test
M need form
---------------------------------------------------*/

	PROCEDURE CheckLicence
		(id_member IN members.id%TYPE,
		 T_licence IN VARCHAR2,
		 T_DD IN VARCHAR2,
		 T_Mon IN VARCHAR2,
		 T_Year IN licences.lyear%TYPE,
		 examinator IN VARCHAR2)
	IS
	   CURSOR curs IS
     SELECT licence_id, nlicence
     FROM members, licences, infolicences
     WHERE id=member_id and licence_id = infoid;


		Lcomments VARCHAR2(50);
		stop NUMBER(1) :=0;
		examiner members%ROWTYPE;
		annual_fee feesrecords%ROWTYPE;

	BEGIN
			SELECT *
			INTO examiner
			FROM members
			WHERE members.id = id_member;

			SELECT *
			INTO annual_fee
			FROM feesrecords
			WHERE feesrecords.member_id= id_member AND feesrecords.year_f = TO_NUMBER(TO_CHAR(sysdate, 'YYYY')) ;

			/* check the form */
			IF T_DD = 'Day' OR T_Mon = 'Mon' THEN /* AA */
				header('Cern YCC Licence Registration Check');
				htp.print('<span style="font-family:&quot;Comic Sans MS&quot;">Test Date is wrong<BR>');
				htp.print('<span style="font-family:&quot;Comic Sans MS&quot;">Please select the "BACK" button of your browser and correct it');
				htp.br;
			ELSIF examinator IS NULL THEN /* AA */
				header('Cern YCC Licence Registration Check');
				htp.print('<span style="font-family:&quot;Comic Sans MS&quot;">You did not specified the examinator<BR>');
				htp.print('<span style="font-family:&quot;Comic Sans MS&quot;">Please select the "BACK" button of your browser and correct it');
				htp.br;
			ELSE /* AA */
				/* if licence is not M then member must be an ACTIVE member */
				IF T_licence != 'M' AND examiner.membership != 'AS' AND examiner.membership != 'AJ' THEN /*BB*/
					header('Cern YCC Licence Registration Check');
					htp.print('<span style="font-family:&quot;Comic Sans MS&quot;">The member must be an ACTIVE member for this licence');
				 	htp.print(examiner.membership);
				 	htp.br;
				ELSE /* BB*/
					/* check previous licences */
					IF T_licence = 'W' OR T_licence = 'D' OR T_licence = 'Y' THEN   /* CC*/
						stop := 1;
					/* ED and C need D lic */
					ELSIF T_licence = 'ED' OR T_licence = 'C' THEN /* CC*/
						FOR rec IN curs LOOP
							IF rec.nlicence = 'D' THEN
								stop :=1;
							END IF;
						END LOOP;
						IF stop != 1 THEN
							header('Cern YCC Licence Registration Check');
							htp.print('<span style="font-family:&quot;Comic Sans MS&quot;">Member must have D licence to register ED or C licence');
				 			htp.br;
						END IF;
					ELSIF T_licence = 'SU' THEN /* CC*/
						FOR rec IN curs LOOP
							IF rec.nlicence = 'Y' THEN
								stop:=1;
							END IF;
						END LOOP;
						IF stop !=1 THEN
								header('Cern YCC Licence Registration Check');
								htp.print('<span style="font-family:&quot;Comic Sans MS&quot;">Member must have Y licence to register SU licence');
				 				htp.br;
						END IF;
					ELSIF T_licence = 'CK' THEN /* CC*/
							FOR rec IN curs LOOP
								IF rec.nlicence = 'SU' THEN
									stop:=1;
							  END IF;
							END LOOP;
							IF stop != 1 THEN
								header('Cern YCC Licence Registration Check');
								htp.print('<span style="font-family:&quot;Comic Sans MS&quot;">Member must have SU licence to register CK licence');
				 				htp.br;
							END IF;
					END IF; /* CC*/
					IF stop = 1 THEN
							Lcomments := examinator || ' '||T_DD || '/' || T_Mon;
							RegisterLicences.LicenceRegistration(id_member,licenceref(T_licence),TO_NUMBER(T_Year),Lcomments);

					END IF;
				END IF; /* BB */
			END IF; /* AA */

	END CheckLicence;




/*-------------------------------------------------
Registration of a new licence for the selected Member
---------------------------------------------------*/

	PROCEDURE SelectedMemberFile
		(id_member IN NUMBER)
	IS

		CURSOR l_curs IS
     SELECT id, member_id, licence_id
     FROM members, licences
     WHERE id=member_id;

		m_member members%ROWTYPE;
  	v VARCHAR2(25) := NULL;
  	a VARCHAR2(4) := NULL;


	BEGIN

		SELECT *
		INTO m_member
		FROM members
		WHERE members.id=id_member;

		header('YCC member file : Licence registration');
		htp.TableOpen('WIDTH="100%"');
		htp.TableRowOpen;
		htp.TableData('<HR><B><span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#FFFFFF">File of member '||m_member.name||' '|| m_member.firstname||'</FONT></B><HR>',null,null,null,null,'2','BGCOLOR="#000099"');
		htp.TableRowClose;
		htp.TableClose;
		htp.br;
		htp.br;

		htp.formOpen('http://oraweb01.cern.ch/ycc/owa/RegisterLicences.CheckLicence');

		htp.formHidden('id_member',id_member);

		htp.TableOpen('WIDTH="100%"');
  	htp.TableRowOpen;
 	 	htp.TableHeader('<span style="font-family:&quot;Comic Sans MS&quot;">Member ID','left',NULL,NULL,NULL,NULL,'WIDTH="20%"');
 	 	htp.TableData('<span style="font-family:&quot;Comic Sans MS&quot;">'||m_member.id||', '||m_member.name||' '||m_member.firstname);
 	 	htp.TableRowClose;

		htp.TableRowOpen;
		htp.TableHeader('<span style="font-family:&quot;Comic Sans MS&quot;">Licences','Left');
		v := NULL;
    	FOR l_rec in l_curs LOOP
      	IF l_rec.member_id = m_member.id THEN
        	SELECT nlicence
        	INTO a
          FROM infolicences
          WHERE infoid =l_rec.licence_id;
          v := v || a || ' ';
				END IF;
     	END LOOP;
    htp.TableData('<PRE><span style="font-family:&quot;Comic Sans MS&quot;">'||v,'Left');
		htp.TableRowClose;

		htp.TableRowOpen;
		htp.TableHeader('<span style="font-family:&quot;Comic Sans MS&quot;">NEW Licence','Left');
		htp.print('<TD VALIGN=BOTTOM><span style="font-family:&quot;Comic Sans MS&quot;">');
	  htp.formSelectOpen('T_licence');
	  htp.formSelectOption('W');
	  htp.formSelectOption('D');
	  htp.formSelectOption('ED');
	  htp.formSelectOption('Y');
	  htp.formSelectOption('C');
	  htp.formSelectOption('SU');
	  htp.formSelectOption('CK');
	  htp.formSelectOption('M');
	  htp.formSelectClose;
	  htp.TableRowClose;

	  htp.TableRowOpen;
  	htp.TableHeader('<span style="font-family:&quot;Comic Sans MS&quot;">Test Date','left');
  	htp.print('<TD VALIGN=BOTTOM><span style="font-family:&quot;Comic Sans MS&quot;">');
	  htp.formSelectOpen('T_DD');
	  htp.formSelectOption('Day');
		htp.formSelectOption('01');
		htp.formSelectOption('02');
		htp.formSelectOption('03');
		htp.formSelectOption('04');
		htp.formSelectOption('05');
		htp.formSelectOption('06');
		htp.formSelectOption('07');
		htp.formSelectOption('08');
		htp.formSelectOption('09');
		htp.formSelectOption('10');
		htp.formSelectOption('11');
		htp.formSelectOption('12');
		htp.formSelectOption('13');
		htp.formSelectOption('14');
		htp.formSelectOption('15');
		htp.formSelectOption('16');
		htp.formSelectOption('17');
		htp.formSelectOption('18');
		htp.formSelectOption('19');
		htp.formSelectOption('20');
		htp.formSelectOption('21');
		htp.formSelectOption('22');
		htp.formSelectOption('23');
		htp.formSelectOption('24');
		htp.formSelectOption('25');
		htp.formSelectOption('26');
		htp.formSelectOption('27');
		htp.formSelectOption('28');
		htp.formSelectOption('29');
		htp.formSelectOption('30');
		htp.formSelectOption('31');
		htp.formSelectClose;
		htp.formSelectOpen('T_Mon');
		htp.formSelectOption('Month');
		htp.formSelectOption('Jan');
		htp.formSelectOption('Feb');
		htp.formSelectOption('Mar');
		htp.formSelectOption('Apr');
		htp.formSelectOption('May');
		htp.formSelectOption('Jun');
		htp.formSelectOption('Jul');
		htp.formSelectOption('Aug');
		htp.formSelectOption('Sep');
		htp.formSelectOption('Oct');
		htp.formSelectOption('Nov');
		htp.formSelectOption('Dec');
		htp.formSelectClose;
		htp.formSelectOpen('T_Year');
		htp.formSelectOption(TO_NUMBER(TO_CHAR(sysdate,'YYYY')));
		htp.formSelectOption(TO_NUMBER(TO_CHAR(sysdate,'YYYY')-1));
		htp.formSelectOption(TO_NUMBER(TO_CHAR(sysdate,'YYYY')+1));
		htp.formSelectClose;
  	htp.TableRowClose;

  	htp.TableRowOpen;
  	htp.TableHeader('<span style="font-family:&quot;Comic Sans MS&quot;">Examiner','left');
  	htp.print('<TD VALIGN=BOTTOM><span style="font-family:&quot;Comic Sans MS&quot;">');
  	htp.formText('examinator',10,10);
    htp.TableRowClose;

    htp.TableRowOpen;
  	htp.TableHeader('<span style="font-family:&quot;Comic Sans MS&quot;">Comments','left');
  	htp.print('<TD VALIGN=BOTTOM><span style="font-family:&quot;Comic Sans MS&quot;">');
  	htp.print('xx');
    htp.TableRowClose;

		htp.TableClose;
		htp.br;
		htp.br;



   	htp.centerOpen;
 	 	htp.formSubmit;

 	 	htp.formClose;
 	 	htp.centerClose;

  	footer;
	END SelectedMemberFile;

/*------------------------------------------------------------------------
Search of a member on described critera (name or firstname even partially)
for Registration Licences Form
-------------------------------------------------------------------------*/

	PROCEDURE MemberSearch
  	(sname IN members.name%TYPE, sfirstname IN members.firstname%TYPE)
	AS
		CURSOR curs IS
		 SELECT *
		 FROM members, feesrecords
		 WHERE members.id = feesrecords.member_id AND feesrecords.year_f = TO_NUMBER(TO_CHAR(sysdate,'YYYY'));

		CURSOR l_curs IS
     SELECT id, member_id, licence_id
     FROM members, licences
     WHERE id=member_id;

  	flag NUMBER(1) := 0;
  	v VARCHAR2(25) := null;
  	a VARCHAR2(4) := NULL;

	BEGIN
		header('CERN Yachting Club');
		htp.TableOpen('WIDTH="100%"');
		htp.TableRowOpen;
		htp.TableData('<HR><B><span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#FFFFFF">List of found members</FONT></B><HR>',null,null,null,null,'2','BGCOLOR="#000099"');
		htp.TableRowClose;
		htp.TableClose;
		htp.br;
		htp.br;

	  /* serach with no name no firstname == error */
		IF (sfirstname IS NULL AND sname IS NULL) THEN
	  	htp.print('<span style="font-family:&quot;Comic Sans MS&quot;">ERROR : You did not specified any Name neither Firstname for the search. Please press the BACK button and redo it');
	  ELSE
	  	htp.TableOpen('WIDTH="100%" NOSAVE');
			htp.TableRowOpen;
			htp.TableHeader('<span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">ID','Left');
			htp.TableHeader('<span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">Name','Left');
			htp.TableHeader('<span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">Firstname','Left');
			htp.TableHeader('<span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">Nationality','Left');
			htp.TableHeader('<span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">Email','Left');
			htp.TableHeader('<span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">Birthday','Left');
			htp.TableHeader('<span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">Licences','Left');
			htp.TableRowClose;

			FOR rec IN curs LOOP
				/* search with family name: */
				IF (sfirstname IS NULL ) AND (rec.name LIKE '%'||UPPER(sname)||'%') THEN
					flag := 1;
					htp.TableRowOpen;
					htp.TableData('<span style="font-family:&quot;Comic Sans MS&quot;">'||htf.anchor('http://oraweb01.cern.ch/ycc/owa/RegisterLicences.SelectedMemberFile?id_member='||rec.id,'<FONT COLOR="#FF0000">'||rec.id),'Left');
					htp.TableData('<PRE><span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">'||rec.name,'Left');
					htp.TableData('<PRE><span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">'||rec.firstname,'Left');
					htp.TableData('<PRE><span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">'||rec.nationality,'Left');
					htp.TableData('<PRE><span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">'||rec.e_mail,'Left');
					htp.TableData('<PRE><span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">'||rec.birthday,'Left');
					v := NULL;
        	FOR l_rec in l_curs LOOP
        		IF l_rec.member_id = rec.id THEN
        			SELECT nlicence
        			INTO a
              FROM infolicences
             	WHERE infoid =l_rec.licence_id;
              v := v || a || ' ';
						END IF;
        	END LOOP;
        	htp.TableData('<PRE><span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">'||v,'Left');
					htp.TableRowClose;
				/* search with fistname: */
        ELSIF (sname IS NULL AND rec.firstname LIKE '%'||INITCAP(sfirstname)||'%') THEN
        	flag := 1;
					htp.TableRowOpen;
					htp.TableData('<span style="font-family:&quot;Comic Sans MS&quot;">'||htf.anchor('http://oraweb01.cern.ch/ycc/owa/RegisterLicences.SelectedMemberFile?id_member='||rec.id,'<FONT COLOR="#FF0000">'||rec.id),'Left');
					htp.TableData('<PRE><span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">'||rec.name,'Left');
					htp.TableData('<PRE><span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">'||rec.firstname,'Left');
					htp.TableData('<PRE><span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">'||rec.nationality,'Left');
					htp.TableData('<PRE><span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">'||rec.e_mail,'Left');
					htp.TableData('<PRE><span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">'||rec.birthday,'Left');
					v := NULL;
        	FOR l_rec in l_curs LOOP
        		IF l_rec.member_id = rec.id THEN
        			SELECT nlicence
        			INTO a
              FROM infolicences
             	WHERE infoid =l_rec.licence_id;
              v := v || a || ' ';
						END IF;
        	END LOOP;
        	htp.TableData('<PRE><span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">'||v,'Left');
        	htp.TableRowClose;
        /* search with name and firstname */
        ELSIF (rec.name LIKE '%'||UPPER(sname)||'%' AND rec.firstname LIKE '%'||INITCAP(sfirstname)||'%') THEN
        	flag := 1;
					htp.TableRowOpen;
					htp.TableData('<span style="font-family:&quot;Comic Sans MS&quot;">'||htf.anchor('http://oraweb01.cern.ch/ycc/owa/RegisterLicences.SelectedMemberFile?id_member='||rec.id,'<FONT COLOR="#FF0000">'||rec.id),'Left');
					htp.TableData('<PRE><span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">'||rec.name,'Left');
					htp.TableData('<PRE><span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">'||rec.firstname,'Left');
					htp.TableData('<PRE><span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">'||rec.nationality,'Left');
					htp.TableData('<PRE><span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">'||rec.e_mail,'Left');
					htp.TableData('<PRE><span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">'||rec.birthday,'Left');
					v := NULL;
        	FOR l_rec in l_curs LOOP
        		IF l_rec.member_id = rec.id THEN
        			SELECT nlicence
        			INTO a
              FROM infolicences
             	WHERE infoid =l_rec.licence_id;
              v := v || a || ' ';
						END IF;
        	END LOOP;
        	htp.TableData('<PRE><span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">'||v,'Left');
 					htp.TableRowClose;
				END IF;
			END LOOP;

			htp.TableClose;
			htp.br;

			IF flag = 0 THEN
				htp.hr;
				htp.print('The person you are looking for is not a member of the club ');
			ELSE
				htp.hr;
				htp.br;
				htp.print('<B><span style="font-family:&quot;Comic Sans MS&quot;"><CENTER>Click on the ID to add a new licence to the selected member </B></CENTER>');
				htp.br;
			END IF;
	  END IF;

		footer;


	END MemberSearch;

/**************************************************************

Licence Registration Main Program

***************************************************************/

	PROCEDURE LicenceRegistrationForm
	IS
	BEGIN
		header('CERN YCC Licence Registration form');

  	htp.formOpen('http://oraweb01.cern.ch/ycc/owa/RegisterLicences.MemberSearch');

		htp.TableOpen('WIDTH="100%"');
  	htp.TableRowOpen;
  	htp.TableData('<span style="font-family:&quot;Comic Sans MS&quot;">'||htf.hr||htf.bold('<font color="#FFFFFF">Search for a YCC member</font>')||htf.hr,NULL,NULL,NULL,NULL,2,'BGCOLOR="#000090"');
  	htp.TableRowClose;
  	htp.TableRowOpen;
  	htp.TableHeader('<span style="font-family:&quot;Comic Sans MS&quot;">'||'Family Name:','LEFT',NULL,NULL,NULL,NULL,'WIDTH="20%"');
		htp.TableData('<span style="font-family:&quot;Comic Sans MS&quot;">'||htf.formText('sname',25,null,null),null,null,null,null,null,'VALIGN=BOTTOM');
		htp.TableRowClose;
  	htp.TableRowOpen;
 		htp.TableHeader('<span style="font-family:&quot;Comic Sans MS&quot;">'||'First Name:','LEFT',NULL,NULL,NULL,NULL,'WIDTH="20%"');
		htp.TableData('<span style="font-family:&quot;Comic Sans MS&quot;">'||htf.formText('sfirstname',25,null,null),null,null,null,null,null,'VALIGN=BOTTOM');
		htp.TableRowClose;
		htp.TableRowOpen;
 	 	htp.TableData('&nbsp;');
 	 	htp.TableRowClose;
 	 	htp.TableClose;

 	 	htp.centerOpen;
 	 	htp.formSubmit;
 	 	htp.formReset;
 	 	htp.formClose;
 	 	htp.centerClose;

  	footer;

	END LicenceRegistrationForm;




END;

/
--------------------------------------------------------
--  DDL for Package Body REGISTERPAYMENT
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "REGISTERPAYMENT" IS

/*-------------------------------------------------
---------------------------------------------------*/
  PROCEDURE header
		(v_title in VARCHAR2)
	AS
	BEGIN
 		htp.HtmlOpen;
 		htp.HeadOpen;
 		htp.Title(v_title);
 		htp.meta(null,'Author','Elena Gianolio');
 		htp.meta(null,'Description','YCC');
 		htp.HeadClose;
 		htp.BodyOpen(null,'TEXT="#000000" bgcolor="silver" link="#0000FF" vlink="#000090" alink="#00BB00" ');
 		htp.tableOpen('BORDER=0',null,null,null,'COLS=2 WIDTH="100%" NOSAVE');
 		htp.TableRowOpen;
 		htp.print('<TD WIDTH="10" NOSAVE><img SRC="http://cern.ch/club-yachting/ycclogo.gif" height=200 width=191</TD>');
 		htp.TableData('<H1><B><span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#FF0000"><center>'||v_title||'</center></FONT></B></H1>');
 		htp.TableRowClose;
 		htp.tableClose;
 		htp.br;
 		htp.print('&nbsp');
 		htp.br;
 		htp.print('&nbsp');
 		htp.br;
 		htp.print('&nbsp');
 		htp.br;
 		htp.print('&nbsp');
	END header;

/*-------------------------------------------------
---------------------------------------------------*/

	PROCEDURE footer
	IS
	BEGIN
 		htp.hr;
 		htp.br;
 		htp.print('<span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#000000"><FONT SIZE=-1>');
 		htp.Address('Comments ? Contact '||
 		htf.mailto('Elena.Gianolio@cern.ch','YCC master'));
 		htp.print('</FONT>');
		htp.BodyClose;
 		htp.HtmlClose;
	END footer;

/*-------------------------------------------------
	Enter	AS/AJ/H/C/FM/T	RETURN description
			(Active Senior Member, Active Junior (<25years), Honorary Member,	Committee, Friend Member, Temporary Member)
	FROM table fee
---------------------------------------------------*/

	FUNCTION Membership
		(membership_id IN members.membership%TYPE)
	RETURN VARCHAR2
	IS
	m_desc fees.description%TYPE;
	BEGIN
		SELECT description
		INTO m_desc
		FROM fees
		WHERE membership_id = cat_id;
		RETURN m_desc;
	END Membership;

/*-------------------------------------------------
	Enter	description Return AS/AJ/H/C/FM/T
	FROM table fee
---------------------------------------------------*/
	FUNCTION MemberCatID
		(membershipDesc IN fees.description%TYPE)
	RETURN members.membership%TYPE
	IS
	m_catID fees.cat_ID%TYPE;
	BEGIN
		SELECT cat_ID
		INTO m_catID
		FROM fees
		WHERE description = membershipDesc;
		RETURN m_catID;
	END MemberCatID;
/*-------------------------------------------------
	Enter AS/AJ/H/C/FM/T Return the fee
	FROM table fee
---------------------------------------------------*/

	FUNCTION CategoryFee
		(membership_id IN members.membership%TYPE)
	RETURN NUMBER
	IS
		fee fees.annual_fee%TYPE;
	BEGIN
		SELECT annual_fee
		INTO fee
		FROM fees
		WHERE cat_id = membership_id;
		RETURN fee;
	END CategoryFee;

/*-------------------------------------------------
	Enter AS/AJ/H/C/FM/T Return the entrance fee
	FROM table fee
---------------------------------------------------*/

	FUNCTION CategoryMemberEntrance
		(membership_id IN members.membership%TYPE)
	RETURN NUMBER
	IS
		entrancefee fees.entrance_fee%TYPE;

	BEGIN
		SELECT entrance_fee
		INTO entrancefee
		FROM fees
		WHERE cat_id = membership_id;

		RETURN entrancefee;
	END CategoryMemberEntrance;

/*---------------------------------------------------------
	Enter member ID return entrance fee if it is a new member
-----------------------------------------------------------*/

	FUNCTION NewMemberFee
		(member_id IN members.id%TYPE, m_membership IN members.membership%TYPE)
	RETURN NUMBER
	IS
		m_entrance members.member_entrance%TYPE;
	BEGIN
		SELECT member_entrance
		INTO m_entrance
		FROM members
		WHERE members.id=member_id;

		IF m_entrance < TO_CHAR(sysdate,'YYYY') THEN
			RETURN 0;
		ELSE
			RETURN CategoryMemberEntrance(m_membership);
		END IF;
	END NewMemberFee;


/*-------------------------------------------------
---------------------------------------------------*/

	FUNCTION FeeToBePayed
		(member_id IN members.id%TYPE)
	RETURN NUMBER
	IS
		m_membership members.membership%TYPE;
		fee feesrecords.fee%TYPE;

	BEGIN
		SELECT membership
		INTO m_membership
		FROM members
		WHERE members.id=member_id;

	  fee := CategoryFee(m_membership) + NewMemberFee(member_id,m_membership);

	  RETURN fee;

	END FeeToBePayed;

/*-------------------------------------------------
---------------------------------------------------*/

	FUNCTION FeePayedSum
		(m_member_id IN members.id%TYPE, P_year IN NUMBER)
	RETURN NUMBER
	IS
		CURSOR feecurs IS
			SELECT *
			FROM feesrecords
			WHERE feesrecords.member_id = m_member_id AND year_f = P_year;

		amount NUMBER(3):=0;
	BEGIN
		FOR feerec IN feecurs LOOP
			amount := amount + feerec.fee;
		END LOOP;
	  RETURN amount;

	END FeePayedSum;


/*-------------------------------------------------
---------------------------------------------------*/

	FUNCTION CourseFeeToBePayed
		(m_course IN infolicences.Ncourse%TYPE)
	RETURN NUMBER
	IS
		xxcoursefee infolicences.coursefee%TYPE;

	BEGIN
		SELECT coursefee
		INTO xxcoursefee
		FROM infolicences
		WHERE infoid = m_course;

		RETURN xxcoursefee;

	END CourseFeeToBePayed;

/*-------------------------------------------------
---------------------------------------------------*/

	FUNCTION annualfeeyear
	RETURN NUMBER
	IS
		feeyear feesrecords.year_f%TYPE;
	BEGIN
	 IF (TO_DATE(sysdate) >= TO_DATE('1-OCT', 'DD-MON')) AND (TO_DATE(sysdate) <= TO_DATE('31-DEC', 'DD-MON'))
	 	THEN feeyear := TO_NUMBER(TO_CHAR(sysdate,'YYYY')+1);
	 	ELSE feeyear := TO_NUMBER(TO_CHAR(sysdate,'YYYY'));
	 END IF;
	 RETURN feeyear;

	END annualfeeyear;

/*-------------------------------------------------
---------------------------------------------------*/

	FUNCTION CheckCourseFee(P_COURSE IN infolicences.ncourse%TYPE)
	RETURN NUMBER
	IS
		cfee infolicences.coursefee%TYPE;
	BEGIN
		SELECT infolicences.coursefee
		INTO cfee
		FROM infolicences
		WHERE infolicences.ncourse = P_COURSE;
	RETURN cfee;
	END CheckCourseFee;


/*-------------------------------------------------
---------------------------------------------------*/

	PROCEDURE SubmitPayementRecord
		( P_TYPE IN VARCHAR2,
			P_YEAR IN feesrecords.year_f%TYPE,
			P_FEE IN feesrecords.fee%TYPE,
			P_COURSE IN infolicences.ncourse%TYPE,
			P_FEECOURSE IN infolicences.coursefee%TYPE,
			P_DD IN VARCHAR2,
		  P_MM IN VARCHAR2,
		  P_MODE IN VARCHAR2,
		  id_member IN members.id%TYPE,
		  TMP_FROM IN tempmembers.period_from%TYPE,
		  TMP_TO IN tempmembers.period_to%TYPE)
	IS
		P_DATE DATE := NULL;

	BEGIN
		IF (TO_DATE('1 OCT', 'DD MON') < TO_DATE(TO_NUMBER(P_DD)||' '||P_MM, 'DD MON') ) AND (TO_DATE(TO_NUMBER(P_DD)||' '||P_MM, 'DD MON') < TO_DATE('31 DEC', 'DD MON')) THEN
			P_date := TO_DATE(TO_NUMBER(P_DD)||' '||P_MM||' '||TO_CHAR(P_YEAR -1), 'DD MON YYYY');
		ELSE
			P_date := TO_DATE(TO_NUMBER(P_DD)||' '||P_MM||' '||TO_CHAR(P_YEAR), 'DD MON YYYY');
		END IF;

	  IF (P_TYPE = 'F' ) THEN
	  	INSERT INTO feesrecords VALUES(id_member,P_YEAR,P_DATE,P_MODE,P_FEE);
	  	IF (TMP_FROM <> 'Month') AND (TMP_TO <> 'Month') THEN
	  		INSERT INTO tempmembers VALUES(id_member,P_YEAR,TMP_FROM,TMP_TO,0,null);
	  	END IF;
	  ELSE
	  	INSERT INTO feescourses VALUES(id_member,P_YEAR,P_COURSE,P_DATE,P_MODE,P_FEECOURSE);
	  END IF;



	END SubmitPayementRecord;

/*-------------------------------------------------
---------------------------------------------------*/

	PROCEDURE ShowPayements(id_member IN NUMBER, P_year IN NUMBER, P_fee IN NUMBER, P_course IN VARCHAR2, P_feecourse IN NUMBER)
	IS
		CURSOR p_curs IS
			SELECT *
			FROM feesrecords
			WHERE id_member = feesrecords.member_id AND P_year = feesrecords.year_f
			ORDER BY feesrecords.paid_date;

		CURSOR c_curs IS
			SELECT *
			FROM feescourses
			WHERE id_member = feescourses.member_id AND P_year = feescourses.year_c;

		m_name members.name%TYPE;
		m_firstname members.firstname%TYPE;
		m_membership members.membership%TYPE;
		m_email members.e_mail%TYPE;
		m_login web_logon.logon_id%TYPE;
		m_passwd web_logon.logon_passwd%TYPE;
		total NUMBER(4) :=0;

	BEGIN

		SELECT name,firstname,membership,e_mail,logon_id,logon_passwd
		INTO m_name,m_firstname, m_membership, m_email, m_login, m_passwd
		FROM members, web_logon
		WHERE id=id_member and id=web_logon.member_id;

		header('Cern YCC Payement Record');
	  htp.print('<span style="font-family:&quot;Comic Sans MS&quot;">Recorded Payement of '||m_name||' '||m_firstname||' in year '||TO_CHAR(P_year)||' :<P>');

	  htp.TableOpen('WIDTH="50%"');
	  FOR p_rec IN p_curs LOOP
	  	total := total + p_rec.fee;
 	 		htp.TableRowOpen;
 	 		htp.TableData('<span style="font-family:&quot;Comic Sans MS&quot;">'||p_rec.fee||' CHF');
 			htp.TableData('<span style="font-family:&quot;Comic Sans MS&quot;">on '||TO_CHAR(p_rec.paid_date,'DD Mon YYYY'));
 			htp.TableData('<span style="font-family:&quot;Comic Sans MS&quot;">MODE: '||p_rec.paid_mode);
 	 		htp.TableRowClose;
	  END LOOP;
	  FOR c_rec IN c_curs LOOP
	  	total := total + c_rec.feecourse;
	  	htp.TableRowOpen;
 	 		htp.TableData('<span style="font-family:&quot;Comic Sans MS&quot;">'||c_rec.feecourse||' CHF');
 			htp.TableData('<span style="font-family:&quot;Comic Sans MS&quot;">on '||TO_CHAR(c_rec.paid_date,'DD Mon YYYY'));
 			htp.TableData('<span style="font-family:&quot;Comic Sans MS&quot;">MODE: '||c_rec.paid_mode);
 			htp.TableData('<span style="font-family:&quot;Comic Sans MS&quot;">for course: '||c_rec.course);
 	 		htp.TableRowClose;
	  END LOOP;

	  htp.TableClose;

	  htp.br;
	  htp.br;
	  htp.print('<span style="font-family:&quot;Comic Sans MS&quot;">The Total Amount Paid by '||m_name||' '||m_firstname||' is '||TO_CHAR(total)||' CHF');
	  htp.br;
	  IF m_email IS NOT NULL THEN
	  	IF (P_fee <> 0) THEN
	  		htp.formOpen('http://yachting.home.cern.ch/yachting/cgi-bin/registration-mail.pl'); /* METHOD='POST' is by default send confirmation mail to the members*/
	  	ELSIF (P_feecourse IS NOT NULL) THEN
	  		htp.formOpen('http://yachting.home.cern.ch/yachting/cgi-bin/course-registration-mail.pl'); /* METHOD='POST' is by default send confirmation mail to the members*/
	  	ELSE
	  		htp.print('error');
	  		htp.print('P_fee: '||P_fee);
	  		htp.print('P_feecourse: '||P_feecourse);
	  	END IF;
	  	htp.print('<span style="font-family:&quot;Comic Sans MS&quot;">Do you want to send a mail to the member as confirmation of his/her payment ?');

			htp.formHidden('member',m_firstname||' '||m_name);
			htp.formHidden('id',id_member);
	  	htp.formHidden('ammount',P_fee);
	  	htp.formHidden('course',P_course);
	  	htp.formHidden('fee_course',P_feecourse);
			htp.formHidden('membership',Membership(m_membership));
			htp.formHidden('contact',m_email);
			htp.formHidden('login',m_login);
			htp.formHidden('password',m_passwd);
			htp.formSubmit('SubmitButton','YES',null);
			htp.formClose;
	  ELSE
	  	htp.br;
	  	htp.br;
	  	htp.print('<span style="font-family:&quot;Comic Sans MS&quot;">'||m_name||' '||m_firstname||' does not have an email I cannot contact him');
	   	htp.br;
  	  htp.br;
	    htp.hr;
	    htp.br;
	    htp.print('<span style="font-family:&quot;Comic Sans MS&quot;">Please click here if you want to proceed with a' || htf.Anchor('https://oraweb.cern.ch/pls/ycc/RegisterPayment.startup','New Registration'));
	  	htp.br;
	  	htp.br;
	  	htp.centerClose;
	  END IF;


	  footer;
	END ShowPayements;

/*-------------------------------------------------
---------------------------------------------------*/

	PROCEDURE CheckPayementRecord
		( P_TYPE IN VARCHAR2,
		  m_membership IN fees.description%TYPE,
		  TMP_FROM VARCHAR2,
		  TMP_TO VARCHAR2,
			P_YEAR IN NUMBER,
			P_FEE IN NUMBER,
			P_COURSE IN VARCHAR2,
			P_FEECOURSE IN NUMBER,
			P_DD IN VARCHAR2,
		  P_MM IN VARCHAR2,
		  P_MODE IN VARCHAR2,
		  id_member IN members.id%TYPE
		)
	IS

	stop NUMBER(1) :=0;
	oldmembership members.membership%TYPE;
	newmembership members.membership%TYPE := MemberCatID(m_membership);
	m_entrance members.member_entrance%TYPE;

	BEGIN
		SELECT member_entrance
		INTO m_entrance
		FROM members
		WHERE id = id_member;


		IF P_DD = 'Day' OR P_MM = 'Month' THEN
			header('Cern YCC Payement Check');
			htp.print('<span style="font-family:&quot;Comic Sans MS&quot;">Payement Date is wrong<BR>');
			htp.print('<span style="font-family:&quot;Comic Sans MS&quot;">Please select the "BACK" button of your browser and correct it');
			htp.br;
			stop := 1;
		ELSIF P_TYPE = 'C' AND CheckCourseFee(P_COURSE)<> P_FEECOURSE THEN
					header('<span style="font-family:&quot;Comic Sans MS&quot;">Cern YCC Payement Check');
					htp.print('<span style="font-family:&quot;Comic Sans MS&quot;">Payement Amount do not correspond to the Course selected<BR>');
					htp.print('<span style="font-family:&quot;Comic Sans MS&quot;">Please select the BACK button of your browser and correct it');
					htp.br;
					stop :=1;
		ELSIF P_FEE = 0 THEN
			header('<span style="font-family:&quot;Comic Sans MS&quot;">Cern YCC Payement Check');
			htp.print('<span style="font-family:&quot;Comic Sans MS&quot;">Payement Amount is empty<BR>');
			htp.print('<span style="font-family:&quot;Comic Sans MS&quot;">Please select the BACK button of your browser and correct it');
			htp.br;
			stop :=1;
		ELSIF P_TYPE = 'F' AND (m_membership = 'T' OR newmembership = 'T') THEN
			IF  m_entrance >= P_YEAR THEN
				header('<span style="font-family:&quot;Comic Sans MS&quot;">Cern YCC Payement Check');
				htp.print('<span style="font-family:&quot;Comic Sans MS&quot;">Member cannot be a temporary member as he was never a member<BR>');
				htp.br;
				stop :=1;
			ELSIF MONTHS_BETWEEN(TO_DATE(TMP_TO,'MON'),TO_DATE(TMP_FROM,'MON')) > 2 THEN
					header('<span style="font-family:&quot;Comic Sans MS&quot;">Cern YCC Payement Check');
					htp.print('<span style="font-family:&quot;Comic Sans MS&quot;">Cannot be a Temporary member for more than 2 months<BR>');
					htp.br;
					stop :=1;
			END IF;
		END IF;



		IF stop = 0 THEN
			  SELECT membership
			  INTO oldmembership
			  FROM members
			  WHERE id = id_member;

			  IF oldmembership NOT LIKE newmembership
			  	THEN
			  		UPDATE members
			  		SET membership = newmembership
			  		WHERE id = id_member;
			  END IF;
				SubmitPayementRecord(P_TYPE,P_YEAR,P_FEE,P_COURSE,P_FEECOURSE,P_DD,P_MM,P_MODE,id_member, TMP_FROM, TMP_TO);
				ShowPayements(id_member,P_YEAR,P_FEE,P_COURSE,P_FEECOURSE);

		END IF;




		/* add check for temporary members :
		cannot be temporary members for more than xx years consecutevely
		check month are set correctly ....
		*/

	END CheckPayementRecord;




/*------------------------------------------------------------------------
Search of a member on described critera (name or firstname even partially)
for Annual Fee Form
-------------------------------------------------------------------------*/

	PROCEDURE MemberSearch
  	(sname IN members.name%TYPE, sfirstname IN members.firstname%TYPE)
	AS
		CURSOR curs IS
		SELECT *
		FROM members;

		CURSOR l_curs IS
     SELECT id, member_id, licence_id
     FROM members, licences
     WHERE id=member_id;

  	flag NUMBER(1) := 0;
  	v VARCHAR2(25) := null;
  	a VARCHAR2(4) := NULL;

	BEGIN
		header('CERN Yachting Club');
		htp.TableOpen('WIDTH="100%"');
		htp.TableRowOpen;
		htp.TableData('<HR><B><span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#FFFFFF">List of found members</FONT></B><HR>',null,null,null,null,'2','BGCOLOR="#000099"');
		htp.TableRowClose;
		htp.TableClose;
		htp.br;
		htp.br;

		IF (sfirstname IS NULL AND sname IS NULL) THEN
	  	htp.print('<span style="font-family:&quot;Comic Sans MS&quot;">ERROR : You did not specified any Name neither Firstname for the search. Please press the BACK button and redo it');
	  ELSE

	  	htp.TableOpen('WIDTH="100%" NOSAVE');
			htp.TableRowOpen;
			htp.TableHeader('<span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">ID','Left');
			htp.TableHeader('<span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">Name','Left');
			htp.TableHeader('<span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">Firstname','Left');
			htp.TableHeader('<span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">Nationality','Left');
			htp.TableHeader('<span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">Email','Left');
			htp.TableHeader('<span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">Birthday','Left');
			htp.TableHeader('<span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">Licences','Left');
			htp.TableRowClose;

			FOR rec IN curs LOOP
				IF (sfirstname IS NULL ) AND (rec.name LIKE '%'||UPPER(sname)||'%') THEN
					flag := 1;
					htp.TableRowOpen;
					htp.TableData('<span style="font-family:&quot;Comic Sans MS&quot;">'||htf.anchor('https://oraweb.cern.ch/pls/ycc/RegisterPayment.SelectedMemberFile?id_member='||rec.id,'<FONT COLOR="#FF0000">'||rec.id),'Left');
					htp.TableData('<PRE><span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">'||rec.name,'Left');
					htp.TableData('<PRE><span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">'||rec.firstname,'Left');
					htp.TableData('<PRE><span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">'||rec.nationality,'Left');
					htp.TableData('<PRE><span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">'||rec.e_mail,'Left');
					htp.TableData('<PRE><span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">'||rec.birthday,'Left');
					v := NULL;
        	FOR l_rec in l_curs LOOP
        		IF l_rec.member_id = rec.id THEN
        			SELECT nlicence
        			INTO a
              FROM infolicences
             	WHERE infoid =l_rec.licence_id;
              v := v || a || ' ';
						END IF;
        	END LOOP;
        	htp.TableData('<PRE><span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">'||v,'Left');
					htp.TableRowClose;
        ELSIF (sname IS NULL AND rec.firstname LIKE '%'||INITCAP(sfirstname)||'%') THEN
        	flag := 1;
					htp.TableRowOpen;
					htp.TableData('<span style="font-family:&quot;Comic Sans MS&quot;">'||htf.anchor('https://oraweb.cern.ch/pls/ycc/RegisterPayment.SelectedMemberFile?id_member='||rec.id,'<FONT COLOR="#FF0000">'||rec.id),'Left');
					htp.TableData('<PRE><span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">'||rec.name,'Left');
					htp.TableData('<PRE><span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">'||rec.firstname,'Left');
					htp.TableData('<PRE><span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">'||rec.nationality,'Left');
					htp.TableData('<PRE><span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">'||rec.e_mail,'Left');
					htp.TableData('<PRE><span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">'||rec.birthday,'Left');
					v := NULL;
        	FOR l_rec in l_curs LOOP
        		IF l_rec.member_id = rec.id THEN
        			SELECT nlicence
        			INTO a
              FROM infolicences
             	WHERE infoid =l_rec.licence_id;
              v := v || a || ' ';
						END IF;
        	END LOOP;
        	htp.TableData('<PRE><span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">'||v,'Left');
        	htp.TableRowClose;
				ELSIF (rec.name LIKE '%'||UPPER(sname)||'%' AND rec.firstname LIKE '%'||INITCAP(sfirstname)||'%') THEN
					flag := 1;
					htp.TableRowOpen;
					htp.TableData('<span style="font-family:&quot;Comic Sans MS&quot;">'||htf.anchor('https://oraweb.cern.ch/pls/ycc/RegisterPayment.SelectedMemberFile?id_member='||rec.id,'<FONT COLOR="#FF0000">'||rec.id),'Left');
					htp.TableData('<PRE><span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">'||rec.name,'Left');
					htp.TableData('<PRE><span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">'||rec.firstname,'Left');
					htp.TableData('<PRE><span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">'||rec.nationality,'Left');
					htp.TableData('<PRE><span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">'||rec.e_mail,'Left');
					htp.TableData('<PRE><span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">'||rec.birthday,'Left');
					v := NULL;
        	FOR l_rec in l_curs LOOP
        		IF l_rec.member_id = rec.id THEN
        			SELECT nlicence
        			INTO a
              FROM infolicences
             	WHERE infoid =l_rec.licence_id;
              v := v || a || ' ';
						END IF;
        	END LOOP;
        	htp.TableData('<PRE><span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">'||v,'Left');
 					htp.TableRowClose;
				END IF;
			END LOOP;

			htp.TableClose;
			htp.br;

			IF flag = 0 THEN
				htp.hr;
				htp.print('New member?');
			ELSIF flag = 1 THEN
				htp.hr;
				htp.br;
				htp.print(htf.bold('<span style="font-family:&quot;Comic Sans MS&quot;">Click on the ID to select the member name '));
				htp.br;
/*				htp.print(htf.bold('or '||htf.anchor('http://oraweb03.cern.ch/ycc/owa/RegisterPayment.ListNewMembers', 'here')||' for a the list of new members whose payement is not registered yet'));
*/				htp.br;
			END IF;
	  END IF;

		footer;


	END MemberSearch;

/*-------------------------------------------------
Registration of Annual Fee for the selected Member
---------------------------------------------------*/

	PROCEDURE SelectedMemberFile
		(id_member IN NUMBER)
	IS
		m_name members.name%TYPE;
		m_firstname members.firstname%TYPE;
		m_membership members.membership%TYPE;
		m_birthday members.birthday%TYPE;
		m_entrance members.member_entrance%TYPE;

		thisyear NUMBER(4) := annualfeeyear;


	BEGIN

		SELECT name,firstname, membership, birthday, member_entrance
		INTO m_name,m_firstname, m_membership, m_birthday, m_entrance
		FROM members
		WHERE members.id=id_member;

  	header('YCC member file');
  	htp.TableOpen('WIDTH="100%"');
  	htp.TableRowOpen;
  	htp.TableData('<HR><B><span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#FFFFFF">File of member '||m_name||' '|| m_firstname||'</FONT></B><HR>',null,null,null,null,'2','BGCOLOR="#000099"');
		htp.TableRowClose;
		htp.TableClose;
		htp.br;
		htp.br;

		htp.formOpen('https://oraweb.cern.ch/pls/ycc/RegisterPayment.CheckPayementRecord');

		htp.formHidden('P_TYPE','F');

		htp.TableOpen('WIDTH="100%"');
  	htp.TableRowOpen;
 	 	htp.TableHeader('<span style="font-family:&quot;Comic Sans MS&quot;">Member ID','left');
 	 	htp.TableData('<span style="font-family:&quot;Comic Sans MS&quot;">'||id_member||', '||m_name||' '||m_firstname);
 	 	htp.TableRowClose;

 	 	htp.TableRowOpen;
 	 	htp.TableHeader('<span style="font-family:&quot;Comic Sans MS&quot;">Birthday','left');
 	 	htp.TableData('<span style="font-family:&quot;Comic Sans MS&quot;">'||m_birthday);
 	 	htp.TableRowClose;
 	 	htp.TableRowOpen;
 	 	htp.TableHeader('<span style="font-family:&quot;Comic Sans MS&quot;">Status','left');

 	 	IF ((months_between('01-APR-'||to_char(sysdate,'YY'), m_birthday ) /12) < 25) THEN
 	 		htp.TableData('<span style="font-family:&quot;Comic Sans MS&quot;">This member can be a Junior');
 	 	ELSE
 	 		htp.TableData('<span style="font-family:&quot;Comic Sans MS&quot;">This member cannot be a Junior');
 	 	END IF;


 	 	htp.TableRowClose;

		htp.TableRowOpen;
		htp.TableHeader('<span style="font-family:&quot;Comic Sans MS&quot;">Member entrance year:','left');
		htp.TableData('<span style="font-family:&quot;Comic Sans MS&quot;">'||m_entrance);
		htp.TableRowClose;

  	htp.TableRowOpen;
  	htp.TableHeader('<span style="font-family:&quot;Comic Sans MS&quot;">Membership','left');
  	htp.print('<TD VALIGN=BOTTOM><span style="font-family:&quot;Comic Sans MS&quot;">');
	  htp.formSelectOpen('M_membership');
	  htp.formSelectOption(Membership(m_membership));
    FOR mm IN ( SELECT * FROM fees) LOOP
    	IF (mm.cat_id <> m_membership) THEN
	  		htp.formSelectOption(Membership(mm.cat_id));
    	END IF;
	  END LOOP;
	  htp.formSelectClose;
  	htp.TableRowClose;

  	htp.TableRowOpen;
  	htp.TableHeader('<span style="font-family:&quot;Comic Sans MS&quot;">* Only for Temporary member:','left');
  	htp.print('<TD VALIGN=BOTTOM><span style="font-family:&quot;Comic Sans MS&quot;">From');
  	htp.formSelectOpen('TMP_FROM');
		htp.formSelectOption('Month');
		htp.formSelectOption('Jan');
		htp.formSelectOption('Feb');
		htp.formSelectOption('Mar');
		htp.formSelectOption('Apr');
		htp.formSelectOption('May');
		htp.formSelectOption('Jun');
		htp.formSelectOption('Jul');
		htp.formSelectOption('Aug');
		htp.formSelectOption('Sep');
		htp.formSelectOption('Oct');
		htp.formSelectOption('Nov');
		htp.formSelectOption('Dec');
		htp.formSelectClose;

  	htp.print('<span style="font-family:&quot;Comic Sans MS&quot;">To:');
  	htp.formSelectOpen('TMP_TO');
		htp.formSelectOption('Month');
		htp.formSelectOption('Jan');
		htp.formSelectOption('Feb');
		htp.formSelectOption('Mar');
		htp.formSelectOption('Apr');
		htp.formSelectOption('May');
		htp.formSelectOption('Jun');
		htp.formSelectOption('Jul');
		htp.formSelectOption('Aug');
		htp.formSelectOption('Sep');
		htp.formSelectOption('Oct');
		htp.formSelectOption('Nov');
		htp.formSelectOption('Dec');
		htp.formSelectClose;
  	htp.print('</TD>');
  	htp.TableRowClose;

  	htp.TableRowOpen;
  	htp.TableHeader('<span style="font-family:&quot;Comic Sans MS&quot;">Annual Fee for year:','left');
  	htp.print('<TD VALIGN=BOTTOM><span style="font-family:&quot;Comic Sans MS&quot;">');
	  htp.formSelectOpen('P_YEAR');
	  htp.formSelectOption(TO_CHAR(thisyear));
  /*	htp.formSelectOption(TO_CHAR(thisyear+1));
  	htp.formSelectOption(TO_CHAR(thisyear+2));
  	htp.formSelectOption(TO_CHAR(thisyear+3));*/
  	htp.formSelectClose;
  /*	htp.TableData('<span style="font-family:&quot;Comic Sans MS&quot;">'||TO_CHAR(thisyear));*/
  	htp.TableRowClose;

  	htp.TableRowOpen;
  	htp.TableHeader('<span style="font-family:&quot;Comic Sans MS&quot;">Fee to be payed','left');
  	htp.TableData('<span style="font-family:&quot;Comic Sans MS&quot;">'||TO_CHAR(FeeToBePayed(id_member)));
  	htp.TableRowClose;

  	htp.TableRowOpen;
  	htp.TableHeader('<span style="font-family:&quot;Comic Sans MS&quot;">Fee already payed','left');
  	htp.TableData('<span style="font-family:&quot;Comic Sans MS&quot;">'||TO_CHAR(FeePayedSum(id_member,thisyear)));
  	htp.TableRowClose;

  	htp.TableRowOpen;
  	htp.TableHeader('<span style="font-family:&quot;Comic Sans MS&quot;">Amount payed now:','left');
		htp.TableData('<span style="font-family:&quot;Comic Sans MS&quot;">'||htf.formText('P_FEE',5,null,TO_CHAR(FeeToBePayed(id_member) - FeePayedSum(id_member,thisyear))));
  	htp.TableRowClose;

  	htp.formHidden('P_COURSE',NULL);
  	htp.formHidden('P_FEECOURSE',NULL);


  	htp.TableRowOpen;
  	htp.TableHeader('<span style="font-family:&quot;Comic Sans MS&quot;">Payement Date','left');
  	htp.print('<TD VALIGN=BOTTOM><span style="font-family:&quot;Comic Sans MS&quot;">');
	  htp.formSelectOpen('P_DD');
	  htp.formSelectOption('Day');
		htp.formSelectOption('01');
		htp.formSelectOption('02');
		htp.formSelectOption('03');
		htp.formSelectOption('04');
		htp.formSelectOption('05');
		htp.formSelectOption('06');
		htp.formSelectOption('07');
		htp.formSelectOption('08');
		htp.formSelectOption('09');
		htp.formSelectOption('10');
		htp.formSelectOption('11');
		htp.formSelectOption('12');
		htp.formSelectOption('13');
		htp.formSelectOption('14');
		htp.formSelectOption('15');
		htp.formSelectOption('16');
		htp.formSelectOption('17');
		htp.formSelectOption('18');
		htp.formSelectOption('19');
		htp.formSelectOption('20');
		htp.formSelectOption('21');
		htp.formSelectOption('22');
		htp.formSelectOption('23');
		htp.formSelectOption('24');
		htp.formSelectOption('25');
		htp.formSelectOption('26');
		htp.formSelectOption('27');
		htp.formSelectOption('28');
		htp.formSelectOption('29');
		htp.formSelectOption('30');
		htp.formSelectOption('31');
		htp.formSelectClose;
		htp.formSelectOpen('P_MM');
		htp.formSelectOption('Month');
		htp.formSelectOption('Jan');
		htp.formSelectOption('Feb');
		htp.formSelectOption('Mar');
		htp.formSelectOption('Apr');
		htp.formSelectOption('May');
		htp.formSelectOption('Jun');
		htp.formSelectOption('Jul');
		htp.formSelectOption('Aug');
		htp.formSelectOption('Sep');
		htp.formSelectOption('Oct');
		htp.formSelectOption('Nov');
		htp.formSelectOption('Dec');
		htp.formSelectClose;
  	htp.TableRowClose;

  	htp.TableRowOpen;
  	htp.TableHeader('<span style="font-family:&quot;Comic Sans MS&quot;">Payement Mode','left');
  	htp.print('<TD VALIGN=BOTTOM><span style="font-family:&quot;Comic Sans MS&quot;">');
  	htp.formSelectOpen('P_MODE');
		htp.formSelectOption('UBS');
		htp.formSelectOption('PTT');
		htp.formSelectOption('CASH');
  	htp.formSelectClose;
  	htp.TableRowClose;

		htp.TableClose;
		htp.br;
		htp.br;

  	htp.formHidden('id_member',id_member);
/*  	htp.formHidden('m_membership',m_membership);*/
   	htp.centerOpen;
 	 	htp.formSubmit;

 	 	/* change info about member*/

 	 	htp.formClose;
 	 	htp.centerClose;

  	footer;
	END SelectedMemberFile;



/*-------------------------------------------------
---------------------------------------------------*/

	PROCEDURE NewEntry
	IS
	BEGIN
		header('New Entry Form');
		htp.print('<span style="font-family:&quot;Comic Sans MS&quot;">Page STILL under construction');

		htp.formOpen('https://oraweb.cern.ch/pls/ycc/RegisterPayment.RegisterNewEntry');

		htp.TableOpen('WIDTH="100%"');
		htp.TableRowOpen;
  	htp.TableHeader('<span style="font-family:&quot;Comic Sans MS&quot;">Name','Left',null,null,null,null,'WIDTH="20%"');
  	htp.TableData('<span style="font-family:&quot;Comic Sans MS&quot;">'||htf.formText('ne_name',25,null,null));
  	htp.TableRowClose;
		htp.TableRowOpen;
  	htp.TableHeader('<span style="font-family:&quot;Comic Sans MS&quot;">FirstName','Left',null,null,null,null,'WIDTH="20%"');
  	htp.TableData('<span style="font-family:&quot;Comic Sans MS&quot;">'||htf.formText('ne_firstname',25,null,null));
  	htp.TableRowClose;
		htp.TableRowOpen;
  	htp.TableHeader('<span style="font-family:&quot;Comic Sans MS&quot;">Birthday','Left',null,null,null,null,'WIDTH="20%"');
  	htp.TableData('<span style="font-family:&quot;Comic Sans MS&quot;">'||htf.formText('ne_birthday',25,null,null)||'  (Mandatory for Juniors)');
  	htp.TableRowClose;
		htp.TableRowOpen;
  	htp.TableHeader('<span style="font-family:&quot;Comic Sans MS&quot;">Nationality','Left',null,null,null,null,'WIDTH="20%"');
  	htp.print('<TD VALIGN=BOTTOM><span style="font-family:&quot;Comic Sans MS&quot;">');
	  htp.formSelectOpen('ne_member');
	  htp.formSelectOption('German,D',null,'VALUE="D"');
		htp.formSelectOption('Italian,I',null,'VALUE="I"');
		htp.formSelectOption('Suisse,CHF',null,'VALUE="CHF"');
		htp.formSelectOption('French,F',null,'VALUE="F"');
		htp.formSelectOption('Dutch,NL',null,'VALUE="NL"');
		htp.formSelectOption('Spanish,S',null,'VALUE="S"');
		htp.formSelectOption('United Kingdom,UK',null,'VALUE="UK"');
		htp.formSelectOption('Portuguise,P',null,'VALUE="P"');
		htp.formSelectOption('Austria,A',null,'VALUE="A"');
		htp.formSelectOption('Belgium,B',null,'VALUE="B"');
		htp.formSelectOption('Canadian,C',null,'VALUE="C"');
		htp.formSelectOption('Danish,DK',null,'VALUE="DK"');
		htp.formSelectOption('Australia,AU',null,'VALUE="AU"');
		htp.formSelectOption('Irish,EIRE',null,'VALUE="EIRE"');
		htp.formSelectOption('Greek,GR',null,'VALUE="GR"');
		htp.formSelectOption('Argentina,AG',null,'VALUE="AG"');
		htp.formSelectOption('Mexican,M',null,'VALUE="M"');
		htp.formSelectOption('Hungherian',null,'VALUE="H"');
		htp.formSelectOption('Japan,J',null,'VALUE="J"');
		htp.formSelectOption('Russian,R',null,'VALUE="R"');
		htp.formSelectOption('American,USA',null,'VALUE="USA"');
		htp.formSelectClose;


  	htp.TableRowClose;
		htp.TableRowOpen;
  	htp.TableHeader('<span style="font-family:&quot;Comic Sans MS&quot;">Membership','Left',null,null,null,null,'WIDTH="20%"');
  	htp.print('<TD VALIGN=BOTTOM><span style="font-family:&quot;Comic Sans MS&quot;">');
	  htp.formSelectOpen('ne_member');
	  htp.formSelectOption('Active Senior',null,'VALUE="AS"');
		htp.formSelectOption('Active Junior (< 25)',null,'VALUE="AJ"');
		htp.formSelectOption('Friend',null,'VALUE="FM"');
		htp.formSelectOption('Committee',null,'VALUE="C"');
		htp.formSelectOption('Honorary',null,'VALUE="H"');
		htp.formSelectClose;


  	htp.TableRowClose;

  	htp.TableClose;

		htp.formClose;

		footer;
	END NewEntry;

/**************************************************************

Annual Fees Form Registration Main Program

***************************************************************/

PROCEDURE AnnualFeesForm
	IS
	BEGIN
		header('CERN YCC Registration fee form');

  	htp.formOpen('https://oraweb.cern.ch/pls/ycc/RegisterPayment.MemberSearch');

		htp.TableOpen('WIDTH="100%"');
  	htp.TableRowOpen;
  	htp.TableData('<span style="font-family:&quot;Comic Sans MS&quot;">'||htf.hr||htf.bold('<font color="#FFFFFF">Search for a YCC member</font>')||htf.hr,NULL,NULL,NULL,NULL,2,'BGCOLOR="#000090"');
  	htp.TableRowClose;
  	htp.TableRowOpen;
  	htp.TableHeader('<span style="font-family:&quot;Comic Sans MS&quot;">'||'Family Name:','LEFT',NULL,NULL,NULL,NULL,'WIDTH="20%"');
		htp.TableData('<span style="font-family:&quot;Comic Sans MS&quot;">'||htf.formText('sname',25,null,null),null,null,null,null,null,'VALIGN=BOTTOM');
		htp.TableRowClose;
  	htp.TableRowOpen;
 		htp.TableHeader('<span style="font-family:&quot;Comic Sans MS&quot;">'||'First Name:','LEFT',NULL,NULL,NULL,NULL,'WIDTH="20%"');
		htp.TableData('<span style="font-family:&quot;Comic Sans MS&quot;">'||htf.formText('sfirstname',25,null,null),null,null,null,null,null,'VALIGN=BOTTOM');
		htp.TableRowClose;
		htp.TableRowOpen;
 	 	htp.TableData('&nbsp;');
 	 	htp.TableRowClose;
 	 	htp.TableClose;

 	 	htp.centerOpen;
 	 	htp.formSubmit;
 	 	htp.formReset;
 	 	htp.formClose;
 	 	htp.centerClose;

  	footer;

	END AnnualFeesForm;




  PROCEDURE ListALLPayement
  IS
		CURSOR m_curs IS
		SELECT *
		FROM members;

		amount NUMBER(4) := 0;

BEGIN

	  header ('List of All Payements for year 2008');
	  htp.TableOpen('WIDTH="30%" NOSAVE BORDER=1');
    FOR m_rec IN m_curs LOOP
    	amount := 0;
    	amount := FeePayedSum (m_rec.id, '2008');
    	IF amount != 0 THEN
  			htp.TableRowOpen;
  			htp.TableData('<span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">'||m_rec.id,null,null,null,null,null,'WIDTH="5%"');
  			htp.TableData('<span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">'||m_rec.name,null,null,null,null,null,'WIDTH="40%"');
				htp.TableData('<span style="font-family:&quot;Comic Sans MS&quot;">'||m_rec.firstname,null,null,null,null,null,'WIDTH="40%"');
				htp.TableData('<span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">'||amount,null,null,null,null,null,'WIDTH="15%"');
    		htp.TableRowClose;
    	END IF;

    END LOOP;
    htp.TableClose;
END /*ListALLPayement*/;



/*-------------------------------------------------
Registration of Course Fee for the selected Member
---------------------------------------------------*/

	PROCEDURE CourseSelectedMemberFile
		(id_member IN NUMBER)
	IS
		m_name members.name%TYPE;
		m_firstname members.firstname%TYPE;
		m_membership members.membership%TYPE;
		m_course infolicences.Ncourse%TYPE;

		thisyear NUMBER(4) := annualfeeyear;

	BEGIN

		SELECT name,firstname, membership
		INTO m_name,m_firstname, m_membership
		FROM members
		WHERE members.id=id_member;

  	header('YCC member file');
  	htp.TableOpen('WIDTH="100%"');
  	htp.TableRowOpen;
  	htp.TableData('<HR><B><span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#FFFFFF">File of member '||m_name||' '|| m_firstname||'</FONT></B><HR>',null,null,null,null,'2','BGCOLOR="#000099"');
		htp.TableRowClose;
		htp.TableClose;
		htp.br;
		htp.br;

		htp.formOpen('https://oraweb.cern.ch/pls/ycc/RegisterPayment.CheckPayementRecord');

		htp.formHidden('P_TYPE','C');

		htp.TableOpen('WIDTH="100%"');
  	htp.TableRowOpen;
 	 	htp.TableHeader('<span style="font-family:&quot;Comic Sans MS&quot;">Member ID','left',NULL,NULL,NULL,NULL,'WIDTH="20%"');
 	 	htp.TableData('<span style="font-family:&quot;Comic Sans MS&quot;">'||id_member||', '||m_name||' '||m_firstname);
 	 	htp.TableRowClose;

		htp.formHidden('m_membership',Membership(m_membership));

		htp.formHidden('TMP_FROM',NULL);
		htp.formHidden('TMP_TO',NULL);

  	htp.TableRowOpen;
  	htp.TableHeader('<span style="font-family:&quot;Comic Sans MS&quot;">Membership','left');
  	htp.TableData('<span style="font-family:&quot;Comic Sans MS&quot;">'||Membership(m_membership));
  	htp.TableRowClose;

  	htp.TableRowOpen;
  	htp.TableHeader('<span style="font-family:&quot;Comic Sans MS&quot;">Course Fee for year:','left');
  	htp.print('<TD VALIGN=BOTTOM><span style="font-family:&quot;Comic Sans MS&quot;">');
	  htp.formSelectOpen('P_YEAR');
	  htp.formSelectOption(TO_CHAR(thisyear));
  /*	htp.formSelectOption(TO_CHAR(thisyear+1));
  	htp.formSelectOption(TO_CHAR(thisyear+2));
  	htp.formSelectOption(TO_CHAR(thisyear+3));*/
  	htp.formSelectClose;
  	htp.TableRowClose;

  	htp.formHidden('P_FEE',NULL);

  	htp.TableRowOpen;
  	htp.TableHeader('<span style="font-family:&quot;Comic Sans MS&quot;">Course','left');
  	htp.print('<TD VALIGN=BOTTOM><span style="font-family:&quot;Comic Sans MS&quot;">');
	  htp.formSelectOpen('P_COURSE');
	  htp.formSelectOption('W');
	  htp.formSelectOption('EW');
		htp.formSelectOption('D');
		htp.formSelectOption('ED');
		htp.formSelectOption('Y');
		htp.formSelectOption('C');
		htp.formSelectOption('SU');
		htp.formSelectOption('CK');
  	htp.formSelectClose;
  	htp.TableRowClose;

  	htp.TableRowOpen;
  	htp.TableHeader('<span style="font-family:&quot;Comic Sans MS&quot;">Fee already payed','left');
  	htp.TableData('<span style="font-family:&quot;Comic Sans MS&quot;">'||TO_CHAR(FeePayedSum(id_member,thisyear)));
  	htp.TableRowClose;

  	htp.TableRowOpen;
  	htp.TableHeader('<span style="font-family:&quot;Comic Sans MS&quot;">COURSE fee:','left');
/*		htp.TableData('<span style="font-family:&quot;Comic Sans MS&quot;">'||htf.formText('P_FEECOURSE',5,null,TO_CHAR(CourseFeeToBePayed('D'))));*/
		htp.print('<TD VALIGN=BOTTOM><span style="font-family:&quot;Comic Sans MS&quot;">');
	  htp.formSelectOpen('P_FEECOURSE');
	  htp.formSelectOption('100');
		htp.formSelectOption('120');
		htp.formSelectOption('170');
		htp.formSelectOption('200');
  	htp.formSelectClose;
 		htp.TableRowClose;

  	htp.TableRowOpen;
  	htp.TableHeader('<span style="font-family:&quot;Comic Sans MS&quot;">Payement Date','left');
  	htp.print('<TD VALIGN=BOTTOM><span style="font-family:&quot;Comic Sans MS&quot;">');
	  htp.formSelectOpen('P_DD');
	  htp.formSelectOption('Day');
		htp.formSelectOption('01');
		htp.formSelectOption('02');
		htp.formSelectOption('03');
		htp.formSelectOption('04');
		htp.formSelectOption('05');
		htp.formSelectOption('06');
		htp.formSelectOption('07');
		htp.formSelectOption('08');
		htp.formSelectOption('09');
		htp.formSelectOption('10');
		htp.formSelectOption('11');
		htp.formSelectOption('12');
		htp.formSelectOption('13');
		htp.formSelectOption('14');
		htp.formSelectOption('15');
		htp.formSelectOption('16');
		htp.formSelectOption('17');
		htp.formSelectOption('18');
		htp.formSelectOption('19');
		htp.formSelectOption('20');
		htp.formSelectOption('21');
		htp.formSelectOption('22');
		htp.formSelectOption('23');
		htp.formSelectOption('24');
		htp.formSelectOption('25');
		htp.formSelectOption('26');
		htp.formSelectOption('27');
		htp.formSelectOption('28');
		htp.formSelectOption('29');
		htp.formSelectOption('30');
		htp.formSelectOption('31');
		htp.formSelectClose;
		htp.formSelectOpen('P_MM');
		htp.formSelectOption('Month');
		htp.formSelectOption('Jan');
		htp.formSelectOption('Feb');
		htp.formSelectOption('Mar');
		htp.formSelectOption('Apr');
		htp.formSelectOption('May');
		htp.formSelectOption('Jun');
		htp.formSelectOption('Jul');
		htp.formSelectOption('Aug');
		htp.formSelectOption('Sep');
		htp.formSelectOption('Oct');
		htp.formSelectOption('Nov');
		htp.formSelectOption('Dec');
		htp.formSelectClose;
  	htp.TableRowClose;

  	htp.TableRowOpen;
  	htp.TableHeader('<span style="font-family:&quot;Comic Sans MS&quot;">Payement Mode','left');
  	htp.print('<TD VALIGN=BOTTOM><span style="font-family:&quot;Comic Sans MS&quot;">');
  	htp.formSelectOpen('P_MODE');
		htp.formSelectOption('UBS');
		htp.formSelectOption('PTT');
		htp.formSelectOption('CASH');
  	htp.formSelectClose;
  	htp.TableRowClose;

		htp.TableClose;
		htp.br;
		htp.br;

  	htp.formHidden('id_member',id_member);

   	htp.centerOpen;
 	 	htp.formSubmit;

 	 	/* change info about member*/

 	 	htp.formClose;
 	 	htp.centerClose;

  	footer;
	END CourseSelectedMemberFile;


/*------------------------------------------------------------------------
Search of a member on described critera (name or firstname even partially)
for see Registration Payements
-------------------------------------------------------------------------*/

	PROCEDURE FeePayementSearch
  	(sname IN members.name%TYPE, sfirstname IN members.firstname%TYPE)
	AS
		CURSOR curs IS
		SELECT *
		FROM members;

		CURSOR l_curs IS
     SELECT id, member_id, licence_id
     FROM members, licences
     WHERE id=member_id;

  	flag NUMBER(1) := 0;
  	v VARCHAR2(23) := null;
  	a VARCHAR2(20) := NULL;

	BEGIN
		header('YCC - Registered payement');
		htp.TableOpen('WIDTH="100%"');
		htp.TableRowOpen;
		htp.TableData('<HR><B><span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#FFFFFF">List of found members</FONT></B><HR>',null,null,null,null,'2','BGCOLOR="#000099"');
		htp.TableRowClose;
		htp.TableClose;
		htp.br;
		htp.br;

		IF (sfirstname IS NULL AND sname IS NULL) THEN
	  	htp.print('<span style="font-family:&quot;Comic Sans MS&quot;">ERROR : You did not specified any Name neither Firstname for the search. Please press the BACK button and redo it');
	  ELSE

	  	htp.TableOpen('WIDTH="100%" NOSAVE');
			htp.TableRowOpen;
			htp.TableHeader('<span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">ID','Left');
			htp.TableHeader('<span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">Name','Left');
			htp.TableHeader('<span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">Firstname','Left');
			htp.TableHeader('<span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">Nationality','Left');
			htp.TableHeader('<span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">Email','Left');
			htp.TableHeader('<span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">Birthday','Left');
			htp.TableHeader('<span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">Licences','Left');
			htp.TableRowClose;

			FOR rec IN curs LOOP
				IF (sfirstname IS NULL ) AND (rec.name LIKE '%'||UPPER(sname)||'%') THEN
					flag := flag + 1;
					htp.TableRowOpen;
					htp.TableData('<span style="font-family:&quot;Comic Sans MS&quot;">'||htf.anchor('https://oraweb.cern.ch/pls/ycc/RegisterPayment.ShowPayements?id_member='||rec.id||'&P_year='||TO_NUMBER(TO_CHAR(sysdate,'YYYY'))||' &P_fee=null&P_course=null&P_feecourse=null','<FONT COLOR="#FF0000">'||rec.id),'Left');
					htp.TableData('<PRE><span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">'||rec.name,'Left');
					htp.TableData('<PRE><span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">'||rec.firstname,'Left');
					htp.TableData('<PRE><span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">'||rec.nationality,'Left');
					htp.TableData('<PRE><span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">'||rec.e_mail,'Left');
					htp.TableData('<PRE><span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">'||rec.birthday,'Left');
					v := NULL;
        	FOR l_rec in l_curs LOOP
        		IF l_rec.member_id = rec.id THEN
        			SELECT nlicence
        			INTO a
              FROM infolicences
             	WHERE infoid =l_rec.licence_id;
              v := v || a || ' ';
						END IF;
        	END LOOP;
        	htp.TableData('<PRE><span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">'||v,'Left');
					htp.TableRowClose;
				ELSIF (sname IS NULL AND rec.firstname LIKE '%'||INITCAP(sfirstname)||'%') THEN
					htp.TableRowOpen;
					htp.TableData('<span style="font-family:&quot;Comic Sans MS&quot;">'||htf.anchor('https://oraweb.cern.ch/pls/ycc/RegisterPayment.CourseSelectedMemberFile?id_member='||rec.id,'<FONT COLOR="#FF0000">'||rec.id),'Left');
					htp.TableData('<PRE><span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">'||rec.name,'Left');
					htp.TableData('<PRE><span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">'||rec.firstname,'Left');
					htp.TableData('<PRE><span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">'||rec.nationality,'Left');
					htp.TableData('<PRE><span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">'||rec.e_mail,'Left');
					htp.TableData('<PRE><span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">'||rec.birthday,'Left');
					v := NULL;
        	FOR l_rec in l_curs LOOP
        		IF l_rec.member_id = rec.id THEN
        			SELECT nlicence
        			INTO a
              FROM infolicences
             	WHERE infoid =l_rec.licence_id;
              v := v || a || ' ';
						END IF;
        	END LOOP;
        	htp.TableData('<PRE><span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">'||v,'Left');
        	htp.TableRowClose;
				ELSIF (rec.name LIKE '%'||UPPER(sname)||'%' AND rec.firstname LIKE '%'||INITCAP(sfirstname)||'%') THEN
					htp.TableRowOpen;
					htp.TableData('<span style="font-family:&quot;Comic Sans MS&quot;">'||htf.anchor('https://oraweb.cern.ch/pls/ycc/RegisterPayment.CourseSelectedMemberFile?id_member='||rec.id,'<FONT COLOR="#FF0000">'||rec.id),'Left');
					htp.TableData('<PRE><span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">'||rec.name,'Left');
					htp.TableData('<PRE><span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">'||rec.firstname,'Left');
					htp.TableData('<PRE><span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">'||rec.nationality,'Left');
					htp.TableData('<PRE><span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">'||rec.e_mail,'Left');
					htp.TableData('<PRE><span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">'||rec.birthday,'Left');
					v := NULL;
        	FOR l_rec in l_curs LOOP
        		IF l_rec.member_id = rec.id THEN
        			SELECT nlicence
        			INTO a
              FROM infolicences
             	WHERE infoid =l_rec.licence_id;
              v := v || a || ' ';
						END IF;
        	END LOOP;
        	htp.TableData('<PRE><span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">'||v,'Left');
 					htp.TableRowClose;
				END IF;
			END LOOP;

			htp.TableClose;
			htp.br;

/*			IF flag = 0 THEN
				htp.hr;
				htp.print('New member?');
			ELSIF flag >= 1 THEN
				htp.hr;
				htp.br;
				htp.print('<B><span style="font-family:&quot;Comic Sans MS&quot;"><CENTER>Click on the ID to select the member name<BR>or '||htf.anchor('http://oraweb03.cern.ch/ycc/owa/RegisterPayment.NewEntry', 'here')||' for a new member</B></CENTER>');
				htp.br;
			END IF;*/
	  END IF;

		footer;


	END FeePayementSearch;

/*------------------------------------------------------------------------
Search of a member on described critera (name or firstname even partially)
for Course Registration Fee Form
-------------------------------------------------------------------------*/

	PROCEDURE CoursePayementSearch
  	(sname IN members.name%TYPE, sfirstname IN members.firstname%TYPE)
	AS
		CURSOR curs IS
		SELECT *
		FROM members;

		CURSOR l_curs IS
     SELECT id, member_id, licence_id
     FROM members, licences
     WHERE id=member_id;

  	flag NUMBER(1) := 0;
  	v VARCHAR2(23) := null;
  	a VARCHAR2(20) := NULL;

	BEGIN
		header('CERN Yachting Club');
		htp.TableOpen('WIDTH="100%"');
		htp.TableRowOpen;
		htp.TableData('<HR><B><span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#FFFFFF">List of found members</FONT></B><HR>',null,null,null,null,'2','BGCOLOR="#000099"');
		htp.TableRowClose;
		htp.TableClose;
		htp.br;
		htp.br;

		IF (sfirstname IS NULL AND sname IS NULL) THEN
	  	htp.print('<span style="font-family:&quot;Comic Sans MS&quot;">ERROR : You did not specified any Name neither Firstname for the search. Please press the BACK button and redo it');
	  ELSE

	  	htp.TableOpen('WIDTH="100%" NOSAVE');
			htp.TableRowOpen;
			htp.TableHeader('<span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">ID','Left');
			htp.TableHeader('<span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">Name','Left');
			htp.TableHeader('<span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">Firstname','Left');
			htp.TableHeader('<span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">Nationality','Left');
			htp.TableHeader('<span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">Email','Left');
			htp.TableHeader('<span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">Birthday','Left');
			htp.TableHeader('<span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">Licences','Left');
			htp.TableRowClose;

			FOR rec IN curs LOOP
				IF (sfirstname IS NULL ) AND (rec.name LIKE '%'||UPPER(sname)||'%') THEN
					flag := flag + 1;
					htp.TableRowOpen;
					htp.TableData('<span style="font-family:&quot;Comic Sans MS&quot;">'||htf.anchor('https://oraweb.cern.ch/pls/ycc/RegisterPayment.CourseSelectedMemberFile?id_member='||rec.id,'<FONT COLOR="#FF0000">'||rec.id),'Left');
					htp.TableData('<PRE><span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">'||rec.name,'Left');
					htp.TableData('<PRE><span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">'||rec.firstname,'Left');
					htp.TableData('<PRE><span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">'||rec.nationality,'Left');
					htp.TableData('<PRE><span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">'||rec.e_mail,'Left');
					htp.TableData('<PRE><span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">'||rec.birthday,'Left');
					v := NULL;
        	FOR l_rec in l_curs LOOP
        		IF l_rec.member_id = rec.id THEN
        			SELECT nlicence
        			INTO a
              FROM infolicences
             	WHERE infoid =l_rec.licence_id;
              v := v || a || ' ';
						END IF;
        	END LOOP;
        	htp.TableData('<PRE><span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">'||v,'Left');
					htp.TableRowClose;
				ELSIF (sname IS NULL AND rec.firstname LIKE '%'||INITCAP(sfirstname)||'%') THEN
					htp.TableRowOpen;
					htp.TableData('<span style="font-family:&quot;Comic Sans MS&quot;">'||htf.anchor('https://oraweb.cern.ch/pls/ycc/RegisterPayment.CourseSelectedMemberFile?id_member='||rec.id,'<FONT COLOR="#FF0000">'||rec.id),'Left');
					htp.TableData('<PRE><span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">'||rec.name,'Left');
					htp.TableData('<PRE><span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">'||rec.firstname,'Left');
					htp.TableData('<PRE><span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">'||rec.nationality,'Left');
					htp.TableData('<PRE><span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">'||rec.e_mail,'Left');
					htp.TableData('<PRE><span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">'||rec.birthday,'Left');
					v := NULL;
        	FOR l_rec in l_curs LOOP
        		IF l_rec.member_id = rec.id THEN
        			SELECT nlicence
        			INTO a
              FROM infolicences
             	WHERE infoid =l_rec.licence_id;
              v := v || a || ' ';
						END IF;
        	END LOOP;
        	htp.TableData('<PRE><span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">'||v,'Left');
        	htp.TableRowClose;
				ELSIF (rec.name LIKE '%'||UPPER(sname)||'%' AND rec.firstname LIKE '%'||INITCAP(sfirstname)||'%') THEN
					htp.TableRowOpen;
					htp.TableData('<span style="font-family:&quot;Comic Sans MS&quot;">'||htf.anchor('https://oraweb.cern.ch/pls/ycc/RegisterPayment.CourseSelectedMemberFile?id_member='||rec.id,'<FONT COLOR="#FF0000">'||rec.id),'Left');
					htp.TableData('<PRE><span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">'||rec.name,'Left');
					htp.TableData('<PRE><span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">'||rec.firstname,'Left');
					htp.TableData('<PRE><span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">'||rec.nationality,'Left');
					htp.TableData('<PRE><span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">'||rec.e_mail,'Left');
					htp.TableData('<PRE><span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">'||rec.birthday,'Left');
					v := NULL;
        	FOR l_rec in l_curs LOOP
        		IF l_rec.member_id = rec.id THEN
        			SELECT nlicence
        			INTO a
              FROM infolicences
             	WHERE infoid =l_rec.licence_id;
              v := v || a || ' ';
						END IF;
        	END LOOP;
        	htp.TableData('<PRE><span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">'||v,'Left');
 					htp.TableRowClose;
				END IF;
			END LOOP;

			htp.TableClose;
			htp.br;

/*			IF flag = 0 THEN
				htp.hr;
				htp.print('New member?');
			ELSIF flag >= 1 THEN
				htp.hr;
				htp.br;
				htp.print('<B><span style="font-family:&quot;Comic Sans MS&quot;"><CENTER>Click on the ID to select the member name<BR>or '||htf.anchor('http://oraweb03.cern.ch/ycc/owa/RegisterPayment.NewEntry', 'here')||' for a new member</B></CENTER>');
				htp.br;
			END IF;*/
	  END IF;

		footer;
	END CoursePayementSearch;

/* Search for a payement of a member */

	PROCEDURE AllRegisterdPayementSearch
	  	(sname IN members.name%TYPE, sfirstname IN members.firstname%TYPE)
	AS
		CURSOR curs IS
		SELECT *
		FROM members;

		CURSOR l_curs IS
    SELECT id, member_id, licence_id
    FROM members, licences
    WHERE id=member_id;

  	flag NUMBER(1) := 0;
  	v VARCHAR2(23) := null;
  	a VARCHAR2(20) := NULL;

	BEGIN
		header('CERN Yachting Club');
		htp.TableOpen('WIDTH="100%"');
		htp.TableRowOpen;
		htp.TableData('<HR><B><span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#FFFFFF">List of found members</FONT></B><HR>',null,null,null,null,'2','BGCOLOR="#000099"');
		htp.TableRowClose;
		htp.TableClose;
		htp.br;
		htp.br;

		IF (sfirstname IS NULL AND sname IS NULL) THEN
	  	htp.print('<span style="font-family:&quot;Comic Sans MS&quot;">ERROR : You did not specified any Name neither Firstname for the search. Please press the BACK button and redo it');
	  ELSE

	  	htp.TableOpen('WIDTH="100%" NOSAVE');
			htp.TableRowOpen;
			htp.TableHeader('<span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">ID','Left');
			htp.TableHeader('<span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">Name','Left');
			htp.TableHeader('<span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">Firstname','Left');
			htp.TableHeader('<span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">Nationality','Left');
			htp.TableHeader('<span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">Email','Left');
			htp.TableHeader('<span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">Birthday','Left');
			htp.TableHeader('<span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">Licences','Left');
			htp.TableRowClose;

			FOR rec IN curs LOOP
				IF (sfirstname IS NULL ) AND (rec.name LIKE '%'||UPPER(sname)||'%') THEN
					flag := flag + 1;
					htp.TableRowOpen;
					htp.TableData('<span style="font-family:&quot;Comic Sans MS&quot;">'||htf.anchor('https://oraweb.cern.ch/pls/ycc/RegisterPayment.ListPaymentSelectedMemberFile?id_member='||rec.id,'<FONT COLOR="#FF0000">'||rec.id),'Left');
					htp.TableData('<PRE><span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">'||rec.name,'Left');
					htp.TableData('<PRE><span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">'||rec.firstname,'Left');
					htp.TableData('<PRE><span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">'||rec.nationality,'Left');
					htp.TableData('<PRE><span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">'||rec.e_mail,'Left');
					htp.TableData('<PRE><span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">'||rec.birthday,'Left');
					v := NULL;
        	FOR l_rec in l_curs LOOP
        		IF l_rec.member_id = rec.id THEN
        			SELECT nlicence
        			INTO a
              FROM infolicences
             	WHERE infoid =l_rec.licence_id;
              v := v || a || ' ';
						END IF;
        	END LOOP;
        	htp.TableData('<PRE><span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">'||v,'Left');
					htp.TableRowClose;
				ELSIF (sname IS NULL AND rec.firstname LIKE '%'||INITCAP(sfirstname)||'%') THEN
					htp.TableRowOpen;
					htp.TableData('<span style="font-family:&quot;Comic Sans MS&quot;">'||htf.anchor('https://oraweb.cern.ch/pls/ycc/RegisterPayment.ListPaymentSelectedMemberFile?id_member='||rec.id,'<FONT COLOR="#FF0000">'||rec.id),'Left');
					htp.TableData('<PRE><span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">'||rec.name,'Left');
					htp.TableData('<PRE><span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">'||rec.firstname,'Left');
					htp.TableData('<PRE><span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">'||rec.nationality,'Left');
					htp.TableData('<PRE><span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">'||rec.e_mail,'Left');
					htp.TableData('<PRE><span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">'||rec.birthday,'Left');
					v := NULL;
        	FOR l_rec in l_curs LOOP
        		IF l_rec.member_id = rec.id THEN
        			SELECT nlicence
        			INTO a
              FROM infolicences
             	WHERE infoid =l_rec.licence_id;
              v := v || a || ' ';
						END IF;
        	END LOOP;
        	htp.TableData('<PRE><span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">'||v,'Left');
        	htp.TableRowClose;
				ELSIF (rec.name LIKE '%'||UPPER(sname)||'%' AND rec.firstname LIKE '%'||INITCAP(sfirstname)||'%') THEN
					htp.TableRowOpen;
					htp.TableData('<span style="font-family:&quot;Comic Sans MS&quot;">'||htf.anchor('https://oraweb.cern.ch/pls/ycc/RegisterPayment.ListPaymentSelectedMemberFile?id_member='||rec.id,'<FONT COLOR="#FF0000">'||rec.id),'Left');
					htp.TableData('<PRE><span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">'||rec.name,'Left');
					htp.TableData('<PRE><span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">'||rec.firstname,'Left');
					htp.TableData('<PRE><span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">'||rec.nationality,'Left');
					htp.TableData('<PRE><span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">'||rec.e_mail,'Left');
					htp.TableData('<PRE><span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">'||rec.birthday,'Left');
					v := NULL;
        	FOR l_rec in l_curs LOOP
        		IF l_rec.member_id = rec.id THEN
        			SELECT nlicence
        			INTO a
              FROM infolicences
             	WHERE infoid =l_rec.licence_id;
              v := v || a || ' ';
						END IF;
        	END LOOP;
        	htp.TableData('<PRE><span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">'||v,'Left');
 					htp.TableRowClose;
				END IF;
			END LOOP;

			htp.TableClose;
			htp.br;

/*			IF flag = 0 THEN
				htp.hr;
				htp.print('New member?');
			ELSIF flag >= 1 THEN
				htp.hr;
				htp.br;
				htp.print('<B><span style="font-family:&quot;Comic Sans MS&quot;"><CENTER>Click on the ID to select the member name<BR>or '||htf.anchor('http://oraweb03.cern.ch/ycc/owa/RegisterPayment.NewEntry', 'here')||' for a new member</B></CENTER>');
				htp.br;
			END IF;*/
	  END IF;

		footer;

	END AllRegisterdPayementSearch;


/*------------------------------------------------------------------
Registration Fee Main Program (common for Annual and Course fee)
-------------------------------------------------------------------*/


	PROCEDURE RegisterFeesForm ( queryform IN VARCHAR2)
	IS

	BEGIN
		header('CERN YCC Registration '||queryform ||' fees form');

  	IF queryform = 'Course' THEN
  		htp.formOpen('https://oraweb.cern.ch/pls/ycc/RegisterPayment.CoursePayementSearch');
  	ELSIF queryform = 'ListPayement' THEN
  		htp.formOpen('https://oraweb.cern.ch/pls/ycc/RegisterPayment.AllRegisterdPayementSearch');
  	END IF;

		htp.TableOpen('WIDTH="100%"');
  	htp.TableRowOpen;
  	htp.TableData('<span style="font-family:&quot;Comic Sans MS&quot;">'||htf.hr||htf.bold('<font color="#FFFFFF">Search for a YCC member</font>')||htf.hr,NULL,NULL,NULL,NULL,2,'BGCOLOR="#000090"');
  	htp.TableRowClose;
  	htp.TableRowOpen;
  	htp.TableHeader('<span style="font-family:&quot;Comic Sans MS&quot;">'||'Family Name:','LEFT',NULL,NULL,NULL,NULL,'WIDTH="20%"');
		htp.TableData('<span style="font-family:&quot;Comic Sans MS&quot;">'||htf.formText('sname',25,null,null),null,null,null,null,null,'VALIGN=BOTTOM');
		htp.TableRowClose;
  	htp.TableRowOpen;
 		htp.TableHeader('<span style="font-family:&quot;Comic Sans MS&quot;">'||'First Name:','LEFT',NULL,NULL,NULL,NULL,'WIDTH="20%"');
		htp.TableData('<span style="font-family:&quot;Comic Sans MS&quot;">'||htf.formText('sfirstname',25,null,null),null,null,null,null,null,'VALIGN=BOTTOM');
		htp.TableRowClose;
		htp.TableRowOpen;
 	 	htp.TableData('&nbsp;');
 	 	htp.TableRowClose;
 	 	htp.TableClose;

 	 	htp.centerOpen;
 	 	htp.formSubmit;
 	 	htp.formReset;
 	 	htp.formClose;
 	 	htp.centerClose;

  	footer;

	END RegisterFeesForm;

/*----------------------------------------------------------------------
	List New Members that didn't pay yet
-----------------------------------------------------------------------*/

	PROCEDURE ListNewMembers
	IS
		CURSOR curs IS
		SELECT *
		FROM members
		WHERE member_entrance = TO_CHAR(sysdate, 'YYYY');

		CURSOR p_curs IS
			SELECT member_id
			FROM feesrecords
			WHERE year_f = 2008;

		payed BOOLEAN := FALSE;

	BEGIN
		header('YCC - List new members '||TO_CHAR(sysdate, 'YYYY'));
		htp.TableOpen('WIDTH="100%"');
		htp.TableRowOpen;
		htp.TableData('<HR><B><span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#FFFFFF">List of found members</FONT></B><HR>',null,null,null,null,'2','BGCOLOR="#000099"');
		htp.TableRowClose;
		htp.TableClose;
		htp.br;
		htp.br;

		htp.TableOpen('WIDTH="100%" NOSAVE');
		htp.TableRowOpen;
		htp.TableHeader('<span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">ID','Left');
		htp.TableHeader('<span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">Name','Left');
		htp.TableHeader('<span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">Firstname','Left');
		htp.TableHeader('<span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">Nationality','Left');
		htp.TableHeader('<span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">Email','Left');
		htp.TableHeader('<span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">Birthday','Left');
		htp.TableHeader('<span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">Membership','Left');
		htp.TableRowClose;

		FOR rec IN curs LOOP
			payed := FALSE;
			FOR p_rec IN p_curs LOOP
				IF p_rec.member_id = rec.id THEN
					payed := TRUE;
				END IF;
			END LOOP;
			IF NOT payed  THEN
					htp.TableRowOpen;
					htp.TableData('<span style="font-family:&quot;Comic Sans MS&quot;">'||htf.anchor('https://oraweb.cern.ch/pls/ycc/RegisterPayment.SelectedMemberFile?id_member='||rec.id,'<FONT COLOR="#FF0000">'||rec.id),'Left');
					htp.TableData('<PRE><span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">'||rec.name,'Left');
					htp.TableData('<PRE><span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">'||rec.firstname,'Left');
					htp.TableData('<PRE><span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">'||rec.nationality,'Left');
					htp.TableData('<PRE><span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">'||rec.e_mail,'Left');
					htp.TableData('<PRE><span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">'||rec.birthday,'Left');
					htp.TableData('<PRE><span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#3366FF">'||rec.membership,'Left');
					htp.TableRowClose;
			END IF;
		END LOOP;
		htp.TableClose;
		htp.br;
		footer;
	END ListNewMembers;



/*----------------------------------------------------------------------
MAIN FRONT PAGE
-----------------------------------------------------------------------*/

	PROCEDURE RegPayFees
	AS
	BEGIN

			header('YCC - Register Payments');
			htp.TableOpen('WIDTH="100%"');
  		htp.TableRowOpen;
  		htp.TableData('<span style="font-family:&quot;Comic Sans MS&quot;">'||htf.hr||htf.bold('<font color="#FFFFFF">Search for a YCC member</font>')||htf.hr,NULL,NULL,NULL,NULL,2,'BGCOLOR="#000090"');
  		htp.TableRowClose;
  		htp.TableClose;

  		htp.ulistOpen;
  		htp.listItem(htf.anchor('https://oraweb.cern.ch/pls/ycc/RegisterPayment.AnnualFeesForm','<span style="font-family:&quot;Comic Sans MS&quot;">Click here if you want to register an Annual Fee'));
/*  		htp.listItem(htf.anchor('http://oraweb03.cern.ch/ycc/owa/RegisterPayment.RegisterFeesForm?queryform=Course','<span style="font-family:&quot;Comic Sans MS&quot;">Click here if you want to register an Course Fee'));
  *//*		htp.listItem(htf.anchor('http://oraweb03.cern.ch/ycc/owa/RegisterPayment.RegisterFeesForm?queryform=ListPayement','<span style="font-family:&quot;Comic Sans MS&quot;">Click here if you want to know about a member payement'));
  /*		htp.listItem(htf.anchor('http://oraweb03.cern.ch/ycc/owa/RegisterPayment.ListNewMembers','<span style="font-family:&quot;Comic Sans MS&quot;">Click here if you want to list new members whose payement is not registered yet'));
  */		htp.listItem(htf.anchor('https://oraweb.cern.ch/pls/ycc/RegisterPayment.ListALLPayement','<span style="font-family:&quot;Comic Sans MS&quot;">Click here if you want to know about ALL payement'));
        htp.ulistClose;

			footer;

		END RegPayFees;

	FUNCTION authorize
	RETURN BOOLEAN IS
			p_user VARCHAR2(10);
			p_pwd  VARCHAR2(10);
	BEGIN
 		-- Set a login realm
 		owa_sec.set_protection_realm('Register Payment Login');
 		p_user := UPPER(owa_sec.get_user_id);
 		p_pwd  := owa_sec.get_password;
 		-- Set the valid username and password, and return
 		-- TRUE if the user enters the correct values in his login dialog
 		IF p_user = 'YCC' AND p_pwd = 'fees08' THEN
  		RETURN TRUE;
 		ELSE
  		RETURN FALSE;
 		END IF;
	END authorize;


	PROCEDURE startup IS
		p_status BOOLEAN;
	BEGIN
	 -- Call the authorize function
	 p_status := authorize;
	 -- Test if autenticatin has been successfull and print out a message.
	 	IF p_status = TRUE THEN
  		RegPayFees;
   	ELSE
  		NULL;
 		END IF;
 	END;






END RegisterPayment;

/
--------------------------------------------------------
--  DDL for Package Body RENEWALFORMS
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "RENEWALFORMS" IS

/**************************************************************************************

**************************************************************************************/
	FUNCTION Nationality ( nat members.nationality%TYPE, lang members.lang1%TYPE)
	RETURN VARCHAR2 IS

	natname VARCHAR2(15);

	BEGIN

		IF lang = 'F' THEN
			SELECT fname
			INTO natname
			FROM Nationalities
			WHERE Natid=nat;
		ELSE
			SELECT ename
			INTO natname
			FROM Nationalities
			WHERE Natid=nat;
		END IF;
		RETURN natname;

	END Nationality;

/**************************************************************************************

**************************************************************************************/
	FUNCTION Font (fsize NUMBER)
	RETURN VARCHAR2 IS
	BEGIN
		RETURN '<span style="font-family:&quot;Comic Sans MS&quot;"><font size=-2>';
	END;

	FUNCTION YCCaddress
	RETURN VARCHAR2 IS
	BEGIN
		RETURN '<span style="font-family:&quot;Comic Sans MS&quot;"><B>Elena Gianolio</br>CERN Div PH-TH<br>Mailbox C01600<br>CH-1211 GENEVE 23</B>';
	END;



	FUNCTION Baccount
	RETURN VARCHAR2 IS
	BEGIN
		RETURN 'Bank Account : <br><br>UBS Genève-CERN <br>Compte: 279-C7754544.0 <br>Clearing no. : 279<br>Account no. : C7754544.0';
	END;

	FUNCTION PTTaccount
	RETURN VARCHAR2 IS
	BEGIN
		RETURN 'Post Account : <br><br>PTT<br>Compte: 12-13854-9<br>Yachting Club du CERN<br>Genéve';
	END;

/**************************************************************************************

**************************************************************************************/

  FUNCTION MembershipList (membership_id IN members.membership%TYPE, lang IN VARCHAR2)
	RETURN varchar2
	IS
	BEGIN
		IF lang = 'E' THEN
		  IF membership_id = 'AS' THEN
		    RETURN ('Active Senior');
		  ELSIF membership_id = 'AJ' THEN
		  	RETURN  ('Active Junior');
		  ELSIF membership_id = 'FM' THEN
		  	RETURN  ('Friend member');
		  ELSIF membership_id = 'H' THEN
		  	RETURN ('Honorary');
		  ELSIF membership_id = 'T' THEN
		  	RETURN ('Temporary');
		  ELSE
		  	RETURN ('Error');
		  END IF;
		ELSE /* lang='F' */
		  IF membership_id = 'AS' THEN
		    RETURN ('Active Senior');
		  ELSIF membership_id = 'AJ' THEN
		  	RETURN  ('Active Junior');
		  ELSIF membership_id = 'FM' THEN
		  	RETURN  ('Membre Ami');
		  ELSIF membership_id = 'H' THEN
		  	RETURN ('Membre Honoraire');
		  ELSIF membership_id = 'T' THEN
		  	RETURN ('Temporaire');
		  ELSE
		  	RETURN ('Error');
		  END IF;
		END IF;
	END;

/**************************************************************************************

**************************************************************************************/

PROCEDURE Renewal(mid NUMBER) IS

		CURSOR l_curs IS
			SELECT id, member_id, licence_id
			FROM members, licences
			WHERE id=member_id;

		v VARCHAR2(25);
		a VARCHAR2(2);

		rec members%ROWTYPE;

		mlogin web_logon%ROWTYPE;

		mfee fees.annual_fee%TYPE := 0;

	BEGIN
	  htp.HtmlOpen;
	  htp.HeadOpen;
	  htp.Title('Renewal Form');
	  htp.meta(null,'Author','Elena Gianolio');
	  htp.meta(null,'Description','YCC');
	  htp.HeadClose;

	  SELECT *
	  	INTO rec
	  	FROM members
	  	WHERE members.id=mid;

	  SELECT *
	  	INTO mlogin
	  	FROM web_logon
	  	WHERE member_id=rec.id;

		SELECT annual_fee
			INTO mfee
			FROM fees
			WHERE cat_id = rec.membership;

	  IF rec.lang1 = 'F' THEN
	  	htp.anchor(null,null,rec.name||'_'||rec.firstname);
	 		htp.BodyOpen(null,'text="#000000" bgcolor="silver" link="#0000FF" vlink="#000090" alink="#00BB00" ');
			htp.TableOpen('BORDER=0',null,null,null,'COLS=2 WIDTH="100%" NOSAVE');
			htp.TableRowOpen;
			htp.TableData(htf.img('http://cern.ch/club-yachting/ycclogo.gif',null,null,null,'height=60 width=56'),null,null,null,null,null,'WIDTH="10%"');
			htp.TableData(htf.header(2,'<FONT COLOR="#FF0000">'||htf.bold(htf.center('Yachting Club CERN<BR> Renouvellement d''inscription pour la saison '||TO_CHAR(sysdate,'YYYY')))));
			htp.TableRowClose;
			htp.TableClose;

	  	htp.hr;
	  	htp.print(Font(-1)||htf.bold(rec.name||', '||rec.firstname)||htf.br||'Bonjour, Si vous souhaitez vous réinscrire pour la saison '||TO_CHAR(sysdate,'YYYY')||', veuillez svp, ');

	  	IF mfee != 0 THEN
	  		htp.print('verser '||htf.bold(TO_CHAR(mfee)||' CHF')||' sur un des comptes du YCC :  ');
	  		htp.br;htp.br;
	  		htp.TableOpen('BORDER=0',null,null,null,'COLS=2 WIDTH="100%" NOSAVE');
			  htp.TableRowOpen;
				htp.TableData(Font(-1)||htf.bold(Baccount),null,NULL,NULL,NULL,NULL,'WIDTH="30%"');
	  		htp.TableData(Font(-1)||htf.bold(PTTaccount),null,NULL,NULL,NULL,NULL,'WIDTH="30%"');
	  		htp.TableRowClose;
	  		htp.TableClose;
	  	END IF;

			htp.print('Merci aussi de verifier si les donnes qui vous concernent, sont justes, et eventuellement ajouter les informations qui manquent ou apporter les corrections nécessaires
	  		                   <br> En cas de changements vous pouvez acceder directement sur le site : <br>
	  		                   <br><center><b> https://cern.ch/club-yachting/cgi-bin/res/member_info.pl</b></center>
	  		                   <br>ou merci de marquer directement les changements, signer cette feuille et la renvoyer dès que possible à  :<BR> ');
	  	htp.print(htf.center(YCCaddress));

      htp.print(htf.bold('A noter aussi')||' spécifiez par quel moyen vous désirez recevoir les communications YCC (émail, poste, etc) - Par défaut, l''YCC envoie ses communications par émail.');
	  	htp.br;

	  	htp.hr;
	  	htp.print('<center>'||htf.bold('Ci-dessous, une copie de votre fichier: SVP remplissez les champs vides.'));
	  	htp.br;
	  	htp.print('(Toutes les informations personnelles resteront réservées à la base de donnée du YCC)</center>');
			htp.br;

	  	htp.print(htf.bold(rec.name||', '||rec.firstname));
	  	htp.br;htp.br;
	  	htp.print(htf.bold('Votre Login est: ')||mlogin.logon_id);
	  	htp.br;
	  	htp.print(htf.bold('Votre Password est: ')||mlogin.logon_passwd);
	  	htp.br;
	  	htp.print(htf.bold('<I>Rappelez-vous que cette informatione est strictement personelle !!</I>'));
	  	htp.br;htp.br;
	  	htp.print('Votre langue préférée :'||htf.bold('Francais'));
	  	htp.br;
	  	htp.print('Vous êtes membre  :'||htf.bold(MembershipList(rec.membership,rec.lang1)));
	  	htp.br;
	  	htp.print('Votre date de naissance(obligatoire pour les Juniors)  :'||htf.bold(TO_CHAR(rec.birthday,'DD-MM-YYYY')));
	  	htp.br;
	  	htp.print('Votre nationalité :'||htf.bold(Nationality(rec.nationality,rec.lang1)));
	  	htp.br;
	  	htp.print('Votre moyen préféré pour communications :');
	  	IF rec.mail_preference = 'E' THEN
	  		htp.print(htf.bold('Message électronique'));
	  	ELSE
	  		IF rec.favourite_mailing_post = 'h' THEN
	  			htp.print(htf.bold('Poste a votre adresse privée'));
	  		ELSE
	  			htp.print(htf.bold('Poste a votre adresse professionelle'));
	  		END IF;
	  	END IF;
	  	htp.br;
	  	htp.print('Vous êtes catégorie  :');
	  	IF rec.category = 'C' THEN
	  		htp.print(htf.bold('membre du CERN')||' (employ&eacute;,visiteur,...)');
	  	ELSIF rec.category = 'R' THEN
	  		htp.print(htf.bold('membre lie au CERN')||' (retrait&eacute;s du CERN, Famille de ''Cernois'',...)');
	  	ELSE
	  		htp.print(htf.bold('membre externe'));
	  	END IF;
	  	htp.br;
	  	IF rec.e_mail IS NULL THEN
				htp.print('Vous n''avez pas d''address electronique');
			ELSE
				htp.print('Votre Adresse electronique:  '||htf.bold(rec.e_mail));
			END IF;
	  	htp.br;
	  	htp.br;


			IF rec.favourite_mailing_post = 'h' THEN
	  			htp.print('Votre Adresse (privée):');
	  			htp.br;
	  			htp.print('<B>'||rec.home_addr||'<br>'||rec.home_state||'-'||rec.home_towncode||' '||rec.home_town||'</B>');
	  	ELSE
	  			htp.print('Votre Adresse (professionelle):');
	  			htp.br;
	  			IF rec.category = 'C' THEN
	  				htp.print('<B>CERN <br>'||rec.work_address1||'<br>'||rec.work_address2||'<br>'||rec.work_state||'-'||rec.work_towncode||' '||rec.work_town||'</B>');
	  			ELSE
	  				htp.print('<B>'||rec.work_address1||'<br>'||rec.work_address2||'<br>'||rec.work_state||'-'||rec.work_towncode||' '||rec.work_town||'</B>');
	  			END IF;
	  	END IF;
			htp.br;
			htp.br;
			htp.print('Tel privée: <B>'||rec.home_phone||'</B>');
			htp.br;
			htp.print('Tel professionelle:<B> '||rec.work_phone||'</B>');
			htp.br;
			htp.print('Tel portable: ');
			htp.br;
			htp.br;

			v := NULL;
	    FOR l_rec in l_curs LOOP
	    	IF l_rec.member_id = rec.id AND l_rec.licence_id > 0 THEN
	    		SELECT nlicence
	    		INTO a
	    		FROM infolicences
	    		WHERE infoid =l_rec.licence_id;
	    			v := v || a || ' ';
	    	END IF;
	    END LOOP;
	    IF v IS NOT NULL THEN
	    	htp.print('Vous d&eacute;tenez les licences YCC suivantes :  '||htf.bold( v));
	    	htp.br;
	    ELSE
	    	htp.print('Vous ne d&eacute;tenez pas des licences YCC ');
	    	htp.br;
	    END IF;

	    htp.br;
	    htp.br;
			htp.TableOpen(null,null,null,null,'COLS=2 WIDTH="100%" NOSAVE');
	  	htp.TableRowOpen;
	  	htp.TableData(Font(-1)||htf.underline('Date'),'CENTER');
	  	htp.TableData(Font(-1)||htf.underline('Signature'),'CENTER');
	  	htp.TableRowClose;
	  	htp.TableClose;

/************************************
        ENGLISH version
************************************/
   ELSE
	   		htp.anchor(null,null,rec.name||'_'||rec.firstname);
	 			htp.BodyOpen(null,'TEXT="#000000" bgcolor="silver" link="#0000FF" vlink="#000090" alink="#00BB00" ');
				htp.TableOpen('BORDER=0',null,null,null,'COLS=2 WIDTH="100%" NOSAVE');
				htp.TableRowOpen;
				htp.TableData(htf.img('http://cern.ch/club-yachting/ycclogo.gif',null,null,null,'height=60 width=56'),null,null,null,null,null,'WIDTH="10%"');
				htp.TableData(htf.header(2,htf.bold('<FONT COLOR="#FF0000">'||htf.center('Yachting Club CERN<BR> Membership renewal for the season '||TO_CHAR(sysdate,'YYYY')))));
				htp.TableRowClose;
				htp.TableClose;

	  		htp.hr;
	  		htp.print(Font(-1)||htf.bold(rec.name||', '||rec.firstname)||'<BR> Hello, If you wish to re-join the YCC for the season  '||TO_CHAR(sysdate,'YYYY')||' please, ');
	  		IF mfee != 0 THEN
	  			htp.print(Font(-1)||'pay the annual fee of <B>'||TO_CHAR(mfee)||' CHF</B> by crediting one of the YCC accounts:');
		  		htp.br;
	  			htp.TableOpen;
	  			htp.TableRowOpen;
		  		htp.TableData(Font(-1)||htf.bold(Baccount),null,NULL,NULL,NULL,NULL,'WIDTH="30%"');
	  			htp.TableData(Font(-1)||htf.bold(PTTaccount),null,NULL,NULL,NULL,NULL,'WIDTH="30%"');
	  			htp.TableRowClose;
		  		htp.TableClose;
	 			END IF;
htp.br;
	  		htp.print('Thanks also to check your file and to add the missing information or modify what necessary directly on the web site : <br>
	  							<br><b> https://cern.ch/club-yachting/cgi-bin/res/member_info.pl</b><br>
	  		          <br>or sending this form corrected and signed by you to ');
	  		htp.br;
	  		htp.print(YCCaddress);
				htp.br;

	  		htp.hr;
	  		htp.print('<center>'||Font(-1)||htf.bold('The following is a copy of your file: PLEASE fill in the empty fields.'));
	  		htp.br;
	  		htp.print('(All personal information will be strictly reserved to the YCC database)</center>');
	  		htp.br;

		  	htp.print(htf.bold(rec.name||', '||rec.firstname));
	  		htp.br;
	  		htp.print('<B>Your Login is: </B>'||mlogin.logon_id);
				htp.br;
				htp.print('<B>Your Password is: </B> '||mlogin.logon_passwd);
				htp.br;
				htp.print('<B><I>Note that this informations is private !!</I></B>');
				htp.br;
				htp.br;
	  		htp.print('Your preferred language is  :'||htf.bold('English'));
		  	htp.br;
		  	htp.print('Your membership is  :'||htf.bold(MembershipList(rec.membership,rec.lang1)));
		  	htp.br;
		  	htp.print('Your birth date is (mandatory for Juniors)  :'||htf.bold(TO_CHAR(rec.birthday,'DD-MM-YYYY')));
		  	htp.br;
		  	htp.print('Your nationality is  :'||htf.bold(Nationality(rec.nationality,rec.lang1)));
		  	htp.br;
		  	htp.print('Your preferred means of communication is  :');
	  		IF rec.mail_preference = 'E' THEN
	  			htp.print(htf.bold('E_mail'));
	  		ELSE
	  			IF rec.favourite_mailing_post = 'h' THEN
	  				htp.print(htf.bold('Mail to your home address'));
	  			ELSE
	  				htp.print(htf.bold('Mail to your work address'));
	  			END IF;
	  		END IF;
	  		htp.br;
		  	htp.print('You are in category  :');
		  	IF rec.category = 'C' THEN
		  		htp.print(htf.bold('CERN member')||' (employee, visitor, ...');
		  	ELSIF rec.category = 'R' THEN
		  		htp.print(htf.bold('member with relation to CERN')||' (retired from CERN,family at CERN,...)');
		  	ELSE
		  		htp.print(htf.bold('external member'));
		  	END IF;
		  	htp.br;
		  					IF rec.e_mail IS NULL THEN
					htp.print('You do not have any Email address');
				ELSE
					htp.print('Your Email address is :  '||htf.bold(rec.e_mail));
		  	END IF;
				htp.br;
  			htp.br;
		  	htp.br;

		  	IF rec.favourite_mailing_post = 'h' THEN
	  			htp.print('Your address (home):');
	  			htp.br;
	  			htp.print('<B>'||rec.home_addr||'<br>'||rec.home_state||'-'||rec.home_towncode||' '||rec.home_town||'</B>');
	  		ELSE
	  			htp.print('Your address (work):');
	  			htp.br;
	  			IF rec.category = 'C' THEN
	  				htp.print('<B>CERN <br>'||rec.work_address1||'<br>'||rec.work_address2||'<br>'||rec.work_state||'-'||rec.work_towncode||' '||rec.work_town||'</B>');
	  			ELSE
	  				htp.print('<B>'||rec.work_address1||'<br>'||rec.work_address2||'<br>'||rec.work_state||'-'||rec.work_towncode||' '||rec.work_town||'</B>');
	  			END IF;
	  		END IF;
				htp.br;
				htp.br;
				htp.print('Home phone: <B>'||rec.home_phone||'</B>');
				htp.br;
				htp.print('Work phone:<B> '||rec.work_phone||'</B>');
				htp.br;
				htp.print('Cellular phone: ');
				htp.br;
				htp.br;

				v := NULL;
				FOR l_rec in l_curs LOOP
					IF l_rec.member_id = rec.id THEN
						SELECT nlicence
						INTO a
						FROM infolicences
						WHERE infoid =l_rec.licence_id;
							v := v || a || ' ';
					END IF;
				END LOOP;
				IF v IS NOT NULL THEN
					htp.print(Font(-1)||'You hold the following YCC licences :  '|| htf.bold( v));
					htp.br;
				ELSE
		      htp.print(Font(-1)||'You do not have any YCC licence ');
					htp.br;
		    END IF;

/*				htp.print(Font(-1)||'You hold the lac/see licence : ');
				htp.br;*/


				htp.br;
				htp.br;
				htp.TableOpen(null,null,null,null,'COLS=2 WIDTH="100%" NOSAVE');
		  	htp.TableRowOpen;
		  	htp.TableData(htf.underline(Font(-1)||'Date'),'CENTER');
		  	htp.TableData(htf.underline(Font(-1)||'Signature'),'CENTER');
		  	htp.TableRowClose;
		  	htp.TableClose;

		END IF; /* on LANG1*/
	  htp.BodyClose;
	  htp.HtmlClose;


END Renewal;

/**************************************************************************************

**************************************************************************************/

	PROCEDURE RenewAllMembers IS

		CURSOR curs IS
			SELECT id,name,firstname,lang1,members.membership,birthday,category,nationality,work_address1,work_address2,work_state,work_towncode,work_town,work_phone,home_addr,home_towncode,home_town,home_state,home_phone,e_mail,mail_preference,favourite_mailing_post
			FROM members, feesrecords
			WHERE id=member_id  AND year_f = TO_NUMBER(TO_CHAR(sysdate,'YYYY')) -1
			UNION
  		SELECT id,name,firstname,lang1,members.membership,birthday,category,nationality,work_address1,work_address2,work_state,work_towncode,work_town,work_phone,home_addr,home_towncode,home_town,home_state,home_phone,e_mail,mail_preference,favourite_mailing_post
  		FROM members
  		WHERE membership = 'H'
			ORDER BY name;

			reccount NUMBER :=0;

	BEGIN
			htp.HtmlOpen;
			htp.HeadOpen;
			htp.Title('Renewal Form');
			htp.meta(null,'Author','Elena Gianolio');
			htp.meta(null,'Description','YCC');
			htp.HeadClose;

			htp.BodyOpen(null,'TEXT="#000000" bgcolor="silver" link="#0000FF" vlink="#000090" alink="#00BB00" ');
			htp.TableOpen;
			htp.TableRowOpen;
			htp.TableData(htf.img('http://cern.ch/club-yachting/ycclogo.gif',null,null,null,'height=200 width=191'));
			htp.TableData('<H1><B><span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#FF0000"><center>'||'Yachting Club CERN<BR> Renouvellement d''inscription pour la saison/<BR>Membership renewal for the season<BR>'||TO_CHAR(sysdate,'YYYY')||'</center>');
			htp.TableRowClose;
			htp.TableClose;
			htp.br;
			htp.br;
			htp.TableOpen;

			FOR rec IN curs LOOP
				reccount := reccount +1;
	  		htp.TableRowOpen;
				htp.TableData(htf.anchor('http://oraweb03.cern.ch/ycc/owa/RenewalForms.Renewal?mid='||rec.id,rec.id),'RIGHT');
	 			htp.TableData(rec.name||', '||rec.firstname);
	 			htp.TableRowClose;
	  	END LOOP;
	 		htp.TableClose;
	 		htp.print('Records: '||reccount);
	 		htp.BodyClose;
			htp.HtmlClose;

	END RenewAllMembers;


/**************************************************************************************

**************************************************************************************/

PROCEDURE NewMemberFile(mid NUMBER) IS

		CURSOR l_curs IS
			SELECT id, member_id, licence_id
			FROM members, licences
			WHERE id=member_id;

		v VARCHAR2(20);
		a VARCHAR2(2);

		rec members%ROWTYPE;

		mlogin web_logon%ROWTYPE;

		mfee fees.annual_fee%TYPE := 0;

	BEGIN
	  htp.HtmlOpen;
	  htp.HeadOpen;
	  htp.Title('New Member File');
	  htp.meta(null,'Author','Elena Gianolio');
	  htp.meta(null,'Description','YCC');
	  htp.HeadClose;

	  SELECT *
	  	INTO rec
	  	FROM members
	  	WHERE members.id=mid;

	  SELECT *
	  	INTO mlogin
	  	FROM web_logon
	  	WHERE member_id=rec.id;

		SELECT annual_fee
			INTO mfee
			FROM fees
			WHERE cat_id = rec.membership;

	  IF rec.lang1 = 'F' THEN
	  	htp.anchor(null,null,rec.name||'_'||rec.firstname);
	 		htp.BodyOpen(null,'text="#000000" bgcolor="silver" link="#0000FF" vlink="#000090" alink="#00BB00" ');
			htp.TableOpen('BORDER=0',null,null,null,'COLS=2 WIDTH="100%" NOSAVE');
			htp.TableRowOpen;
			htp.TableData(htf.img('http://cern.ch/club-yachting/ycclogo.gif',null,null,null,'height=60 width=56'),null,null,null,null,null,'WIDTH="10%"');
			htp.TableData('<H1><B><span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#FF0000"><FONT SIZE=-1><center>'||'Yachting Club CERN<BR> Renouvellement d''inscription pour la saison '||TO_CHAR(sysdate,'YYYY')||'</center>');
			htp.TableRowClose;
			htp.TableClose;

	  	htp.hr;
	  	htp.print(Font(-1)||'<B>'||rec.name||', '||rec.firstname||'</B><BR>');

	  	htp.print('<center><span style="font-family:&quot;Comic Sans MS&quot;"><font size=-1><b>Ci-dessous, une copie de votre fichier: SVP remplissez les champs vides.</B>');
	  	htp.br;
	  	htp.print('(Toutes les informations personnelles resteront réservées à la base de donnée du YCC)</center>');


	  	htp.TableOpen(null,null,null,null,'WIDTH="100%" NOSAVE');
	  	htp.TableRowOpen;
	  	htp.TableData(Font(-1)||'Votre langue préférée :');
	  	htp.TableData(Font(-1)||'<b>Francais</b>');
	  	htp.TableRowClose;
	  	htp.TableRowOpen;
	  	htp.TableData(Font(-1)||'Vous êtes membre  :');
	  	htp.TableData(Font(-1)||'<b>'||MembershipList(rec.membership,rec.lang1)||'</b>');
	  	htp.TableRowClose;
	  	htp.TableRowOpen;
	  	htp.TableData(Font(-1)||'Votre date de naissance(obligatoire pour les Juniors)  :');
	  	htp.TableData(Font(-1)||'<b>'||TO_CHAR(rec.birthday,'DD-MM-YYYY')||'</B>');
	  	htp.TableRowClose;
	  	htp.TableRowOpen;
	  	htp.TableData(Font(-1)||'Votre nationalité :');
	  	htp.TableData(Font(-1)||'<b>'||Nationality(rec.nationality,rec.lang1)||'</B>');
	  	htp.TableRowClose;
	  	htp.TableRowOpen;
	  	htp.TableData(Font(-1)||'Votre moyen préféré pour communications :');
	  	IF rec.mail_preference = 'E' THEN
	  		htp.TableData(Font(-1)||'<b>Message électronique</b>',null,null,null,null,null,'VALIGN=BOTTOM');
	  	ELSE
	  		IF rec.favourite_mailing_post = 'h' THEN
	  			htp.TableData(Font(-1)||'<b>Poste a votre adresse privée</b>');
	  		ELSE
	  			htp.TableData(Font(-1)||'<b>Poste a votre adresse professionelle</b>');
	  		END IF;
	  	END IF;
	  	htp.TableRowClose;
	  	htp.TableRowOpen;
	  	htp.TableData(Font(-1)||'Vous êtes catégorie  :',null,null,null,null,null,'VALIGN=TOP');
	  	IF rec.category = 'C' THEN
	  		htp.TableData(Font(-1)||'<b>membre du CERN</b> (employ&eacute;,visiteur,...)');
	  	ELSIF rec.category = 'R' THEN
	  		htp.TableData(Font(-1)||'<b>membre lie au CERN</b> (retrait&eacute;s du CERN, Famille de ''Cernois'',...)');
	  	ELSE
	  		htp.TableData(Font(-1)||'<b>membre externe</b> (pas de lien avec le CERN)');
	  	END IF;
	  	htp.TableRowClose;
	  	htp.TableClose;

	  	htp.TableOpen(null,null,null,null,'WIDTH="100%" NOSAVE');
			htp.TableRowOpen;
			htp.TableHeader(Font(-1)||'Votre Adresse privée:','LEFT');
			htp.TableHeader(Font(-1)||'Votre Adresse professionelle:','LEFT');
			htp.TableRowClose;
			htp.TableRowOpen;
			htp.TableData(Font(-1)||''||rec.home_addr);
			htp.TableData(Font(-1)||''||rec.work_address1);
			htp.TableRowClose;
			htp.TableRowOpen;
			htp.TableData(Font(-1)||''||rec.home_state||'-'||rec.home_towncode||' '||rec.home_town);
			htp.TableData(Font(-1)||''||rec.work_address2);
			htp.TableRowClose;
			htp.TableRowOpen;
			htp.TableData(Font(-1)||'Tel : '||rec.home_phone);
			htp.TableData(Font(-1)||''||rec.work_state||'-'||rec.work_towncode||' '||rec.work_town);
			htp.TableRowClose;
			htp.TableRowOpen;
			htp.TableData();
			htp.TableData(Font(-1)||'Tel : '||rec.work_phone);
	  	htp.TableRowClose;
			htp.TableClose;


			IF rec.e_mail IS NULL THEN
				htp.print(Font(-1)||'Vous n''avez pas d''address electronique');
			ELSE
				htp.print(Font(-1)||'<B>Votre Adresse electronique:  </B>'||rec.e_mail);
			END IF;
			htp.br;
			htp.br;

			v := NULL;
	    FOR l_rec in l_curs LOOP
	    	IF l_rec.member_id = rec.id THEN
	    		SELECT nlicence
	    		INTO a
	    		FROM infolicences
	    		WHERE infoid =l_rec.licence_id;
	    			v := v || a || ' ';
	    	END IF;
	    END LOOP;
	    IF v IS NOT NULL THEN
	    	htp.print(Font(-1)||'Vous d&eacute;tenez les licences YCC suivantes :  '|| v);
	    	htp.br;
	    ELSE
	    	htp.print(Font(-1)||'Vous ne d&eacute;tenez pas des licences YCC ');
	    	htp.br;
	    END IF;

			htp.br;
			htp.print(Font(-1)||'<B>Votre Login est: </B>'||mlogin.logon_id);
			htp.br;
			htp.print(Font(-1)||'<B>Votre Password est: </B> '||mlogin.logon_passwd);
			htp.br;
			htp.print(Font(-1)||'<B><I>Rappelez-vous que cette informatione est strictement personelle !!</I></B>');
			htp.br;
			htp.print(Font(-1)||'Vous pouvez changer les donnes si dessous si vous vous connecte sur le site "<B>http://oraweb03.cern.ch/ycc/owa/YCC_login.frontpage</B>"');
			htp.br;

/*			htp.print(Font(-1)||'Vous d&eacute;tenez la licence lac/mer suivante : ');
*/			htp.br;
			htp.br;
			htp.print('<span style="font-family:&quot;Comic Sans MS&quot;"><b>En cas d''erreur contactez SVPL Elena.Gianolio@cern.ch');
			htp.br;
			htp.br;


/************************************
        ENGLISH version
************************************/
	    ELSE
	   		htp.anchor(null,null,rec.name||'_'||rec.firstname);
	 			htp.BodyOpen(null,'TEXT="#000000" bgcolor="silver" link="#0000FF" vlink="#000090" alink="#00BB00" ');
				htp.TableOpen('BORDER=0',null,null,null,'COLS=2 WIDTH="100%" NOSAVE');
				htp.TableRowOpen;
				htp.TableData(htf.img('http://cern.ch/club-yachting/ycclogo.gif',null,null,null,'height=60 width=56'),null,null,null,null,null,'WIDTH="10%"');
				htp.TableData('<H1><B><span style="font-family:&quot;Comic Sans MS&quot;"><font size=-1><FONT COLOR="#FF0000"><center>'||'Yachting Club CERN<BR> Membership renewal for the season '||TO_CHAR(sysdate,'YYYY')||'</center>');
				htp.TableRowClose;
				htp.TableClose;

	  		htp.hr;
	  		htp.print(Font(-1)||'<B>'||rec.name||', '||rec.firstname||'</B><BR>');

	  		htp.print('<center><span style="font-family:&quot;Comic Sans MS&quot;"><font size=-1><b>The following is a copy of your file: PLEASE fill in the empty fields.</B>');
	  		htp.br;
	  		htp.print('(All personal information will be strictly reserved to the YCC database)</center>');
		  	htp.TableOpen(null,null,null,null,'WIDTH="100%" NOSAVE');
		  	htp.TableRowOpen;
		  	htp.TableData(Font(-1)||'Your preferred language is  :');
		  	htp.TableData(Font(-1)||'<b>English</b>');
		  	htp.TableRowClose;
		  	htp.TableRowOpen;
		  	htp.TableData(Font(-1)||'Your membership is  :');
		  	htp.TableData(Font(-1)||'<b>'||MembershipList(rec.membership,rec.lang1)||'</b>');
		  	htp.TableRowClose;
		  	htp.TableRowOpen;
		  	htp.TableData(Font(-1)||'Your birth date is (mandatory for Juniors)  :');
		  	htp.TableData(Font(-1)||'<b>'||TO_CHAR(rec.birthday,'DD-MM-YYYY')||'</b>');
		  	htp.TableRowClose;
		  	htp.TableRowOpen;
		  	htp.TableData(Font(-1)||'Your nationality is  :');
		  	htp.TableData(Font(-1)||'<b>'||Nationality(rec.nationality,rec.lang1)||'</b>');
		  	htp.TableRowClose;
		  	htp.TableRowOpen;
		  	htp.TableData(Font(-1)||'Your preferred means of communication is  :');
	  		IF rec.mail_preference = 'E' THEN
	  			htp.TableData(Font(-1)||'<b>E_mail</b>');
	  		ELSE
	  			IF rec.favourite_mailing_post = 'h' THEN
	  				htp.TableData(Font(-1)||'<b>Mail to your home address</b>');
	  			ELSE
	  				htp.TableData(Font(-1)||'<b>Mail to your work address</b>');
	  			END IF;
	  		END IF;
	  		htp.TableRowClose;
		  	htp.TableRowOpen;
		  	htp.TableData(Font(-1)||'You are in category  :');
		  	IF rec.category = 'C' THEN
		  		htp.TableData(Font(-1)||'<b>CERN member</b> (employee, visitor, ...');
		  	ELSIF rec.category = 'R' THEN
		  		htp.TableData(Font(-1)||'<b>member with relation to CERN</b> (retired from CERN,family at CERN,...)');
		  	ELSE
		  		htp.TableData(Font(-1)||'<b>external member</b> (no relation with CERN) ');
		  	END IF;
		  	htp.TableRowClose;
				htp.TableClose;

				htp.TableOpen(null,null,null,null,'WIDTH="100%" NOSAVE');
				htp.TableRowOpen;
				htp.TableHeader(Font(-1)||'Your home address:','LEFT');
				htp.TableHeader(Font(-1)||'Your professional address:','LEFT');
				htp.TableRowClose;
				htp.TableRowOpen;
				htp.TableData(Font(-1)||''||rec.home_addr);
				htp.TableData(Font(-1)||''||rec.work_address1);
				htp.TableRowClose;
				htp.TableRowOpen;
				htp.TableData(Font(-1)||''||rec.home_state||'-'||rec.home_towncode||' '||rec.home_town);
				htp.TableData(Font(-1)||''||rec.work_address2);
				htp.TableRowClose;
				htp.TableRowOpen;
				htp.TableData(Font(-1)||'Phone: '||rec.home_phone);
				htp.TableData(Font(-1)||''||rec.work_state||'-'||rec.work_towncode||' '||rec.work_town);
				htp.TableRowClose;
				htp.TableRowOpen;
				htp.TableData();
				htp.TableData(Font(-1)||'Phone: '||rec.work_phone);
		  	htp.TableRowClose;
				htp.TableClose;

				IF rec.e_mail IS NULL THEN
					htp.print(Font(-1)||'You do not have any Email address');
				ELSE
					htp.print(Font(-1)||'Your Email address is :  '||rec.e_mail);
		  	END IF;
				htp.br;
  			htp.br;

				v := NULL;
				FOR l_rec in l_curs LOOP
					IF l_rec.member_id = rec.id THEN
						SELECT nlicence
						INTO a
						FROM infolicences
						WHERE infoid =l_rec.licence_id;
							v := v || a || ' ';
					END IF;
				END LOOP;
				IF v IS NOT NULL THEN
					htp.print(Font(-1)||'You hold the following YCC licences :  '|| v);
					htp.br;
				ELSE
		      htp.print(Font(-1)||'You do not have any YCC licence ');
					htp.br;
		    END IF;

		  	htp.br;
				htp.print(Font(-1)||'<B>Your Login is: </B>'||mlogin.logon_id);
				htp.br;
				htp.print(Font(-1)||'<B>Your Password is: </B> '||mlogin.logon_passwd);
				htp.br;
				htp.print(Font(-1)||'<B><I>Note that this informations is private !!</I></B>');
				htp.br;
				htp.print(Font(-1)||'You might want to change your password using the web page "<B>http://oraweb03.cern.ch/ycc/owa/YCC_login.frontpage</B>"');
				htp.br;

/*				htp.print(Font(-1)||'You hold the lac/see licence : ');	*/
				htp.br;
				htp.br;
				htp.print('<span style="font-family:&quot;Comic Sans MS&quot;"><b>In case of errors please contact immediately Elena.Gianolio@cern.ch</b>');


		END IF; /* on LANG1*/
	  htp.BodyClose;
	  htp.HtmlClose;


END NewMemberFile;


/*****************************************************************************
PROCEDURE indipendent for TeX script
produce data on the web to cut and paste into a data file on the afs account
*****************************************************************************/

	FUNCTION CodeMembership(membership_id IN members.membership%TYPE)
	RETURN varchar2
	IS
	BEGIN
		  IF membership_id = 'AS' THEN
		    RETURN ('S');
		  ELSIF membership_id = 'AJ' THEN
		  	RETURN  ('J');
		  ELSIF membership_id = 'FM' THEN
		  	RETURN  ('F');
		  ELSIF membership_id = 'H' THEN
		  	RETURN ('H');
		  ELSE RETURN (' ');
			END IF;
	END;

PROCEDURE RenewScript IS

	CURSOR curs IS
		SELECT DISTINCT id,name,firstname,lang1,members.membership,birthday,category,nationality,
					 work_address1,work_address2,work_state,work_towncode,work_town,work_phone,
					 home_addr,home_towncode,home_town,home_state,home_phone,
					 e_mail,mail_preference,favourite_mailing_post, logon_id, logon_passwd
		FROM members, feesrecords, web_logon
		WHERE members.id=feesrecords.member_id AND
					(feesrecords.year_f=TO_NUMBER(TO_CHAR(sysdate,'YYYY'))-1 OR members.membership='H') AND
					members.id=web_logon.member_id
					/*AND category = 'E'*/
		ORDER BY category,name;

	CURSOR l_curs IS
		SELECT id, member_id, licence_id
		FROM members, licences
		WHERE id=member_id;

	v VARCHAR2(20) :=NULL;
	a VARCHAR2(2) := NULL;

BEGIN

	htp.HtmlOpen;
	htp.BodyOpen;

	FOR rec IN curs LOOP
  	htp.print('\def\language{'||LOWER(rec.lang1)||'}');
  	htp.br;htp.print('\def\membership{'||CodeMembership(rec.membership)||'}');
  	htp.br;htp.print('\def\name{'||rec.name||' '||rec.firstname||'}');
   htp.br;htp.print('\def\birthdate{'||rec.birthday||'}');
    htp.br;htp.print('\def\category{'||rec.category||'}');
    htp.br;htp.print('\def\nationality{'||Nationality(rec.nationality,rec.lang1)||'}');
	  htp.br;htp.print('\def\prefcomm{'||rec.mail_preference||'}');
	  htp.br;htp.print('\def\waddone{'||rec.work_address1||'}');
	  htp.br;htp.print('\def\waddtwo{'||rec.work_address2||'}');
	  htp.br;htp.print('\def\waddthree{'||rec.work_state||'-'||rec.work_towncode||' '||rec.work_town||'}');
	  htp.br;htp.print('\def\wphnumb{'||rec.work_phone||'}');
	  htp.br;htp.print('\def\haddone{'||rec.home_addr||'}');
  	htp.br;htp.print('\def\haddtwo{'||rec.home_state||'-'||rec.home_towncode||' '||rec.home_town||'}');
  	htp.br;htp.print('\def\hphnumb{'||rec.home_phone||'}');
  	htp.br;htp.print('\def\email{'||rec.e_mail||'}');
  	htp.br;htp.print('\def\prefmail{'||rec.favourite_mailing_post||'}');
  	htp.br;htp.print('\def\login{'||rec.logon_id||'}');
  	htp.br;htp.print('\def\password{'||rec.logon_passwd||'}');
  	htp.br;

		v := NULL;
		FOR l_rec in l_curs LOOP
			IF l_rec.member_id = rec.id THEN
				SELECT nlicence
					INTO a
					FROM infolicences
					WHERE infoid =l_rec.licence_id;
				v := a ||' '|| v;
			END IF;
		END LOOP;
		htp.print('\def\licence{'|| v || '}');
		htp.br;
  	htp.print('\letter');
  	htp.br;
  	htp.print('%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%');
		htp.br;

	END LOOP;


	htp.BodyClose;
	htp.HTMLClose;
END RenewScript;

PROCEDURE startup IS p_status BOOLEAN; BEGIN
 -- Call the authorize function
 p_status := authorize;
 -- Test if autenticatin has been successfull and print out a message.
 IF p_status = TRUE THEN
 RenewAllMembers;

 ELSE
  NULL;
 END IF;
END;

FUNCTION authorize RETURN BOOLEAN IS
p_user VARCHAR2(10);
p_pwd  VARCHAR2(10);
BEGIN
 -- Set a login realm
 owa_sec.set_protection_realm('Renewal Package');
 p_user := UPPER(owa_sec.get_user_id);
 p_pwd  := owa_sec.get_password;
 -- Set the valid username and password, and return
 -- TRUE if the user enters the correct values in his login dialog

 	IF p_user = 'ycc' AND p_pwd = 'elena' THEN
  RETURN TRUE;
 ELSE
  RETURN FALSE;
 END IF;
END;


END;

/
--------------------------------------------------------
--  DDL for Package Body STATISTICS
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "STATISTICS" IS

  PROCEDURE header (v_title in VARCHAR2)
	AS
	BEGIN
	 htp.HtmlOpen;
	 htp.HeadOpen;
	 htp.Title(v_title);
	 htp.meta(null,'Author','Elena Gianolio');
	 htp.meta(null,'Description','YCC');
	 htp.HeadClose;
	 htp.BodyOpen(null,'TEXT="#000000" bgcolor="silver" link="#0000FF" vlink="#000090" alink="#00BB00" ');
	 htp.tableOpen('BORDER=0',null,null,null,'COLS=2 WIDTH="100%" NOSAVE');
	 htp.TableRowOpen;
	 htp.print('<TD WIDTH="10" NOSAVE><img SRC="http://wwwth.cern.ch/ycc/ycclogo.gif" height=200 width=191</TD>');
	 htp.TableData('<H1><B><span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#FF0000"><center>'||v_title||'</center></FONT></B></H1>');
	 htp.TableRowClose;
	 htp.tableClose;
	 htp.br;
	 htp.print('&nbsp');
	 htp.br;
	 htp.print('&nbsp');
	 htp.br;
	 htp.print('&nbsp');
	 htp.br;
	 htp.print('&nbsp');
	END header;

	PROCEDURE footer
	AS
	BEGIN
	 htp.hr;
	 htp.hr;
	 htp.print('<span style="font-family:&quot;Comic Sans MS&quot;"><FONT COLOR="#000000"><FONT SIZE=-1>');
	 htp.Address('Comments ? Contact '||
	 htf.Anchor('mailto:Elena.Gianolio@cern.ch','YCC master'));
	 htp.print('</FONT>');
	 htp.BodyClose;
	 htp.HtmlClose;
	END footer;


/************************************************************************/
/* Count the number of licences for a specific member
/************************************************************************/


/** THE FUNCTION IS OUTSIDE THE PACKAGE */


	FUNCTION LicenceCounter (myid NUMBER)
	RETURN NUMBER
	IS
		licn NUMBER:=0;
	BEGIN
    SELECT COUNT(*)
  	INTO licn
 	/*	FROM members, licences
  	WHERE id=member_id and id=myid;*/
  	FROM licences
  	WHERE member_id=myid;
  	RETURN licn;
	END LicenceCounter;


/************************************************************************/
/* Translation of membership in English/French based on table membership
/************************************************************************/

	FUNCTION MembershipList (membership_id IN VARCHAR2, lang IN VARCHAR2)
	RETURN varchar2
	IS
		ans varchar2(10) :=null;
	BEGIN
		IF lang = 'E' THEN
		    SELECT E_desc
		    INTO ans
		    FROM membership
		    WHERE membership.mb_name = membership_id;
		ELSE
			SELECT F_desc
		    INTO ans
		    FROM membership
		    WHERE membership.mb_name = membership_id;
		END IF;
		RETURN ans;
	END MembershipList;

/*********************************/
/* Procedure for membership card */
/*********************************/

	PROCEDURE MembershipList (query_year IN VARCHAR2)
  IS
    	CURSOR m_curs IS
  		SELECT name, firstname, membership, lang1
  		FROM members, feesrecords
  		WHERE id=member_id AND year_f = query_year
  		UNION
  		SELECT name, firstname, membership, lang1
  		FROM members
  		WHERE membership = 'H'
  		ORDER BY name;

  		counter number := 0;
	BEGIN
  	header('YCC Statistics year: '||query_year);
  	htp.TableOpen;
  	htp.TableRowOpen;
  	htp.TableHeader('Member Name');
  	htp.TableHeader('Membership');
  	htp.TableRowClose;
  	FOR m_rec IN m_curs LOOP
  		counter := counter + 1;
  		htp.TableRowOpen;
  		htp.TableData(m_rec.name || ' ' || m_rec.firstname);
  		htp.TableData(MembershipList(m_rec.membership,m_rec.lang1));
  		htp.TableRowClose;
  	END LOOP;
  	htp.TableClose;
  	htp.header(3,'Total members : '||TO_CHAR(counter));
  	footer;
   END MembershipList;


/*************************************/
/* New members: name membership email
/*************************************/

   PROCEDURE NewMembersList (query_year IN VARCHAR2)
   IS
    	CURSOR n_curs IS
  		SELECT name, firstname, membership, e_mail, lang1
  		FROM members, feesrecords
  		WHERE id=member_id AND year_f = query_year AND member_entrance = query_year
  		ORDER BY name;

  		counter number := 0;
   BEGIN
  	header('YCC New members year: '||query_year);
  	htp.TableOpen;
  	htp.TableRowOpen;
  	htp.TableHeader('Member Name');
  	htp.TableHeader('Membership');
  	htp.TableHeader('email address');
  	htp.TableRowClose;
  	FOR n_rec IN n_curs LOOP
  		counter := counter + 1;
  		htp.TableRowOpen;
  		htp.TableData(n_rec.name || ' ' || n_rec.firstname);
  		htp.TableData(MembershipList(n_rec.membership,n_rec.lang1));
  		htp.TableData(n_rec.e_mail);
  		htp.TableRowClose;
  	END LOOP;
  	htp.TableClose;
  	htp.header(2, 'Total new members: '||TO_CHAR(counter));
  	footer;
   END NewMembersList;



/*************************************/
/* List members: name
/*************************************/
   PROCEDURE MembershipNameList (infomembership IN VARCHAR2, query_year IN VARCHAR2, infoyear IN VARCHAR2)
   IS
    	CURSOR curs IS
  		SELECT DISTINCT (id),name, firstname, membership, member_entrance
  		FROM members, feesrecords
  		WHERE id=member_id AND year_f = query_year AND members.membership=infomembership
  		ORDER BY name;

 			counter number :=0;

   BEGIN
  	header('YCC '||infoyear ||' '||infomembership ||' members year: '||query_year);
  	htp.TableOpen;
  	htp.TableRowOpen;
  	htp.TableHeader('#');
  	htp.TableHeader('Member Name');
  	htp.TableRowClose;
  	FOR rec IN curs LOOP
  		IF infoyear='ALL' THEN
  			counter := counter + 1;
  			htp.TableRowOpen;
  			htp.TableData(counter);
  			htp.TableData(rec.name || ' ' || rec.firstname);
  			htp.TableRowClose;
  		ELSIF infoyear='NEW' THEN
  			IF rec.member_entrance = query_year THEN
  				counter := counter + 1;
  				htp.TableRowOpen;
  				htp.TableData(counter);
  				htp.TableData(rec.name || ' ' || rec.firstname);
  				htp.TableRowClose;
  			END IF;
  		ELSE
  			IF rec.member_entrance < query_year THEN
  				counter := counter + 1;
  				htp.TableRowOpen;
  				htp.TableData(counter);
  				htp.TableData(rec.name || ' ' || rec.firstname);
  				htp.TableRowClose;
  			END IF;
  		END IF;
  	END LOOP;
  	htp.TableClose;
  	htp.header(2, 'Total '||infoyear ||' '||infomembership||' members: '||TO_CHAR(counter));
  	footer;
   END MembershipNameList;

/*************************************/
/* List members: name
/*************************************/
   PROCEDURE CategoryNameList (infocategory IN VARCHAR2, query_year IN VARCHAR2, infoyear IN VARCHAR2)
   IS
    	CURSOR curs IS
  		SELECT DISTINCT (id),name, firstname, category, member_entrance
  		FROM members, feesrecords
  		WHERE id=member_id AND year_f = query_year AND members.category=infocategory
  		ORDER BY name;

 			counter number :=0;

   BEGIN
  	header('YCC '||infoyear ||' '||infocategory ||' members year: '||query_year);
  	htp.TableOpen;
  	htp.TableRowOpen;
  	htp.TableHeader('#');
  	htp.TableHeader('Member Name');
  	htp.TableRowClose;
  	FOR rec IN curs LOOP
  		IF infoyear='ALL' THEN
  			counter := counter + 1;
  			htp.TableRowOpen;
  			htp.TableData(counter);
  			htp.TableData(rec.name || ' ' || rec.firstname);
  			htp.TableRowClose;
  		ELSIF infoyear='NEW' THEN
  			IF rec.member_entrance = query_year THEN
  				counter := counter + 1;
  				htp.TableRowOpen;
  				htp.TableData(counter);
  				htp.TableData(rec.name || ' ' || rec.firstname);
  				htp.TableRowClose;
  			END IF;
  		ELSE
  			IF rec.member_entrance < query_year THEN
  				counter := counter + 1;
  				htp.TableRowOpen;
  				htp.TableData(counter);
  				htp.TableData(rec.name || ' ' || rec.firstname);
  				htp.TableRowClose;
  			END IF;
  		END IF;
  	END LOOP;
  	htp.TableClose;
  	htp.header(2, 'Total '||infoyear ||' '||infocategory||' members: '||TO_CHAR(counter));
  	footer;
   END CategoryNameList;



/******************************************************/
/* List name members with a required number of licences
/******************************************************/
   PROCEDURE NLicence (lic IN NUMBER, query_year IN VARCHAR2)
   IS
     	CURSOR LicNo IS
  			SELECT DISTINCT(id),id Mid,name Mname,firstname Mfirstname
				FROM members, feesrecords
  			WHERE id=member_id AND (year_f = query_year OR membership='H') AND LicenceCounter(id)= lic
  			ORDER by name;

  		CURSOR l_curs IS
	     		SELECT licence_id, id, member_id
	     		FROM members, licences
	     		WHERE id=member_id AND licence_id NOT IN (7,10,11,13);

  		counter NUMBER(3);
  		v VARCHAR2(30);
  		a VARCHAR2(30);

  	BEGIN
  		header('Member with '||lic||' licences');
  		counter := 1;
  		htp.br;

			FOR recLicNo IN LicNo LOOP
				v := NULL;
        FOR l_rec in l_curs LOOP
        	IF l_rec.id = recLicNo.id THEN
          	SELECT nlicence
            INTO a
            FROM infolicences
            WHERE infoid =l_rec.licence_id;
            v := v || a || ' ';
          END IF;
        END LOOP;
        htp.print(counter||' '||recLicNo.Mname||' '||recLicNo.Mfirstname||' --       Licences : '||v);
				counter := counter +1;
				htp.br;
			END LOOP;
			footer;
  	END Nlicence;

/******************************************************/
/* List name members with a required licences
/******************************************************/
		PROCEDURE XXLicence (lic IN NUMBER, query_year IN VARCHAR2)
   	IS
   		CURSOR LICcurs IS
  			SELECT DISTINCT(id),name, firstname,licence_id
				FROM members, feesrecords, licences
  	  	WHERE id=feesrecords.member_id AND (year_f = query_year OR membership='H') AND id=licences.member_id
  	  	ORDER BY name;

  	  	counter NUMBER(4):=0;
   	BEGIN
--   		header('Licence '||LIC_NAME(lic)||' owner list:');
      header('Licence '||lic||' owner list:');
   		FOR LICrec IN LICcurs LOOP
  	  	IF LICrec.licence_id = lic THEN
  	  		counter := counter +1;
  	  		htp.print(counter ||' '||LICrec.name||' '||LICrec.firstname);
  	  		htp.br;
  	  	END IF;
   		END LOOP;
   		footer;
   	END XXLicence;
/******************************************************/
/* List name members with a required
/******************************************************/
		PROCEDURE NatNameList (natid IN VARCHAR2, query_year IN VARCHAR2)
   	IS
   	CURSOR NATcurs IS
  			SELECT DISTINCT(id),name, firstname,nationality
				FROM members, feesrecords
  	  	WHERE id=feesrecords.member_id AND (year_f = query_year OR membership='H') AND nationality=natid
  	  	ORDER BY name;

  	  	counter NUMBER(4):=0;
   	BEGIN
   		header('Nationality '||natid||' list:');
   		htp.br;
   		FOR NATrec IN NATcurs LOOP
  	  		counter := counter +1;
  	  		htp.print(counter ||' '||NATrec.name||' '||NATrec.firstname);
  	  		htp.br;
   		END LOOP;
   		footer;
   	END NatNameList;

/*******************************************************************************
/* MAIN ENTRANCE POINT
/* Some statistics:
/* http://oraweb03.cern.ch/ycc/owa/statistics.statistics_members?query_year=2002
/*******************************************************************************/

	PROCEDURE statistics_members (query_year IN VARCHAR2)
	IS
  	Nmembers NUMBER(3):= 0;
  	NAmembers NUMBER(3):= 0;
  	NJmembers NUMBER(3):= 0;
  	NCmembers NUMBER(3):= 0;
  	NFmembers NUMBER(3):= 0;
  	NTmembers NUMBER(3):= 0;
  	NHmembers NUMBER(3):= 0;
  	ActiveOld NUMBER(3):= 0;
  	ActiveNew NUMBER(3):= 0;
/*  	ActiveLate NUMBER(3):= 0;*/
  	JuniorOld NUMBER(3):= 0;
  	JuniorNew NUMBER(3):= 0;
/*  	JuniorLate NUMBER(3):= 0;*/
  	NCern NUMBER(3):= 0;
  	NCernRelated NUMBER(3):= 0;
  	NnotCern NUMBER(3):= 0;
  	Nen NUMBER(3):= 0;
  	Nf NUMBER(3):= 0;
  	Nother NUMBER(3):= 0;
  	NNationality NUMBER(3) := 0;
  	OtherNationality NUMBER(3):= 0;

  	natname VARCHAR2(15);
  	n NUMBER(3):=0;
  	tmp_counter NUMBER(3);
  	totmemforlic NUMBER(4):=0;
  	nlic NUMBER(3):=0; /*counter for member with x licences*/
  	totalNumlicences NUMBER(3):=0; /*counter for the total n of licences*/
  	numberlicences NUMBER(3):=0;
  	vlic NUMBER(3):=0; /* counter for member with xx licence*/
  	NCounter NUMBER(3):=0; /* counter for nationalities*/
  	TotNat NUMBER(3):=0; /* counter for total members by nationalities */
  	NNat NUMBER(2) :=0; /* counter for n of nationalities */
  	ND BOOLEAN := TRUE; /* boolean for non defined members */

/* Not defined members */
 	CURSOR curs IS
  		SELECT id,name,firstname
  		FROM members, feesrecords
  		WHERE (id=member_id AND year_f = query_year)  AND (members.membership != 'AS' AND members.membership != 'AJ' AND members.membership != 'T'
  						AND members.membership != 'C' AND members.membership != 'FM' AND members.membership != 'H' );

/*  	CURSOR NmembersCurs IS
  		SELECT name
  		FROM members, feesrecords
  		WHERE id=member_id AND year_f = query_year
  		UNION
  		SELECT name
  		FROM members
  		WHERE membership = 'H';*/

  	CURSOR NatCurs IS
  		SELECT natid, ename
  		FROM Nationalities
  		ORDER BY ename;




  BEGIN

  	header('YCC Members Statistics year: '||query_year);

		SELECT COUNT(DISTINCT(id))
  	INTO Nmembers
  	FROM members, feesrecords
  	WHERE id=member_id AND (year_f = query_year OR membership='H');


  	htp.header(2,'Total Members: '||Nmembers||'<BR>  '||htf.anchor('http://oraweb03.cern.ch/ycc/owa/statistics.MembershipList?query_year='||query_year, 'Detailed Member List'));
  	htp.br;


  	SELECT COUNT(DISTINCT(id))
  	INTO NAmembers
  	FROM members, feesrecords
  	WHERE id=member_id AND year_f = query_year AND members.membership = 'AS';

  	htp.print('Active Members: '||htf.anchor('http://oraweb01.cern.ch/ycc/owa/statistics.MembershipNameList?infomembership=AS&query_year='||query_year||'&infoyear=ALL', NAmembers));
  	htp.br;

  	SELECT COUNT(DISTINCT(id))
  	INTO ActiveNew
  	FROM members, feesrecords
  	WHERE id=member_id AND year_f = query_year AND members.membership = 'AS' AND member_entrance = query_year;

  	htp.print('<blockquote>');
  	htp.print('Active/New Members: '||htf.anchor('http://oraweb03.cern.ch/ycc/owa/statistics.MembershipNameList?infomembership=AS&query_year='||query_year||'&infoyear=NEW', ActiveNew));
  	htp.br;

  	SELECT COUNT(DISTINCT(id))
  	INTO ActiveOld
  	FROM members, feesrecords
  	WHERE id=member_id AND year_f = query_year AND members.membership = 'AS' AND member_entrance != query_year ;

  	htp.print('Active/Old Members: '||htf.anchor('http://oraweb03.cern.ch/ycc/owa/statistics.MembershipNameList?infomembership=AS&query_year='||query_year||'&infoyear=OLD', ActiveOld));
  	htp.br;

    /*	SELECT COUNT(DISTINCT(id))
  	INTO ActiveOld
  	FROM members, feesrecords
  	WHERE id=member_id AND year_f = query_year AND members.membership = 'AS' AND member_entrance != query_year AND paid_date <= TO_DATE('01-Apr-02','DD-MON-YY') ;

  	htp.print('Active/Old Members: '||ActiveOld||' (who paied in time!)');
  	htp.br;

  	SELECT COUNT(DISTINCT(id))
  	INTO ActiveLate
  	FROM members, feesrecords
  	WHERE id=member_id AND year_f = query_year AND members.membership = 'AS' AND member_entrance != query_year AND paid_date > TO_DATE('01-Apr-02','DD-MON-YY') ;

  	htp.print('Active/Late Members: '||ActiveLate||'</blockquote>');

  	htp.print('<I>Verifica Active: '||TO_CHAR(ActiveNew+ActiveOld+ActiveLate) ||' ?? '|| NAmembers||'</I>');
  	htp.br;
  	*/

  	htp.br;
  	htp.print('<I>Verifica Active: '||TO_CHAR(ActiveNew+ActiveOld) ||' ?? '|| NAmembers||'</I>');
  	htp.br;
  	htp.print('</blockquote>');

  	SELECT COUNT(DISTINCT(id))
  	INTO NJmembers
  	FROM members, feesrecords
  	WHERE id=member_id AND year_f = query_year AND members.membership = 'AJ';

  	htp.br;
  	htp.print('Active Juniors: '||htf.anchor('http://oraweb03.cern.ch/ycc/owa/statistics.MembershipNameList?infomembership=AJ&query_year='||query_year||'&infoyear=ALL', NJmembers));
  	htp.br;

  	SELECT COUNT(DISTINCT(id))
  	INTO JuniorNew
  	FROM members, feesrecords
  	WHERE id=member_id AND year_f = query_year AND members.membership = 'AJ' AND member_entrance = query_year;

  	htp.print('<blockquote>');
  	htp.print('Junior/New Members: '||htf.anchor('http://oraweb03.cern.ch/ycc/owa/statistics.MembershipNameList?infomembership=AJ&query_year='||query_year||'&infoyear=NEW', JuniorNew));
  	htp.br;

  	SELECT COUNT(DISTINCT(id))
  	INTO JuniorOld
  	FROM members, feesrecords
  	WHERE id=member_id AND year_f = query_year AND members.membership = 'AJ' AND member_entrance != query_year ;

  	htp.print('Junior/Old Members: '||htf.anchor('http://oraweb03.cern.ch/ycc/owa/statistics.MembershipNameList?infomembership=AJ&query_year='||query_year||'&infoyear=OLD', JuniorOld));
  	htp.br;

  	htp.br;
  	htp.print('<I>Verifica Junior; '||TO_CHAR(JuniorNew+JuniorOld) ||' ?? '|| NJmembers||'</I>');
  	htp.br;
  	htp.print('</blockquote>');

  	SELECT COUNT(DISTINCT(id))
  	INTO NTmembers
  	FROM members, feesrecords
  	WHERE id=member_id AND year_f = query_year AND members.membership = 'T';

  	htp.br;
  	htp.print('Temporary Members: '||htf.anchor('http://oraweb03.cern.ch/ycc/owa/statistics.MembershipNameList?infomembership=T&query_year='||query_year||'&infoyear=ALL',NTmembers));
  	htp.br;

  	SELECT COUNT(DISTINCT(id))
  	INTO NFmembers
  	FROM members, feesrecords
  	WHERE id=member_id AND year_f = query_year AND members.membership = 'FM';

  	htp.br;
  	htp.print('Friends Members: '||htf.anchor('http://oraweb03.cern.ch/ycc/owa/statistics.MembershipNameList?infomembership=FM&query_year='||query_year||'&infoyear=ALL',NFmembers));
  	htp.br;

  	SELECT COUNT(DISTINCT(id))
  	INTO NHmembers
  	FROM members, feesrecords
  	WHERE id=member_id AND members.membership = 'H';


  	htp.br;
  	htp.print('Honorary Members: '||htf.anchor('http://oraweb03.cern.ch/ycc/owa/statistics.MembershipNameList?infomembership=H&query_year='||query_year||'&infoyear=ALL',NHmembers));
  	htp.br;

		/*  	SELECT COUNT(*)
  	INTO NCmembers
  	FROM members, feesrecords
  	WHERE id=member_id AND year_f = query_year AND members.membership = 'C';

  	htp.br;
  	htp.print('Committee Members: '||NCmembers);
  	htp.br;
    */

   	htp.br;
   	htp.print('<I>Verifica Members; '||TO_CHAR(NHmembers+NFmembers+NTmembers+NJmembers+NAmembers) ||' ?? '|| TO_CHAR(Nmembers)||'</I>');
  	htp.br;

  	htp.br;
   	htp.print('<I>Not defined:</I>');

  	ND := TRUE;
  	FOR rec in curs LOOP
  		htp.print(rec.name);
  		ND := FALSE;
  	END LOOP;
  	IF ND THEN htp.print ('<I>None</I>'); END IF;
  	htp.br;

  	htp.br;htp.print('&nbsp');
		htp.br;htp.print('&nbsp');
		htp.br;htp.print('&nbsp');
		htp.hr;
  	htp.br;htp.print('&nbsp');
		htp.br;htp.print('&nbsp');
		htp.br;htp.print('&nbsp');
		htp.br;

		/*CERN/CERN RELATED/ NOT CERN */
    SELECT COUNT(DISTINCT(id))
  	INTO NCern
  	FROM members, feesrecords
  	WHERE id=member_id AND (year_f = query_year OR membership='H') AND Category='C';

  	htp.print('CERN Members: '||htf.anchor('http://oraweb03.cern.ch/ycc/owa/statistics.CategoryNameList?infocategory=C&query_year='||query_year||'&infoyear=ALL', NCern));
  	htp.br;

    SELECT COUNT(DISTINCT(id))
  	INTO NCernRelated
  	FROM members, feesrecords
  	WHERE id=member_id AND (year_f = query_year OR membership='H') AND Category='R';

  	htp.print('CERN Related Members: '||htf.anchor('http://oraweb03.cern.ch/ycc/owa/statistics.CategoryNameList?infocategory=C&query_year='||query_year||'&infoyear=ALL', NCernRelated));
  	htp.br;

  	SELECT COUNT(DISTINCT(id))
  	INTO NnotCern
  	FROM members, feesrecords
  	WHERE id=member_id AND (year_f = query_year OR membership='H') AND Category = 'E';

  	htp.print('External Members: '||htf.anchor('http://oraweb03.cern.ch/ycc/owa/statistics.CategoryNameList?infocategory=C&query_year='||query_year||'&infoyear=ALL', NnotCern));
  	htp.br;

  	htp.br;
    htp.print('<I>Verifica Members; '||TO_CHAR(NCern+NCernRelated+NnotCern) ||' ?? '|| Nmembers||'</I>');
  	htp.br;

  	htp.br;htp.print('&nbsp');
		htp.br;htp.print('&nbsp');
		htp.br;htp.print('&nbsp');
		htp.hr;
  	htp.br;htp.print('&nbsp');
		htp.br;htp.print('&nbsp');
		htp.br;htp.print('&nbsp');
		htp.br;

		/* English/French/Other main language*/

  	SELECT COUNT(DISTINCT(id))
  	INTO Nen
  	FROM members, feesrecords
  	WHERE id=member_id AND (year_f = query_year OR membership='H') AND Lang1='EN';

  	htp.print('Preferred Language : English  '||Nen);
  	htp.br;

  	SELECT COUNT(DISTINCT(id))
  	INTO Nf
  	FROM members, feesrecords
  	WHERE id=member_id AND (year_f = query_year OR membership='H') AND Lang1='FR';

  	htp.print('Preferred Language : French  '||Nf);
  	htp.br;

  	SELECT COUNT(DISTINCT(id))
  	INTO Nother
  	FROM members, feesrecords
  	WHERE id=member_id AND (year_f = query_year OR membership='H') AND Lang1 !='EN' AND Lang1 !='FR';

  	htp.print('Other Language: '||Nother);
  	htp.br;

  	htp.br;
    htp.print('<I>Verifica Language: '||TO_CHAR(Nen+Nf+Nother) ||' ?? '|| Nmembers||'</I>');
  	htp.br;

  	htp.br;htp.print('&nbsp');
		htp.br;htp.print('&nbsp');
		htp.br;htp.print('&nbsp');
		htp.hr;
  	htp.br;htp.print('&nbsp');
		htp.br;htp.print('&nbsp');
		htp.br;htp.print('&nbsp');
		htp.br;


		/* Nationalities */

		htp.header(3, 'Nationalities');
		TotNat:=0;
		NNat :=0;
		FOR NatRec IN NatCurs LOOP
			NNat := NNat +1;
			SELECT COUNT(DISTINCT(id))
			INTO NCounter
			FROM members, feesrecords
			WHERE id=member_id AND (year_f = query_year OR membership='H') AND Nationality=NatRec.natid;

			htp.print(NatRec.ename ||':  '||htf.anchor('http://oraweb03.cern.ch/ycc/owa/statistics.NatNameList?natid='||NatRec.natid ||'&query_year='||query_year, NCounter));
--			htp.print(Nationality ||':  '||htf.anchor('http://oraweb03.cern.ch/ycc/owa/statistics.NatNameList?natid='||NatRec.natid ||'&query_year='||query_year, NCounter));
  		htp.br;  		htp.br;
  		TotNat := TotNat + NCounter;
		END LOOP;

		htp.br;
		htp.print('<I>Verifica Nationality; '|| TO_CHAR(TotNat) ||' ?? '|| Nmembers||'</I>');
  	htp.br;
  	htp.print('<I>Total number of Nationalities '||NNat||'</I>');

  	htp.br;htp.print('&nbsp');
		htp.br;htp.print('&nbsp');
		htp.br;htp.print('&nbsp');
		htp.hr;
  	htp.br;htp.print('&nbsp');
		htp.br;htp.print('&nbsp');
		htp.br;htp.print('&nbsp');
		htp.br;




		/* LICENCES*/

		totmemforlic :=0;
	/*	max_lic := MAX(infolicences.infoid);*/
		FOR n IN 0..9 LOOP /* W, EW, D, ED, Y, SU, CK, MM, C */

			SELECT COUNT(DISTINCT(id))
			INTO nlic
			FROM members, feesrecords
  		WHERE id=member_id AND (year_f = query_year OR membership='H') AND LicenceCounter(id)= n  ;


			htp.print(n||' licences '|| htf.anchor('http://oraweb03.cern.ch/ycc/owa/statistics.NLicence?lic='||n||'&query_year='||query_year, nlic));
			htp.br;

 		  totmemforlic := totmemforlic + nlic;
 		  totalNumlicences := totalNumlicences + n*nlic;

		END LOOP;


		htp.br;
		htp.print('<I>Verifica Licences: '||TO_CHAR(totmemforlic) ||' ?? '|| Nmembers||'</I>');
  	htp.br;

  	htp.br;htp.print('&nbsp');
		htp.br;htp.print('&nbsp');
		htp.br;htp.print('&nbsp');
		htp.hr;
  	htp.br;htp.print('&nbsp');
		htp.br;htp.print('&nbsp');
		htp.br;htp.print('&nbsp');
		htp.br;


		numberlicences := 0;
		FOR lic IN 1..14 LOOP
			IF lic NOT IN (7,10,11,13) THEN
				SELECT COUNT(DISTINCT(id))
				INTO vlic
				FROM members, feesrecords, licences
  	  	WHERE id=feesrecords.member_id AND (year_f = query_year OR membership='H') AND id=licences.member_id AND licence_id=lic;

 -- 	  	htp.print('Licence '||LIC_NAME(lic)||' ' ||htf.anchor('http://oraweb03.cern.ch/ycc/owa/statistics.XXLicence?lic='||lic||'&query_year='||query_year, vlic));
  	  	htp.print('Licence '||lic||' ' ||htf.anchor('http://oraweb03.cern.ch/ycc/owa/statistics.XXLicence?lic='||lic||'&query_year='||query_year, vlic));
  	  	htp.br;
  	  	numberlicences := numberlicences+vlic;
			END IF;
  	END LOOP;

		htp.br;
		htp.print('<I>Verifica Licences: '||TO_CHAR(totalNumlicences ) ||' ?? '|| numberlicences||'<I>');
  	htp.br;
  	htp.br;htp.print('&nbsp');
		htp.br;htp.print('&nbsp');
		htp.br;htp.print('&nbsp');


		footer;

	END statistics_members;

/****************************************
 List of who passwed a licence this year
*****************************************/

  PROCEDURE ShowLicenceThisYears (thisyear NUMBER)
  IS
		counter number := 0;
		newmembercounter number :=0;
		SU_lic_info sutest%ROWTYPE;

		CURSOR curs IS
	  	SELECT id,name,firstname,membership,lyear,licence_id,lang1, member_entrance,lcomments
	  	FROM members, licences
	  	WHERE id=licences.member_id and
	  		lyear = thisyear and
	  		id IN (
	  			SELECT feesrecords.member_id
	  			FROM feesrecords
	  			WHERE	year_f=TO_NUMBER(TO_CHAR(sysdate,'YYYY'))
	  			)
	  	ORDER BY name;

	  CURSOR idlicencecurs IS
	  	SELECT *
	  	FROM infolicences
	  	WHERE infoid <> 10 /* entry for BA5 key */ and
	  				infoid <> 7  /* entry for Soling */
	  	ORDER BY infoid;


  BEGIN
	header ('YCC - Statistic about '|| thisyear ||' year licences ');
	htp.header(1,'YCC Statistic on Licences : year '|| thisyear);

	FOR idlicencerec IN idlicencecurs LOOP
		FOR rec IN curs LOOP
			IF rec.licence_id = idlicencerec.infoid THEN
				counter := counter +1;
				IF rec.member_entrance = thisyear THEN
					newmembercounter := newmembercounter +1;
					END IF;
				END IF;
		END LOOP;
		htp.header(2,counter ||' '||idlicencerec.nlicence ||' licence ( '||newmembercounter||' of which new members )');
		IF counter <> 0 THEN
			htp.TableOpen;
  		htp.TableRowOpen;
  		htp.TableHeader('ID');
  		htp.TableHeader('Member');
  		htp.TableHeader('Membership');
  		htp.TableHeader('Member<br>entrance');
  		htp.TableHeader('Licence Comments');
  		htp.TableRowClose;
  		FOR rec IN curs LOOP
				IF rec.licence_id = idlicencerec.infoid THEN
					htp.TableRowOpen;
					htp.TableData(rec.id);
					htp.TableData(rec.name || ' ' || rec.firstname);
					htp.TableData(MembershipList(rec.membership,rec.lang1));
					htp.TableData(rec.member_entrance);
				/*	IF rec.licence_id = 6 THEN /* test on Su licence
						SELECT *
						INTO SU_lic_info
						FROM sutest
						WHERE sutest.member_id = rec.id;
						htp.TableData(rec.lcomments||'<br>TH date: '||TO_CHAR(SU_lic_info.theory)||'  '||SU_lic_info.tcomments||'<BR>Practical test:'||TO_CHAR(SU_lic_info.practical)||'  '||SU_lic_info.pcomments);
					ELSE
						htp.TableData(rec.lcomments);
					END IF; */
					htp.TableData(rec.lcomments);
					htp.TableRowClose;
				END IF;
  		END LOOP;
  		htp.TableClose;
  	END IF;
		htp.br;
		counter := 0;
		newmembercounter := 0;
	END LOOP;

	footer;
  END ShowLicenceThisYears;

PROCEDURE startup IS p_status BOOLEAN; BEGIN
 -- Call the authorize function
 p_status := authorize;
 -- Test if autenticatin has been successfull and print out a message.
 IF p_status = TRUE THEN
 statistics_members(2015);

 ELSE
  NULL;
 END IF;
END;

FUNCTION authorize RETURN BOOLEAN IS
p_user VARCHAR2(10);
p_pwd  VARCHAR2(10);
BEGIN
 -- Set a login realm
 owa_sec.set_protection_realm('Renewal Package');
 p_user := UPPER(owa_sec.get_user_id);
 p_pwd  := owa_sec.get_password;
 -- Set the valid username and password, and return
 -- TRUE if the user enters the correct values in his login dialog

 	IF p_user = 'YCC' AND p_pwd = 'elena' THEN
  RETURN TRUE;
 ELSE
  RETURN FALSE;
 END IF;
END;

END;

/

--------------------------------------------------------
--------------------------------------------------------
-- DDL for Functions
--------------------------------------------------------
--------------------------------------------------------

--------------------------------------------------------
--  DDL for Function COMPUTE_YCC_DEADLINE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "COMPUTE_YCC_DEADLINE" (date_from date, date_ycc_deadline date) return date is
begin
    return case when DATE_YCC_DEADLINE is null then date_from-10-1/2 else date_ycc_deadline end;
end;

/
--------------------------------------------------------
--  DDL for Function GET_CURRENT_CALENDAR_YEAR
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "GET_CURRENT_CALENDAR_YEAR" return number as
begin

  return to_number(to_char(sysdate,'yyyy'));

end get_current_calendar_year;

/
--------------------------------------------------------
--  DDL for Function GET_CURRENT_MEMBERSHIP_YEAR
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "GET_CURRENT_MEMBERSHIP_YEAR" return number as
  y number(4);
  ga date;
  now date;
begin
  now := sysdate;
  y:=to_number(to_char(now,'YYYY'));
  for r in (select datetime from important_dates where what = to_char(y)||' General Assembly') loop
    ga := r.datetime;
  end loop;

  if ga is not null and ga < now then
    y:= y+1;
  end if;

  return y;

end get_current_membership_year;

/
--------------------------------------------------------
--  DDL for Function GET_GENERAL_ASSEMBLY_FOR_YEAR
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "GET_GENERAL_ASSEMBLY_FOR_YEAR" (yyyy number) return date is
begin
  for r in (select datetime from important_dates where what = yyyy||' General Assembly') loop
    return r.datetime;
  end loop;
  return null;
end get_general_assembly_for_year;

/
--------------------------------------------------------
--  DDL for Function GET_PREVIOUS_MEMBERSHIP_YEAR
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "GET_PREVIOUS_MEMBERSHIP_YEAR" return number as
begin

  return get_current_membership_year-1;

end get_previous_membership_year;

/
--------------------------------------------------------
--  DDL for Function IS_CERN_ADDRESS
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "IS_CERN_ADDRESS" (work_address1 varchar2) return number is
begin
if
(
	(
		lower(work_address1) like '%div%' or
		lower(work_address1) like '%dep%' or
		LOWER(work_address1) like '%cern%' or
		work_address1 = 'TS/CSE'
		or work_address1 = 'c/o David Luckey'
		or work_address1 = 'PH-UCM'  or
		work_address1 = 'AB/BDI'  or
		work_address1 = 'PH/UCM'  or
		work_address1 = 'IT/IS'  or
		work_address1 = 'De FI/PI'  or
		work_address1 = 'PH-DT1' or
		work_address1 = 'PH/DT1' or
		work_address1 = 'PH/TH' or
		work_address1 = 'FIRE BRIGADE' or
		work_address1 = 'ST/MA/TCR' or
		work_address1 = 'TS/MME' or
		work_address1 = 'TS-CSE' or
		work_address1 = 'TS/EL' or
		work_address1 = 'PH/UAD' or
		work_address1 = 'PH/SFT' or
		work_address1 = 'AT/MTM' or
		work_address1 = 'AB/BT' or
		work_address1 = 'PH/ATR' or
		work_address1 = 'PH/ETH' or
		work_address1 = 'IT/GD'
	)
	and
	(
		work_address1 not in ('WIPO IT Division','WTO Div TPR','Television Suisse Romande div IT','DEP FED DE L''ECONOMIE - SECR GEN')
	)
)
then
	return 1;
else
	return 0;
end if;

end;

/
--------------------------------------------------------
--  DDL for Function YCC_AUTHENTICATE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "YCC_AUTHENTICATE" (p_username in varchar2, p_password in varchar2) return varchar2 as
/*
This is based on the ycc_authentication package in yccapex schema, created by Michal.Kwiatek@cern.ch in May-June 2020.
Returns p_username if the username and password match a YCC user, or null otherwise.
*/
    url varchar2(100) := 'https://yachting.web.cern.ch/yachting/cgi-bin/res/login.pl';
    req   utl_http.req;
    resp  utl_http.resp;
    l_res varchar2(32767);
    content varchar2(4000);
    l_text varchar2(4000);
  begin

    content:='LOGON_ID='||p_username||'&LOGON_PASSWD='||utl_url.escape(p_password, TRUE, 'ISO-8859-1')||'&quiet=1&including_applicants=1';
    utl_http.set_wallet('file:/ORA/dbs01/syscontrol/etc/WALLETS/rdbms');
    req := UTL_HTTP.BEGIN_REQUEST(url, 'POST');
    UTL_HTTP.SET_HEADER(req, 'user-agent', 'mozilla/4.0');
    UTL_HTTP.SET_HEADER(req, 'content-type', 'application/x-www-form-urlencoded');
    UTL_HTTP.SET_HEADER(req, 'Content-Length', length(content));

    UTL_HTTP.WRITE_TEXT(req, content);
    resp := UTL_HTTP.GET_RESPONSE(req);

    begin
      loop
        utl_http.read_text(resp, l_text, 4000);
        if l_res is null then
           l_res := l_text;
        else
           l_res := l_res || l_text;
        end if;
      end loop;
    exception
      when utl_http.end_of_body then
        utl_http.end_response(resp);
    end;

    l_res := trim(l_res);


    if substr(l_res,1,4) = 'true' then
        return p_username;
    else
        return null;
    end if;
  end ycc_authenticate;

/

--------------------------------------------------------
--------------------------------------------------------
-- Constraints
--------------------------------------------------------
--------------------------------------------------------

--------------------------------------------------------
--  Constraints for Table IMPORTANT_VALUES
--------------------------------------------------------

  ALTER TABLE "IMPORTANT_VALUES" MODIFY ("WHAT" NOT NULL ENABLE);
  ALTER TABLE "IMPORTANT_VALUES" MODIFY ("VAL" NOT NULL ENABLE);
  ALTER TABLE "IMPORTANT_VALUES" MODIFY ("LAST_MODIFIED" NOT NULL ENABLE);
  ALTER TABLE "IMPORTANT_VALUES" ADD PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table BA5_OBSOLETE
--------------------------------------------------------

  ALTER TABLE "BA5_OBSOLETE" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table MD_APPLICATIONS
--------------------------------------------------------

  ALTER TABLE "MD_APPLICATIONS" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "MD_APPLICATIONS" MODIFY ("PROJECT_ID_FK" NOT NULL ENABLE);
  ALTER TABLE "MD_APPLICATIONS" MODIFY ("SECURITY_GROUP_ID" NOT NULL ENABLE);
  ALTER TABLE "MD_APPLICATIONS" MODIFY ("CREATED_ON" NOT NULL ENABLE);
  ALTER TABLE "MD_APPLICATIONS" ADD CONSTRAINT "MD_APPLICATIONS_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TO_DEL_LOTTERY_BCK20190207
--------------------------------------------------------

  ALTER TABLE "TO_DEL_LOTTERY_BCK20190207" MODIFY ("YEAR" NOT NULL ENABLE);
  ALTER TABLE "TO_DEL_LOTTERY_BCK20190207" MODIFY ("MEMBER_ID" NOT NULL ENABLE);
  ALTER TABLE "TO_DEL_LOTTERY_BCK20190207" MODIFY ("COURSE1" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table REGATTA_PARTICIPATION
--------------------------------------------------------

  ALTER TABLE "REGATTA_PARTICIPATION" MODIFY ("MEMBER_ID" NOT NULL ENABLE);
  ALTER TABLE "REGATTA_PARTICIPATION" MODIFY ("REGATTA_ID" NOT NULL ENABLE);
  ALTER TABLE "REGATTA_PARTICIPATION" MODIFY ("PREFERENCE" NOT NULL ENABLE);
  ALTER TABLE "REGATTA_PARTICIPATION" MODIFY ("STATUS" NOT NULL ENABLE);
  ALTER TABLE "REGATTA_PARTICIPATION" ADD PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "REGATTA_PARTICIPATION" ADD CONSTRAINT "REGATTA_PARTICIP_UQ" UNIQUE ("MEMBER_ID", "REGATTA_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table SUTEST_LASTENTRE2004_OBS
--------------------------------------------------------

  ALTER TABLE "SUTEST_LASTENTRE2004_OBS" MODIFY ("MEMBER_ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table KEYS
--------------------------------------------------------

  ALTER TABLE "KEYS" MODIFY ("MEMBER_ID" NOT NULL ENABLE);
  ALTER TABLE "KEYS" MODIFY ("KEY_ID" NOT NULL ENABLE);
  ALTER TABLE "KEYS" MODIFY ("KYEAR" NOT NULL ENABLE);
  ALTER TABLE "KEYS" ADD CONSTRAINT "KEYS_PK" PRIMARY KEY ("KEY_ID", "MEMBER_ID", "KYEAR")
  USING INDEX "KEYS_PK"  ENABLE;
--------------------------------------------------------
--  Constraints for Table HT_WEB_LOGON
--------------------------------------------------------

  ALTER TABLE "HT_WEB_LOGON" MODIFY ("MEMBER_ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table INFOLICENCES
--------------------------------------------------------

  ALTER TABLE "INFOLICENCES" MODIFY ("INFOID" NOT NULL ENABLE);
  ALTER TABLE "INFOLICENCES" MODIFY ("DESCRIPTION" NOT NULL ENABLE);
  ALTER TABLE "INFOLICENCES" ADD CONSTRAINT "LICINFO_PK" PRIMARY KEY ("INFOID")
  USING INDEX "LICINFO_PK"  ENABLE;
--------------------------------------------------------
--  Constraints for Table COUNTRIES
--------------------------------------------------------

  ALTER TABLE "COUNTRIES" MODIFY ("COUNTRY_NAME" NOT NULL ENABLE);
  ALTER TABLE "COUNTRIES" MODIFY ("COUNTRY_CODE" NOT NULL ENABLE);
  ALTER TABLE "COUNTRIES" ADD PRIMARY KEY ("COUNTRY_CODE")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table ADMIN
--------------------------------------------------------

  ALTER TABLE "ADMIN" MODIFY ("MEMBER_ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table HOLIDAYS
--------------------------------------------------------

  ALTER TABLE "HOLIDAYS" MODIFY ("DAY" NOT NULL ENABLE);
  ALTER TABLE "HOLIDAYS" MODIFY ("LABEL" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table LOTTERY_RESULTS_ARCHIVE
--------------------------------------------------------

  ALTER TABLE "LOTTERY_RESULTS_ARCHIVE" MODIFY ("MEMBER_ID" NOT NULL ENABLE);
  ALTER TABLE "LOTTERY_RESULTS_ARCHIVE" MODIFY ("YEAR" NOT NULL ENABLE);
  ALTER TABLE "LOTTERY_RESULTS_ARCHIVE" MODIFY ("DRAWN_SEQ" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table TESTS
--------------------------------------------------------

  ALTER TABLE "TESTS" MODIFY ("TEST_ID" NOT NULL ENABLE);
  ALTER TABLE "TESTS" MODIFY ("TEST_TYPE" NOT NULL ENABLE);
  ALTER TABLE "TESTS" MODIFY ("MEMBER_ID" NOT NULL ENABLE);
  ALTER TABLE "TESTS" MODIFY ("TESTER_ID" NOT NULL ENABLE);
  ALTER TABLE "TESTS" MODIFY ("TEST_DATE" NOT NULL ENABLE);
  ALTER TABLE "TESTS" MODIFY ("RESULT" NOT NULL ENABLE);
  ALTER TABLE "TESTS" MODIFY ("COMMENTS" NOT NULL ENABLE);
  ALTER TABLE "TESTS" ADD PRIMARY KEY ("TEST_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table MEMBERSHIP
--------------------------------------------------------

  ALTER TABLE "MEMBERSHIP" MODIFY ("MB_ID" NOT NULL ENABLE);
  ALTER TABLE "MEMBERSHIP" MODIFY ("MB_NAME" NOT NULL ENABLE);
  ALTER TABLE "MEMBERSHIP" MODIFY ("E_DESC" NOT NULL ENABLE);
  ALTER TABLE "MEMBERSHIP" MODIFY ("F_DESC" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table BUVETTE
--------------------------------------------------------

  ALTER TABLE "BUVETTE" MODIFY ("RES_ID" NOT NULL ENABLE);
  ALTER TABLE "BUVETTE" MODIFY ("MEMBER_ID" NOT NULL ENABLE);
  ALTER TABLE "BUVETTE" MODIFY ("DAY" NOT NULL ENABLE);
  ALTER TABLE "BUVETTE" MODIFY ("QUANTITY" NOT NULL ENABLE);
  ALTER TABLE "BUVETTE" MODIFY ("MODIFIED" NOT NULL ENABLE);
  ALTER TABLE "BUVETTE" ADD PRIMARY KEY ("RES_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table EMAIL_TEMPLATES
--------------------------------------------------------

  ALTER TABLE "EMAIL_TEMPLATES" ADD PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table COURSES_OBS
--------------------------------------------------------

  ALTER TABLE "COURSES_OBS" MODIFY ("MEMBER_ID" NOT NULL ENABLE);
  ALTER TABLE "COURSES_OBS" ADD CONSTRAINT "COURSES_PK" PRIMARY KEY ("MEMBER_ID", "CLASS_ID")
  USING INDEX "COURSES_PK"  ENABLE;
--------------------------------------------------------
--  Constraints for Table REGATTAS_EXT
--------------------------------------------------------

  ALTER TABLE "REGATTAS_EXT" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "REGATTAS_EXT" MODIFY ("DATE_FROM" NOT NULL ENABLE);
  ALTER TABLE "REGATTAS_EXT" MODIFY ("NAME" NOT NULL ENABLE);
  ALTER TABLE "REGATTAS_EXT" MODIFY ("YCC_BOAT_CATEGORY" NOT NULL ENABLE);
  ALTER TABLE "REGATTAS_EXT" ADD PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table FEESRECORDS
--------------------------------------------------------

  ALTER TABLE "FEESRECORDS" MODIFY ("MEMBER_ID" NOT NULL ENABLE);
  ALTER TABLE "FEESRECORDS" MODIFY ("YEAR_F" NOT NULL ENABLE);
  ALTER TABLE "FEESRECORDS" MODIFY ("FEE" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table SU_PREOUTING_LASTENTRY2003_OBS
--------------------------------------------------------

  ALTER TABLE "SU_PREOUTING_LASTENTRY2003_OBS" MODIFY ("MEMBER_ID" NOT NULL ENABLE);
  ALTER TABLE "SU_PREOUTING_LASTENTRY2003_OBS" MODIFY ("YEAR" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table FEES
--------------------------------------------------------

  ALTER TABLE "FEES" MODIFY ("CAT_ID" NOT NULL ENABLE);
  ALTER TABLE "FEES" MODIFY ("DESCRIPTION" NOT NULL ENABLE);
  ALTER TABLE "FEES" MODIFY ("ENTRANCE_FEE" NOT NULL ENABLE);
  ALTER TABLE "FEES" MODIFY ("ANNUAL_FEE" NOT NULL ENABLE);
  ALTER TABLE "FEES" ADD CONSTRAINT "CAT_PK" PRIMARY KEY ("CAT_ID")
  USING INDEX "CAT_PK"  ENABLE;
  ALTER TABLE "FEES" ADD CONSTRAINT "CHECK_CAT" CHECK (cat_id in ('AS','AJ','FM','H','C','T')) ENABLE;
--------------------------------------------------------
--  Constraints for Table R_MEMBERS
--------------------------------------------------------

  ALTER TABLE "R_MEMBERS" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table WEBNEWS_EMPTY
--------------------------------------------------------

  ALTER TABLE "WEBNEWS_EMPTY" MODIFY ("SUBMITTER" NOT NULL ENABLE);
  ALTER TABLE "WEBNEWS_EMPTY" MODIFY ("SUBMITTER_EMAIL" NOT NULL ENABLE);
  ALTER TABLE "WEBNEWS_EMPTY" MODIFY ("SUBMISSION" NOT NULL ENABLE);
  ALTER TABLE "WEBNEWS_EMPTY" MODIFY ("MESSAGE" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table NEWMEMBERS_EMPTY
--------------------------------------------------------

  ALTER TABLE "NEWMEMBERS_EMPTY" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "NEWMEMBERS_EMPTY" MODIFY ("NAME" NOT NULL ENABLE);
  ALTER TABLE "NEWMEMBERS_EMPTY" MODIFY ("FIRSTNAME" NOT NULL ENABLE);
  ALTER TABLE "NEWMEMBERS_EMPTY" MODIFY ("MEMBERSHIP" NOT NULL ENABLE);
  ALTER TABLE "NEWMEMBERS_EMPTY" MODIFY ("MEMBER_ENTRANCE" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table EMAIL_QUEUE_TABLE
--------------------------------------------------------

  ALTER TABLE "EMAIL_QUEUE_TABLE" ADD PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table MULTIPLERESERVATION
--------------------------------------------------------

  ALTER TABLE "MULTIPLERESERVATION" MODIFY ("RES_ID" NOT NULL ENABLE);
  ALTER TABLE "MULTIPLERESERVATION" MODIFY ("MEMBER_ID" NOT NULL ENABLE);
  ALTER TABLE "MULTIPLERESERVATION" MODIFY ("RESDATE" NOT NULL ENABLE);
  ALTER TABLE "MULTIPLERESERVATION" MODIFY ("CREATED" NOT NULL ENABLE);
  ALTER TABLE "MULTIPLERESERVATION" MODIFY ("MODIFIED" NOT NULL ENABLE);
  ALTER TABLE "MULTIPLERESERVATION" MODIFY ("QUANTITY1" NOT NULL ENABLE);
  ALTER TABLE "MULTIPLERESERVATION" MODIFY ("QUANTITY2" NOT NULL ENABLE);
  ALTER TABLE "MULTIPLERESERVATION" MODIFY ("QUANTITY3" NOT NULL ENABLE);
  ALTER TABLE "MULTIPLERESERVATION" MODIFY ("QUANTITY4" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table LOTTERY_RESULTS
--------------------------------------------------------

  ALTER TABLE "LOTTERY_RESULTS" MODIFY ("MEMBER_ID" NOT NULL ENABLE);
  ALTER TABLE "LOTTERY_RESULTS" MODIFY ("YEAR" NOT NULL ENABLE);
  ALTER TABLE "LOTTERY_RESULTS" MODIFY ("DRAWN_SEQ" NOT NULL ENABLE);
  ALTER TABLE "LOTTERY_RESULTS" ADD PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "LOTTERY_RESULTS" ADD CONSTRAINT "LOTTERY_RESULTS_UQ1" UNIQUE ("MEMBER_ID", "YEAR")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "LOTTERY_RESULTS" ADD CONSTRAINT "LOTTERY_RESULTS_UQ2" UNIQUE ("DRAWN_SEQ", "YEAR")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table MEMBERS_DATA_HISTORY
--------------------------------------------------------

  ALTER TABLE "MEMBERS_DATA_HISTORY" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "MEMBERS_DATA_HISTORY" MODIFY ("NAME" NOT NULL ENABLE);
  ALTER TABLE "MEMBERS_DATA_HISTORY" MODIFY ("FIRSTNAME" NOT NULL ENABLE);
  ALTER TABLE "MEMBERS_DATA_HISTORY" MODIFY ("MEMBERSHIP" NOT NULL ENABLE);
  ALTER TABLE "MEMBERS_DATA_HISTORY" MODIFY ("HOME_ADDR" NOT NULL ENABLE);
  ALTER TABLE "MEMBERS_DATA_HISTORY" MODIFY ("MEMBER_ENTRANCE" NOT NULL ENABLE);
  ALTER TABLE "MEMBERS_DATA_HISTORY" MODIFY ("VALID_UNTIL_DATE" NOT NULL ENABLE);
  ALTER TABLE "MEMBERS_DATA_HISTORY" ADD CONSTRAINT "MEMBERS_DC_PK" PRIMARY KEY ("ID", "VALID_UNTIL_DATE")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table LICENCES
--------------------------------------------------------

  ALTER TABLE "LICENCES" MODIFY ("MEMBER_ID" NOT NULL ENABLE);
  ALTER TABLE "LICENCES" MODIFY ("LICENCE_ID" NOT NULL ENABLE);
  ALTER TABLE "LICENCES" MODIFY ("LYEAR" NOT NULL ENABLE);
  ALTER TABLE "LICENCES" ADD CONSTRAINT "LICENCE_PK" PRIMARY KEY ("LICENCE_ID", "MEMBER_ID")
  USING INDEX "LICENCE_PK"  ENABLE;
--------------------------------------------------------
--  Constraints for Table REGATTA_SERIES_EXT
--------------------------------------------------------

  ALTER TABLE "REGATTA_SERIES_EXT" MODIFY ("NAME" NOT NULL ENABLE);
  ALTER TABLE "REGATTA_SERIES_EXT" MODIFY ("YEAR" NOT NULL ENABLE);
  ALTER TABLE "REGATTA_SERIES_EXT" ADD PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table REGATTAS_IN_SERIES
--------------------------------------------------------

  ALTER TABLE "REGATTAS_IN_SERIES" MODIFY ("REGATTA_IN_SERIES_ID" NOT NULL ENABLE);
  ALTER TABLE "REGATTAS_IN_SERIES" MODIFY ("REGATTA_ID" NOT NULL ENABLE);
  ALTER TABLE "REGATTAS_IN_SERIES" MODIFY ("SERIES_ID" NOT NULL ENABLE);
  ALTER TABLE "REGATTAS_IN_SERIES" ADD PRIMARY KEY ("REGATTA_IN_SERIES_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "REGATTAS_IN_SERIES" ADD CONSTRAINT "REGATTAS_IN_SERIES_UQ" UNIQUE ("REGATTA_ID", "SERIES_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table STATUS
--------------------------------------------------------

  ALTER TABLE "STATUS" MODIFY ("STAT_ID" NOT NULL ENABLE);
  ALTER TABLE "STATUS" MODIFY ("BOAT_ID" NOT NULL ENABLE);
  ALTER TABLE "STATUS" MODIFY ("OWNER_ID" NOT NULL ENABLE);
  ALTER TABLE "STATUS" MODIFY ("LABEL" NOT NULL ENABLE);
  ALTER TABLE "STATUS" MODIFY ("S_BEGIN" NOT NULL ENABLE);
  ALTER TABLE "STATUS" MODIFY ("STATUS" NOT NULL ENABLE);
  ALTER TABLE "STATUS" MODIFY ("MODIFIED" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table MD_APPLICATIONFILES
--------------------------------------------------------

  ALTER TABLE "MD_APPLICATIONFILES" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "MD_APPLICATIONFILES" MODIFY ("APPLICATIONS_ID_FK" NOT NULL ENABLE);
  ALTER TABLE "MD_APPLICATIONFILES" MODIFY ("NAME" NOT NULL ENABLE);
  ALTER TABLE "MD_APPLICATIONFILES" MODIFY ("URI" NOT NULL ENABLE);
  ALTER TABLE "MD_APPLICATIONFILES" MODIFY ("TYPE" NOT NULL ENABLE);
  ALTER TABLE "MD_APPLICATIONFILES" MODIFY ("STATE" NOT NULL ENABLE);
  ALTER TABLE "MD_APPLICATIONFILES" MODIFY ("SECURITY_GROUP_ID" NOT NULL ENABLE);
  ALTER TABLE "MD_APPLICATIONFILES" MODIFY ("CREATED_ON" NOT NULL ENABLE);
  ALTER TABLE "MD_APPLICATIONFILES" ADD CONSTRAINT "MD_APPLICATIONFILES_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table USERLIST
--------------------------------------------------------

  ALTER TABLE "USERLIST" ADD UNIQUE ("USERNAME")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table MEMBERS_XX_EMPTY
--------------------------------------------------------

  ALTER TABLE "MEMBERS_XX_EMPTY" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "MEMBERS_XX_EMPTY" MODIFY ("NAME" NOT NULL ENABLE);
  ALTER TABLE "MEMBERS_XX_EMPTY" MODIFY ("FIRSTNAME" NOT NULL ENABLE);
  ALTER TABLE "MEMBERS_XX_EMPTY" MODIFY ("MEMBERSHIP" NOT NULL ENABLE);
  ALTER TABLE "MEMBERS_XX_EMPTY" MODIFY ("MEMBER_ENTRANCE" NOT NULL ENABLE);
  ALTER TABLE "MEMBERS_XX_EMPTY" ADD CONSTRAINT "MEMBERS_XX_PK" PRIMARY KEY ("ID")
  USING INDEX "MEMBERS_XX_PK"  ENABLE;
--------------------------------------------------------
--  Constraints for Table BOATS
--------------------------------------------------------

  ALTER TABLE "BOATS" MODIFY ("BOAT_ID" NOT NULL ENABLE);
  ALTER TABLE "BOATS" MODIFY ("NAME" NOT NULL ENABLE);
  ALTER TABLE "BOATS" MODIFY ("TYPE" NOT NULL ENABLE);
  ALTER TABLE "BOATS" MODIFY ("LICENSE" NOT NULL ENABLE);
  ALTER TABLE "BOATS" MODIFY ("CLASS" NOT NULL ENABLE);
  ALTER TABLE "BOATS" MODIFY ("TABLE_POS" NOT NULL ENABLE);
  ALTER TABLE "BOATS" ADD PRIMARY KEY ("BOAT_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "BOATS" ADD UNIQUE ("NAME")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "BOATS" ADD UNIQUE ("YCC_NUM")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "BOATS" ADD UNIQUE ("TABLE_POS")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TEACHERS
--------------------------------------------------------

  ALTER TABLE "TEACHERS" MODIFY ("MEMBER_ID" NOT NULL ENABLE);
  ALTER TABLE "TEACHERS" MODIFY ("LICENSE" NOT NULL ENABLE);
  ALTER TABLE "TEACHERS" ADD PRIMARY KEY ("TEACHER_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table FEESCOURSES_LASTENTRY2005_OBS
--------------------------------------------------------

  ALTER TABLE "FEESCOURSES_LASTENTRY2005_OBS" MODIFY ("MEMBER_ID" NOT NULL ENABLE);
  ALTER TABLE "FEESCOURSES_LASTENTRY2005_OBS" MODIFY ("YEAR_C" NOT NULL ENABLE);
  ALTER TABLE "FEESCOURSES_LASTENTRY2005_OBS" MODIFY ("COURSE" NOT NULL ENABLE);
  ALTER TABLE "FEESCOURSES_LASTENTRY2005_OBS" MODIFY ("FEECOURSE" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table DEPARTMENTS
--------------------------------------------------------

  ALTER TABLE "DEPARTMENTS" ADD PRIMARY KEY ("DEP_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table REGATTA_PROFILES
--------------------------------------------------------

  ALTER TABLE "REGATTA_PROFILES" MODIFY ("MEMBER_ID" NOT NULL ENABLE);
  ALTER TABLE "REGATTA_PROFILES" MODIFY ("PROFILE_YEAR" NOT NULL ENABLE);
  ALTER TABLE "REGATTA_PROFILES" MODIFY ("EXPERIENCE" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table KEYSLOG
--------------------------------------------------------

  ALTER TABLE "KEYSLOG" MODIFY ("KEYSLOG_ID" NOT NULL ENABLE);
  ALTER TABLE "KEYSLOG" MODIFY ("BOAT_ID" NOT NULL ENABLE);
  ALTER TABLE "KEYSLOG" MODIFY ("TAKEN_BY" NOT NULL ENABLE);
  ALTER TABLE "KEYSLOG" MODIFY ("TAKEN" NOT NULL ENABLE);
  ALTER TABLE "KEYSLOG" ADD PRIMARY KEY ("KEYSLOG_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table IMPORTANT_DATES
--------------------------------------------------------

  ALTER TABLE "IMPORTANT_DATES" MODIFY ("WHAT" NOT NULL ENABLE);
  ALTER TABLE "IMPORTANT_DATES" ADD PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "IMPORTANT_DATES" ADD CONSTRAINT "IMPORTANT_DATES_UQ" UNIQUE ("WHAT")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table T_MEMBERS_OBSOLETE
--------------------------------------------------------

  ALTER TABLE "T_MEMBERS_OBSOLETE" MODIFY ("T_ID" NOT NULL ENABLE);
  ALTER TABLE "T_MEMBERS_OBSOLETE" MODIFY ("T_YEAR" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table BOAT_KEYS
--------------------------------------------------------

  ALTER TABLE "BOAT_KEYS" MODIFY ("BOAT_ID" NOT NULL ENABLE);
  ALTER TABLE "BOAT_KEYS" MODIFY ("KEY_NR" NOT NULL ENABLE);
  ALTER TABLE "BOAT_KEYS" ADD CONSTRAINT "BOAT_KEYS_PK" PRIMARY KEY ("BOAT_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table MEMBERSHIP_APPLICATIONS_TO_DEL
--------------------------------------------------------

  ALTER TABLE "MEMBERSHIP_APPLICATIONS_TO_DEL" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "MEMBERSHIP_APPLICATIONS_TO_DEL" MODIFY ("NAME" NOT NULL ENABLE);
  ALTER TABLE "MEMBERSHIP_APPLICATIONS_TO_DEL" MODIFY ("FIRSTNAME" NOT NULL ENABLE);
  ALTER TABLE "MEMBERSHIP_APPLICATIONS_TO_DEL" MODIFY ("BIRTHDAY" NOT NULL ENABLE);
  ALTER TABLE "MEMBERSHIP_APPLICATIONS_TO_DEL" MODIFY ("MEMBERSHIP" NOT NULL ENABLE);
  ALTER TABLE "MEMBERSHIP_APPLICATIONS_TO_DEL" MODIFY ("CATEGORY" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table MD_TABLESPACES
--------------------------------------------------------

  ALTER TABLE "MD_TABLESPACES" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "MD_TABLESPACES" MODIFY ("SCHEMA_ID_FK" NOT NULL ENABLE);
  ALTER TABLE "MD_TABLESPACES" MODIFY ("SECURITY_GROUP_ID" NOT NULL ENABLE);
  ALTER TABLE "MD_TABLESPACES" MODIFY ("CREATED_ON" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table MD_FILE_ARTIFACTS
--------------------------------------------------------

  ALTER TABLE "MD_FILE_ARTIFACTS" MODIFY ("ID" CONSTRAINT "MD_APP_FILE_ART_NONULL" NOT NULL ENABLE);
  ALTER TABLE "MD_FILE_ARTIFACTS" MODIFY ("APPLICATIONFILES_ID" CONSTRAINT "MD_APPL_FILE_FK_NONULL" NOT NULL ENABLE);
  ALTER TABLE "MD_FILE_ARTIFACTS" MODIFY ("SECURITY_GROUP_ID" NOT NULL ENABLE);
  ALTER TABLE "MD_FILE_ARTIFACTS" MODIFY ("CREATED_ON" NOT NULL ENABLE);
  ALTER TABLE "MD_FILE_ARTIFACTS" ADD CONSTRAINT "MD_FILE_ARTIFACTS_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table EMPLOYEES
--------------------------------------------------------

  ALTER TABLE "EMPLOYEES" ADD PRIMARY KEY ("EMP_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table AGENDA_EMPTY
--------------------------------------------------------

  ALTER TABLE "AGENDA_EMPTY" MODIFY ("DAY" NOT NULL ENABLE);
  ALTER TABLE "AGENDA_EMPTY" MODIFY ("SUBMITTER" NOT NULL ENABLE);
  ALTER TABLE "AGENDA_EMPTY" MODIFY ("TYPE" NOT NULL ENABLE);
  ALTER TABLE "AGENDA_EMPTY" MODIFY ("TITLE" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table INTEREST_LEVELS
--------------------------------------------------------

  ALTER TABLE "INTEREST_LEVELS" ADD PRIMARY KEY ("INTEREST_LEVEL")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table ENTRANCE_FEESRECORDS
--------------------------------------------------------

  ALTER TABLE "ENTRANCE_FEESRECORDS" ADD CONSTRAINT "ENTRANCE_FEESRECORDS_PK" PRIMARY KEY ("MEMBER_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "ENTRANCE_FEESRECORDS" MODIFY ("MEMBER_ID" NOT NULL ENABLE);
  ALTER TABLE "ENTRANCE_FEESRECORDS" ADD CONSTRAINT "ENTRANCE_FEE_UQ" UNIQUE ("MEMBER_ID", "YEAR_F")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table COMMITTEE
--------------------------------------------------------

  ALTER TABLE "COMMITTEE" MODIFY ("MEMBER_ID" NOT NULL ENABLE);
  ALTER TABLE "COMMITTEE" MODIFY ("CYEAR" NOT NULL ENABLE);
  ALTER TABLE "COMMITTEE" ADD CONSTRAINT "COMMITTEE_PK" PRIMARY KEY ("MEMBER_ID", "CYEAR")
  USING INDEX "COMMITTEE_PK"  ENABLE;
  ALTER TABLE "COMMITTEE" MODIFY ("COMMID" NOT NULL ENABLE);
  ALTER TABLE "COMMITTEE" ADD UNIQUE ("COMMID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table LOTTERY_PLACES
--------------------------------------------------------

  ALTER TABLE "LOTTERY_PLACES" ADD PRIMARY KEY ("KEY")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table RESERVATIONS
--------------------------------------------------------

  ALTER TABLE "RESERVATIONS" MODIFY ("RES_ID" NOT NULL ENABLE);
  ALTER TABLE "RESERVATIONS" MODIFY ("BOAT_ID" NOT NULL ENABLE);
  ALTER TABLE "RESERVATIONS" MODIFY ("OWNER_ID" NOT NULL ENABLE);
  ALTER TABLE "RESERVATIONS" MODIFY ("LABEL" NOT NULL ENABLE);
  ALTER TABLE "RESERVATIONS" MODIFY ("DAY" NOT NULL ENABLE);
  ALTER TABLE "RESERVATIONS" MODIFY ("PERIOD" NOT NULL ENABLE);
  ALTER TABLE "RESERVATIONS" MODIFY ("MODIFIED" NOT NULL ENABLE);
  ALTER TABLE "RESERVATIONS" ADD PRIMARY KEY ("RES_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table CLASSES_OBSOLETE2001
--------------------------------------------------------

  ALTER TABLE "CLASSES_OBSOLETE2001" MODIFY ("CLASS_ID" NOT NULL ENABLE);
  ALTER TABLE "CLASSES_OBSOLETE2001" MODIFY ("COURSE_ID" NOT NULL ENABLE);
  ALTER TABLE "CLASSES_OBSOLETE2001" MODIFY ("TEACHER_ID" NOT NULL ENABLE);
  ALTER TABLE "CLASSES_OBSOLETE2001" MODIFY ("COURSE_YEAR" NOT NULL ENABLE);
  ALTER TABLE "CLASSES_OBSOLETE2001" ADD CONSTRAINT "CLASSES_PK" PRIMARY KEY ("CLASS_ID", "TEACHER_ID", "COURSE_YEAR")
  USING INDEX "CLASSES_PK"  ENABLE;
--------------------------------------------------------
--  Constraints for Table DELETED_MEMBER_APPS
--------------------------------------------------------

  ALTER TABLE "DELETED_MEMBER_APPS" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "DELETED_MEMBER_APPS" MODIFY ("NAME" NOT NULL ENABLE);
  ALTER TABLE "DELETED_MEMBER_APPS" MODIFY ("FIRSTNAME" NOT NULL ENABLE);
  ALTER TABLE "DELETED_MEMBER_APPS" ADD PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table WEB_LOGON
--------------------------------------------------------

  ALTER TABLE "WEB_LOGON" MODIFY ("MEMBER_ID" NOT NULL ENABLE);
  ALTER TABLE "WEB_LOGON" MODIFY ("LOGON_ID" NOT NULL ENABLE);
  ALTER TABLE "WEB_LOGON" ADD PRIMARY KEY ("MEMBER_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "WEB_LOGON" ADD UNIQUE ("LOGON_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table LOTTERY
--------------------------------------------------------

  ALTER TABLE "LOTTERY" MODIFY ("YEAR" NOT NULL ENABLE);
  ALTER TABLE "LOTTERY" MODIFY ("MEMBER_ID" NOT NULL ENABLE);
  ALTER TABLE "LOTTERY" ADD PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "LOTTERY" ADD CONSTRAINT "LOTTERY_UQ" UNIQUE ("YEAR", "MEMBER_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table MEMBERSHIP_APPLICATIONS
--------------------------------------------------------

  ALTER TABLE "MEMBERSHIP_APPLICATIONS" ADD CONSTRAINT "NEW_MEMBER_LOGON_ID_UNIQUE" UNIQUE ("LOGON_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "MEMBERSHIP_APPLICATIONS" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "MEMBERSHIP_APPLICATIONS" MODIFY ("NAME" NOT NULL ENABLE);
  ALTER TABLE "MEMBERSHIP_APPLICATIONS" MODIFY ("FIRSTNAME" NOT NULL ENABLE);
  ALTER TABLE "MEMBERSHIP_APPLICATIONS" MODIFY ("BIRTHDAY" NOT NULL ENABLE);
  ALTER TABLE "MEMBERSHIP_APPLICATIONS" ADD CONSTRAINT "APPLICATIONS_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "MEMBERSHIP_APPLICATIONS" MODIFY ("MEMBERSHIP" NOT NULL ENABLE);
  ALTER TABLE "MEMBERSHIP_APPLICATIONS" MODIFY ("CATEGORY" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table YCCLOG
--------------------------------------------------------

  ALTER TABLE "YCCLOG" MODIFY ("BOAT_ID" NOT NULL ENABLE);
  ALTER TABLE "YCCLOG" MODIFY ("OWNER_ID" NOT NULL ENABLE);
  ALTER TABLE "YCCLOG" MODIFY ("STATUS" NOT NULL ENABLE);
  ALTER TABLE "YCCLOG" MODIFY ("MODIFIED" NOT NULL ENABLE);
  ALTER TABLE "YCCLOG" MODIFY ("LOG_ID" NOT NULL ENABLE);
  ALTER TABLE "YCCLOG" ADD PRIMARY KEY ("MODIFIED")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table MEMBERS
--------------------------------------------------------

  ALTER TABLE "MEMBERS" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "MEMBERS" MODIFY ("NAME" NOT NULL ENABLE);
  ALTER TABLE "MEMBERS" MODIFY ("FIRSTNAME" NOT NULL ENABLE);
  ALTER TABLE "MEMBERS" MODIFY ("MEMBERSHIP" NOT NULL ENABLE);
  ALTER TABLE "MEMBERS" MODIFY ("HOME_ADDR" NOT NULL ENABLE);
  ALTER TABLE "MEMBERS" MODIFY ("MEMBER_ENTRANCE" NOT NULL ENABLE);
  ALTER TABLE "MEMBERS" ADD CONSTRAINT "MEMBERS_PK" PRIMARY KEY ("ID")
  USING INDEX "MEMBERS_PK"  ENABLE;
--------------------------------------------------------
--  Constraints for Table NATIONALITIES_TO_DROP
--------------------------------------------------------

  ALTER TABLE "NATIONALITIES_TO_DROP" MODIFY ("NATID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table DB_EDITS
--------------------------------------------------------

-- 
--  ALTER TABLE "DB_EDITS" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "DB_EDITS" MODIFY ("TABLE_NAME" NOT NULL ENABLE);
  ALTER TABLE "DB_EDITS" MODIFY ("ROW_ID" NOT NULL ENABLE);
  ALTER TABLE "DB_EDITS" MODIFY ("TIME_STAMP" NOT NULL ENABLE);
  ALTER TABLE "DB_EDITS" ADD CONSTRAINT "DB_EDITS_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table BA5ASSIGN_OBSOLETE
--------------------------------------------------------

  ALTER TABLE "BA5ASSIGN_OBSOLETE" ADD CONSTRAINT "BA5ASS_MEMBER_ID_FK" FOREIGN KEY ("MEMBER_ID")
	  REFERENCES "MEMBERS" ("ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table BOATS
--------------------------------------------------------

  ALTER TABLE "BOATS" ADD FOREIGN KEY ("MAINTAINER_ID2")
	  REFERENCES "MEMBERS" ("ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table CLASSES_OBSOLETE2001
--------------------------------------------------------

  ALTER TABLE "CLASSES_OBSOLETE2001" ADD CONSTRAINT "TEACHER_FK" FOREIGN KEY ("TEACHER_ID")
	  REFERENCES "MEMBERS" ("ID") ENABLE;
  ALTER TABLE "CLASSES_OBSOLETE2001" ADD CONSTRAINT "HELPER_FK" FOREIGN KEY ("HELPER_ID")
	  REFERENCES "MEMBERS" ("ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table COMMITTEE
--------------------------------------------------------

  ALTER TABLE "COMMITTEE" ADD CONSTRAINT "COMMITTEE_MEMBER_FK" FOREIGN KEY ("MEMBER_ID")
	  REFERENCES "MEMBERS" ("ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table COURSES_OBS
--------------------------------------------------------

  ALTER TABLE "COURSES_OBS" ADD CONSTRAINT "MEMBER_FK" FOREIGN KEY ("MEMBER_ID")
	  REFERENCES "MEMBERS" ("ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table EMPLOYEES
--------------------------------------------------------

  ALTER TABLE "EMPLOYEES" ADD FOREIGN KEY ("DEP_ID")
	  REFERENCES "DEPARTMENTS" ("DEP_ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table KEYS
--------------------------------------------------------

  ALTER TABLE "KEYS" ADD FOREIGN KEY ("MEMBER_ID")
	  REFERENCES "MEMBERS" ("ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table KEYSLOG
--------------------------------------------------------

  ALTER TABLE "KEYSLOG" ADD FOREIGN KEY ("BOAT_ID")
	  REFERENCES "BOATS" ("BOAT_ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table LICENCES
--------------------------------------------------------

  ALTER TABLE "LICENCES" ADD FOREIGN KEY ("MEMBER_ID")
	  REFERENCES "MEMBERS" ("ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table REGATTAS_IN_SERIES
--------------------------------------------------------

  ALTER TABLE "REGATTAS_IN_SERIES" ADD FOREIGN KEY ("REGATTA_ID")
	  REFERENCES "REGATTAS_EXT" ("ID") ENABLE;
  ALTER TABLE "REGATTAS_IN_SERIES" ADD FOREIGN KEY ("SERIES_ID")
	  REFERENCES "REGATTA_SERIES_EXT" ("ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table REGATTA_PARTICIPATION
--------------------------------------------------------

  ALTER TABLE "REGATTA_PARTICIPATION" ADD FOREIGN KEY ("ASSIGNED_BOAT_ID")
	  REFERENCES "BOATS" ("BOAT_ID") ENABLE;
  ALTER TABLE "REGATTA_PARTICIPATION" ADD FOREIGN KEY ("MEMBER_ID")
	  REFERENCES "MEMBERS" ("ID") ENABLE;
  ALTER TABLE "REGATTA_PARTICIPATION" ADD FOREIGN KEY ("REGATTA_ID")
	  REFERENCES "REGATTAS_EXT" ("ID") ENABLE;
  ALTER TABLE "REGATTA_PARTICIPATION" ADD FOREIGN KEY ("BOAT_ID")
	  REFERENCES "BOATS" ("BOAT_ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table REGATTA_PROFILES
--------------------------------------------------------

  ALTER TABLE "REGATTA_PROFILES" ADD FOREIGN KEY ("MEMBER_ID")
	  REFERENCES "MEMBERS" ("ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table RESERVATIONS
--------------------------------------------------------

  ALTER TABLE "RESERVATIONS" ADD FOREIGN KEY ("BOAT_ID")
	  REFERENCES "BOATS" ("BOAT_ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table STATUS
--------------------------------------------------------

  ALTER TABLE "STATUS" ADD FOREIGN KEY ("BOAT_ID")
	  REFERENCES "BOATS" ("BOAT_ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table WEB_LOGON
--------------------------------------------------------

  ALTER TABLE "WEB_LOGON" ADD FOREIGN KEY ("MEMBER_ID")
	  REFERENCES "MEMBERS" ("ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table YCCLOG
--------------------------------------------------------

  ALTER TABLE "YCCLOG" ADD FOREIGN KEY ("BOAT_ID")
	  REFERENCES "BOATS" ("BOAT_ID") ENABLE;
  ALTER TABLE "YCCLOG" ADD FOREIGN KEY ("OWNER_ID")
	  REFERENCES "MEMBERS" ("ID") ENABLE;
